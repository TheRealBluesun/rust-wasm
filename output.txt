
running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out


running 80 tests
run assertion Malformed(Binary(None, []), "unexpected end")
run assertion Malformed(Binary(None, [1]), "unexpected end")
run assertion Malformed(Binary(None, [0, 97, 115]), "unexpected end")
run assertion Malformed(Binary(None, [97, 115, 109, 0]), "magic header not detected")
run assertion Malformed(Binary(None, [109, 115, 97, 0]), "magic header not detected")
run assertion Malformed(Binary(None, [109, 115, 97, 0, 1, 0, 0, 0]), "magic header not detected")
run assertion Malformed(Binary(None, [109, 115, 97, 0, 0, 0, 0, 1]), "magic header not detected")
run assertion Malformed(Binary(None, [97, 115, 109, 1, 0, 0, 0, 0]), "magic header not detected")
run assertion Malformed(Binary(None, [119, 97, 115, 109, 1, 0, 0, 0]), "magic header not detected")
run assertion Malformed(Binary(None, [127, 97, 115, 109, 1, 0, 0, 0]), "magic header not detected")
run assertion Malformed(Binary(None, [128, 97, 115, 109, 1, 0, 0, 0]), "magic header not detected")
run assertion Malformed(Binary(None, [130, 97, 115, 109, 1, 0, 0, 0]), "magic header not detected")
run assertion Malformed(Binary(None, [255, 97, 115, 109, 1, 0, 0, 0]), "magic header not detected")
run assertion Malformed(Binary(None, [0, 0, 0, 1, 109, 115, 97, 0]), "magic header not detected")
run assertion Malformed(Binary(None, [97, 0, 109, 115, 0, 1, 0, 0]), "magic header not detected")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 41, 32, 100, 114, 111, 112, 41]), "unexpected token")
run assertion Malformed(Binary(None, [115, 109, 0, 97, 0, 0, 1, 0]), "magic header not detected")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 65, 83, 77, 1, 0, 0, 0]), "magic header not detected")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 120, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 129, 162, 148, 1, 0, 0, 0]), "magic header not detected")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 103, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [239, 187, 191, 0, 97, 115, 109, 1, 0, 0, 0]), "magic header not detected")
run assertion Malformed(Binary(None, [0, 97, 115, 109]), "unexpected end")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1]), "unexpected end")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0]), "unexpected end")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 0, 0, 0, 0]), "unknown binary version")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 13, 0, 0, 0]), "unknown binary version")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 14, 0, 0, 0]), "unknown binary version")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 0, 1, 0, 0]), "unknown binary version")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 0, 0, 1, 0]), "unknown binary version")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 0, 0, 0, 1]), "unknown binary version")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 41, 32, 100, 114, 111, 112, 41]), "unexpected token")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0]), "unexpected end")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 10, 9, 1, 7, 0, 65, 0, 17, 0, 1, 11]), "zero flag expected")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 0]), "unexpected end")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 120, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 103, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 10, 10, 1, 7, 0, 65, 0, 17, 0, 128, 0, 11]), "zero flag expected")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 38, 16, 97, 32, 99, 117, 115, 116, 111, 109, 32, 115, 101, 99, 116, 105, 111, 110, 116, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 112, 97, 121, 108, 111, 97, 100]), "unexpected end")
test run_comments ... ok
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 10, 11, 1, 8, 0, 65, 0, 17, 0, 128, 128, 0, 11]), "zero flag expected")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 37, 16, 97, 32, 99, 117, 115, 116, 111, 109, 32, 115, 101, 99, 116, 105, 111, 110, 116, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 112, 97, 121, 108, 111, 97, 100, 0, 36, 16, 97, 32, 99, 117, 115, 116, 111, 109, 32, 115, 101, 99, 116, 105, 111, 110, 116, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 112, 97, 121, 108, 111, 97, 100]), "invalid section id")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 10, 12, 1, 9, 0, 65, 0, 17, 0, 128, 128, 128, 0, 11]), "zero flag expected")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 10, 13, 1, 10, 0, 65, 0, 17, 0, 128, 128, 128, 128, 0, 11]), "zero flag expected")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 0, 10, 9, 1, 7, 0, 65, 0, 64, 1, 26, 11]), "zero flag expected")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 0, 10, 10, 1, 8, 0, 65, 0, 64, 128, 0, 26, 11]), "zero flag expected")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 0, 10, 11, 1, 9, 0, 65, 0, 64, 128, 128, 0, 26, 11]), "zero flag expected")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 0, 10, 12, 1, 10, 0, 65, 0, 64, 128, 128, 128, 0, 26, 11]), "zero flag expected")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 0, 10, 13, 1, 11, 0, 65, 0, 64, 128, 128, 128, 128, 0, 26, 11]), "zero flag expected")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 0, 10, 7, 1, 5, 0, 63, 1, 26, 11]), "zero flag expected")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 0, 10, 8, 1, 6, 0, 63, 128, 0, 26, 11]), "zero flag expected")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 0, 10, 9, 1, 7, 0, 63, 128, 128, 0, 26, 11]), "zero flag expected")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 0, 10, 10, 1, 8, 0, 63, 128, 128, 128, 0, 26, 11]), "zero flag expected")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 0, 10, 11, 1, 9, 0, 63, 128, 128, 128, 128, 0, 26, 11]), "zero flag expected")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 7, 1, 96, 2, 127, 127, 1, 127, 0, 37, 16, 97, 32, 99, 117, 115, 116, 111, 109, 32, 115, 101, 99, 116, 105, 111, 110, 116, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 112, 97, 121, 108, 111, 97, 100, 3, 2, 1, 0, 10, 9, 1, 7, 0, 32, 0, 32, 1, 106, 11, 0, 27, 7, 99, 117, 115, 116, 111, 109, 50, 116, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 112, 97, 121, 108, 111, 97, 100]), "function and code section have inconsistent lengths")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 2, 255, 255, 255, 255, 15, 127, 2, 126, 11]), "too many locals")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 8, 1, 0, 130, 128, 128, 128, 128, 0]), "integer representation too long")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 10, 1, 1, 130, 0, 130, 128, 128, 128, 128, 0]), "integer representation too long")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 97, 115, 109, 1, 0, 0, 0]), "length out of bounds")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 3, 2, 0, 0]), "function and code section have inconsistent lengths")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 3, 1, 0, 0, 11, 11, 1, 128, 128, 128, 128, 128, 0, 65, 0, 11, 0]), "integer representation too long")
test run_custom_section ... ok
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 4, 1, 112, 0, 0, 9, 11, 1, 128, 128, 128, 128, 128, 0, 65, 0, 11, 0]), "integer representation too long")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 10, 4, 1, 2, 0, 11]), "function and code section have inconsistent lengths")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 131, 128, 128, 128, 128, 0, 1, 49, 50]), "integer representation too long")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 10, 131, 128, 128, 128, 128, 0, 49, 50, 51, 52]), "integer representation too long")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 3, 2, 0, 0, 10, 4, 1, 2, 0, 11]), "function and code section have inconsistent lengths")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 12, 1, 96, 130, 128, 128, 128, 128, 0, 127, 126, 1, 127]), "integer representation too long")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 8, 1, 96, 2, 127, 126, 129, 128, 128, 128, 128, 0, 127]), "integer representation too long")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 7, 2, 2, 0, 11, 2, 0, 11]), "function and code section have inconsistent lengths")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 1, 127, 0, 2, 27, 1, 136, 128, 128, 128, 128, 0, 115, 112, 101, 99, 116, 101, 115, 116, 9, 112, 114, 105, 110, 116, 95, 105, 51, 50, 0, 0]), "integer representation too long")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 1, 127, 0, 2, 27, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 137, 128, 128, 128, 128, 0, 112, 114, 105, 110, 116, 95, 105, 51, 50, 0, 0]), "integer representation too long")
run assertion Return(Invoke { mod_ref: None, func: "i64.extend_i32_s", args: [I32(0)] }, [I64(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 1, 127, 0, 2, 27, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 9, 112, 114, 105, 110, 116, 95, 105, 51, 50, 0, 128, 128, 128, 128, 128, 0]), "integer representation too long")
run assertion Return(Invoke { mod_ref: None, func: "i64.extend_i32_s", args: [I32(10000)] }, [I64(10000)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 7, 2, 96, 0, 0]), "unexpected end of section or function")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 3, 1, 128, 128, 128, 128, 128, 0, 10, 4, 1, 2, 0, 11]), "integer representation too long")
run assertion Return(Invoke { mod_ref: None, func: "i64.extend_i32_s", args: [I32(4294957296)] }, [I64(18446744073709541616)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0]), "unexpected end")
run assertion Return(Invoke { mod_ref: None, func: "i64.extend_i32_s", args: [I32(4294967295)] }, [I64(18446744073709551615)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 7, 11, 1, 130, 128, 128, 128, 128, 0, 102, 49, 0, 0, 10, 4, 1, 2, 0, 11]), "integer representation too long")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 0]), "unexpected end")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 7, 1, 96, 0, 0, 96, 0, 0]), "section size mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64.extend_i32_s", args: [I32(2147483647)] }, [I64(2147483647)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 0, 0, 5, 1, 0, 7, 0, 0]), "unexpected end")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 7, 11, 1, 2, 102, 49, 0, 128, 128, 128, 128, 128, 0, 10, 4, 1, 2, 0, 11]), "integer representation too long")
run assertion Return(Invoke { mod_ref: None, func: "i64.extend_i32_s", args: [I32(2147483648)] }, [I64(18446744071562067968)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 38, 16, 97, 32, 99, 117, 115, 116, 111, 109, 32, 115, 101, 99, 116, 105, 111, 110, 116, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 112, 97, 121, 108, 111, 97, 100]), "unexpected end")
run assertion Return(Invoke { mod_ref: None, func: "i64.extend_i32_u", args: [I32(0)] }, [I64(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 1, 127, 0, 2, 22, 2, 8, 115, 112, 101, 99, 116, 101, 115, 116, 9, 112, 114, 105, 110, 116, 95, 105, 51, 50, 0, 0]), "unexpected end of section or function")
run assertion Return(Invoke { mod_ref: None, func: "i64.extend_i32_u", args: [I32(10000)] }, [I64(10000)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 5, 129, 128, 128, 128, 128, 0, 2, 0, 11]), "integer representation too long")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 37, 16, 97, 32, 99, 117, 115, 116, 111, 109, 32, 115, 101, 99, 116, 105, 111, 110, 116, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 112, 97, 121, 108, 111, 97, 100, 0, 36, 16, 97, 32, 99, 117, 115, 116, 111, 109, 32, 115, 101, 99, 116, 105, 111, 110, 116, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 112, 97, 121, 108, 111, 97, 100]), "invalid section id")
run assertion Return(Invoke { mod_ref: None, func: "i64.extend_i32_u", args: [I32(4294957296)] }, [I64(4294957296)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 9, 2, 96, 1, 127, 0, 96, 1, 125, 0, 2, 43, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 9, 112, 114, 105, 110, 116, 95, 105, 51, 50, 0, 0, 8, 115, 112, 101, 99, 116, 101, 115, 116, 9, 112, 114, 105, 110, 116, 95, 102, 51, 50, 0, 1]), "section size mismatch")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 1, 10, 17, 1, 15, 1, 1, 127, 65, 0, 40, 2, 130, 128, 128, 128, 128, 0, 26, 11]), "integer representation too long")
run assertion Return(Invoke { mod_ref: None, func: "i64.extend_i32_u", args: [I32(4294967295)] }, [I64(4294967295)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 7, 1, 96, 2, 127, 127, 1, 127, 0, 37, 16, 97, 32, 99, 117, 115, 116, 111, 109, 32, 115, 101, 99, 116, 105, 111, 110, 116, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 112, 97, 121, 108, 111, 97, 100, 3, 2, 1, 0, 10, 9, 1, 7, 0, 32, 0, 32, 1, 106, 11, 0, 27, 7, 99, 117, 115, 116, 111, 109, 50, 116, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 112, 97, 121, 108, 111, 97, 100]), "function and code section have inconsistent lengths")
run assertion Return(Invoke { mod_ref: None, func: "i64.extend_i32_u", args: [I32(2147483647)] }, [I64(2147483647)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 1, 1]), "unexpected end of section or function")
run assertion Return(Invoke { mod_ref: None, func: "i64.extend_i32_u", args: [I32(2147483648)] }, [I64(2147483648)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 1, 10, 17, 1, 15, 1, 1, 127, 65, 0, 40, 130, 128, 128, 128, 128, 0, 0, 26, 11]), "integer representation too long")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 97, 115, 109, 1, 0, 0, 0]), "length out of bounds")
run assertion Return(Invoke { mod_ref: None, func: "i32.wrap_i64", args: [I64(18446744073709551615)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good1", args: [I32(0)] }, [I32(97)])
run assertion Return(Invoke { mod_ref: None, func: "i32.wrap_i64", args: [I64(18446744073709451616)] }, [I32(4294867296)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 1, 1]), "unexpected end of section or function")
run assertion Return(Invoke { mod_ref: None, func: "8u_good2", args: [I32(0)] }, [I32(97)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 1, 10, 18, 1, 16, 1, 1, 127, 65, 0, 65, 3, 54, 130, 128, 128, 128, 128, 0, 3, 11]), "integer representation too long")
run assertion Return(Invoke { mod_ref: None, func: "i32.wrap_i64", args: [I64(2147483648)] }, [I32(2147483648)])
test run_custom ... ok
run assertion Return(Invoke { mod_ref: None, func: "8u_good3", args: [I32(0)] }, [I32(98)])
run assertion Return(Invoke { mod_ref: None, func: "i32.wrap_i64", args: [I64(18446744071562067967)] }, [I32(2147483647)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 1, 10, 18, 1, 16, 1, 1, 127, 65, 0, 65, 3, 54, 2, 130, 128, 128, 128, 128, 0, 11]), "integer representation too long")
run assertion Return(Invoke { mod_ref: None, func: "i32.wrap_i64", args: [I64(18446744069414584320)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good4", args: [I32(0)] }, [I32(99)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 6, 2, 127, 0, 65, 0, 11]), "unexpected end of section or function")
run assertion Return(Invoke { mod_ref: None, func: "i32.wrap_i64", args: [I64(18446744069414584319)] }, [I32(4294967295)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 11, 1, 127, 0, 65, 128, 128, 128, 128, 128, 0, 11]), "integer representation too long")
run assertion Return(Invoke { mod_ref: None, func: "8u_good5", args: [I32(0)] }, [I32(122)])
run assertion Return(Invoke { mod_ref: None, func: "i32.wrap_i64", args: [I64(18446744069414584321)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 11, 1, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11]), "section size mismatch")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 11, 1, 127, 0, 65, 255, 255, 255, 255, 255, 127, 11]), "integer representation too long")
run assertion Return(Invoke { mod_ref: None, func: "8s_good1", args: [I32(0)] }, [I32(97)])
run assertion Return(Invoke { mod_ref: None, func: "i32.wrap_i64", args: [I64(0)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 16, 1, 126, 0, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 0, 11]), "integer representation too long")
run assertion Return(Invoke { mod_ref: None, func: "8s_good2", args: [I32(0)] }, [I32(97)])
run assertion Return(Invoke { mod_ref: None, func: "i32.wrap_i64", args: [I64(1311768467463790320)] }, [I32(2596069104)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 16, 1, 126, 0, 66, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 127, 11]), "integer representation too long")
run assertion Return(Invoke { mod_ref: None, func: "i32.wrap_i64", args: [I64(4294967295)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good3", args: [I32(0)] }, [I32(98)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 7, 1, 0, 130, 128, 128, 128, 112]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "i32.wrap_i64", args: [I64(4294967296)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good4", args: [I32(0)] }, [I32(99)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 7, 1, 0, 130, 128, 128, 128, 64]), "integer too large")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 3, 2, 0, 0, 7, 6, 2, 2, 102, 49, 0, 0, 10, 7, 2, 2, 0, 11, 2, 0, 11]), "unexpected end of section or function")
run assertion Return(Invoke { mod_ref: None, func: "i32.wrap_i64", args: [I64(4294967297)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good5", args: [I32(0)] }, [I32(122)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 9, 1, 1, 130, 0, 130, 128, 128, 128, 16]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "16u_good1", args: [I32(0)] }, [I32(25185)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 9, 1, 1, 130, 0, 130, 128, 128, 128, 64]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "16u_good2", args: [I32(0)] }, [I32(25185)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 3, 2, 0, 0, 7, 11, 1, 2, 102, 49, 0, 0, 2, 102, 50, 0, 1, 10, 7, 2, 2, 0, 11, 2, 0, 11]), "section size mismatch")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 3, 1, 0, 0, 11, 10, 1, 128, 128, 128, 128, 16, 65, 0, 11, 0]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "16u_good3", args: [I32(0)] }, [I32(25442)])
run assertion Return(Invoke { mod_ref: None, func: "16u_good4", args: [I32(0)] }, [I32(25699)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 4, 1, 112, 0, 0, 9, 10, 1, 128, 128, 128, 128, 16, 65, 0, 11, 0]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "16u_good5", args: [I32(0)] }, [I32(122)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 131, 128, 128, 128, 16, 1, 49, 50]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "16s_good1", args: [I32(0)] }, [I32(25185)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 9, 131, 128, 128, 128, 64, 49, 50, 51, 52]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "16s_good2", args: [I32(0)] }, [I32(25185)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 11, 1, 96, 130, 128, 128, 128, 16, 127, 126, 1, 127]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "16s_good3", args: [I32(0)] }, [I32(25442)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 11, 1, 96, 2, 127, 126, 129, 128, 128, 128, 64, 127]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "16s_good4", args: [I32(0)] }, [I32(25699)])
run assertion Return(Invoke { mod_ref: None, func: "16s_good5", args: [I32(0)] }, [I32(122)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 1, 127, 0, 2, 26, 1, 136, 128, 128, 128, 16, 115, 112, 101, 99, 116, 101, 115, 116, 9, 112, 114, 105, 110, 116, 95, 105, 51, 50, 0, 0]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "32_good1", args: [I32(0)] }, [I32(1684234849)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 1, 127, 0, 2, 26, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 137, 128, 128, 128, 64, 112, 114, 105, 110, 116, 95, 105, 51, 50, 0, 0]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "32_good2", args: [I32(0)] }, [I32(1684234849)])
run assertion Return(Invoke { mod_ref: None, func: "32_good3", args: [I32(0)] }, [I32(1701077858)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 1, 127, 0, 2, 26, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 9, 112, 114, 105, 110, 116, 95, 105, 51, 50, 0, 128, 128, 128, 128, 16]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "32_good4", args: [I32(0)] }, [I32(1717920867)])
run assertion Return(Invoke { mod_ref: None, func: "32_good5", args: [I32(0)] }, [I32(122)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 6, 1, 128, 128, 128, 128, 16, 10, 4, 1, 2, 0, 11]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "8u_good1", args: [I32(65507)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good2", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 7, 10, 1, 130, 128, 128, 128, 16, 102, 49, 0, 0, 10, 4, 1, 2, 0, 11]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "8u_good3", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 7, 10, 1, 2, 102, 49, 0, 128, 128, 128, 128, 16, 10, 4, 1, 2, 0, 11]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "8u_good4", args: [I32(65507)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good5", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 8, 129, 128, 128, 128, 16, 2, 0, 11]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "8s_good1", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 1, 10, 16, 1, 14, 1, 1, 127, 65, 0, 40, 2, 130, 128, 128, 128, 16, 26, 11]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "8s_good2", args: [I32(65507)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good3", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 1, 10, 16, 1, 14, 1, 1, 127, 65, 0, 40, 2, 130, 128, 128, 128, 64, 26, 11]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "8s_good4", args: [I32(65507)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good5", args: [I32(65507)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(-0.0)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 1, 10, 16, 1, 14, 1, 1, 127, 65, 0, 40, 130, 128, 128, 128, 16, 0, 26, 11]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "16u_good1", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 1, 9, 7, 2, 0, 65, 0, 11, 1, 0, 10, 4, 1, 2, 0, 11]), "invalid value type")
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "16u_good2", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 1, 10, 16, 1, 14, 1, 1, 127, 65, 0, 40, 130, 128, 128, 128, 64, 0, 26, 11]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "16u_good3", args: [I32(65507)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 1, 9, 13, 1, 0, 65, 0, 11, 1, 0, 0, 65, 0, 11, 1, 0, 10, 4, 1, 2, 0, 11]), "section size mismatch")
run assertion Return(Invoke { mod_ref: None, func: "16u_good4", args: [I32(65507)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "br", args: [] }, [])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 1, 10, 17, 1, 15, 1, 1, 127, 65, 0, 65, 3, 54, 130, 128, 128, 128, 16, 3, 11]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "br_if", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "16u_good5", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 41, 32, 100, 114, 111, 112, 41]), "unexpected token")
run assertion Return(Invoke { mod_ref: None, func: "br_table", args: [] }, [])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 56, 95, 115, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "16s_good1", args: [I32(65507)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(1.1)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 46, 48, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 1, 10, 17, 1, 15, 1, 1, 127, 65, 0, 65, 3, 54, 130, 128, 128, 128, 64, 3, 11]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "16s_good2", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 46, 48, 101, 48, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 56, 95, 115, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 3, 1, 0, 1, 11, 7, 2, 0, 65, 0, 11, 1, 97]), "unexpected end of section or function")
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(1.5)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 101, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 1, 10, 17, 1, 15, 1, 1, 127, 65, 0, 65, 3, 54, 3, 130, 128, 128, 128, 16, 11]), "integer too large")
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 56, 95, 117, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "16s_good3", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 101, 43, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(-1.0)] }, [I32(4294967295)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 56, 95, 117, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "16s_good4", args: [I32(65507)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "call-7", args: [] }, [I32(65)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 46, 48, 101, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 3, 1, 0, 1, 11, 13, 1, 0, 65, 0, 11, 1, 97, 0, 65, 1, 11, 1, 98]), "section size mismatch")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 3, 1, 0, 1, 10, 17, 1, 15, 1, 1, 127, 65, 0, 65, 3, 54, 2, 130, 128, 128, 128, 64, 11]), "integer too large")
test run_break_drop ... ok
run assertion Return(Invoke { mod_ref: None, func: "call-9", args: [] }, [I32(66)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 46, 48, 101, 45, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 3, 1, 0, 1, 11, 12, 1, 0, 65, 3, 11, 7, 97, 98, 99, 100, 101, 102]), "unexpected end of section or function")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 10, 1, 127, 0, 65, 128, 128, 128, 128, 112, 11]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "16s_good5", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 49, 54, 95, 115, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 10, 1, 127, 0, 65, 255, 255, 255, 255, 15, 11]), "integer too large")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 3, 1, 0, 1, 11, 12, 1, 0, 65, 0, 11, 5, 97, 98, 99, 100, 101, 102]), "section size mismatch")
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 49, 54, 95, 115, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 120, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 10, 1, 127, 0, 65, 128, 128, 128, 128, 31, 11]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "32_good1", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 49, 54, 95, 117, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 103, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 10, 1, 127, 0, 65, 255, 255, 255, 255, 79, 11]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "32_good2", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 49, 54, 95, 117, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 46, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 15, 1, 126, 0, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 126, 11]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "32_good3", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 46, 103, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 15, 1, 126, 0, 66, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 11]), "integer too large")
run assertion Return(Invoke { mod_ref: None, func: "32_good4", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 112, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 18, 1, 16, 0, 2, 64, 65, 1, 4, 64, 65, 1, 14, 2, 0, 2, 11, 11, 11]), "unexpected end of section or function")
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "32_good5", args: [I32(65507)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 15, 1, 126, 0, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 2, 11]), "integer too large")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 112, 43, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 56, 95, 115, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "8u_good1", args: [I32(65508)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 112, 45, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 15, 1, 126, 0, 66, 255, 255, 255, 255, 255, 255, 255, 255, 255, 65, 11]), "integer too large")
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 56, 95, 115, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "8u_good2", args: [I32(65508)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 46, 48, 112, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 18, 1, 17, 0, 2, 64, 65, 1, 4, 64, 65, 1, 14, 1, 0, 1, 2, 11, 11, 11]), "invalid value type")
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 56, 95, 117, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
test run_binary_leb128 ... ok
run assertion Return(Invoke { mod_ref: None, func: "8u_good3", args: [I32(65508)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 46, 48, 112, 43, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 56, 95, 117, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 46, 48, 112, 45, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "8u_good4", args: [I32(65508)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 49, 54, 95, 115, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 112, 65, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "8u_good5", args: [I32(65508)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 49, 54, 95, 115, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "8s_good1", args: [I32(65508)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 49, 54, 95, 117, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 8, 1, 0, 8, 1, 0, 10, 4, 1, 2, 0, 11]), "junk after last section")
run assertion Return(Invoke { mod_ref: None, func: "8s_good2", args: [I32(65508)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 49, 54, 95, 117, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "8s_good3", args: [I32(65508)] }, [I32(0)])
test run_binary ... ok
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 51, 50, 95, 115, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "8s_good4", args: [I32(65508)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 51, 50, 95, 115, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "8s_good5", args: [I32(65508)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 51, 50, 95, 117, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "16u_good1", args: [I32(65508)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 51, 50, 95, 117, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "16u_good2", args: [I32(65508)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "16u_good3", args: [I32(65508)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_s", args: [I32(4294967295)] }, [I32(4294967295)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "16u_good4", args: [I32(65508)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_s", args: [I32(4294963054)] }, [I32(4294963054)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 102, 51, 50, 46, 108, 111, 97, 100, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "16u_good5", args: [I32(65508)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_s", args: [I32(42)] }, [I32(42)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 102, 51, 50, 46, 108, 111, 97, 100, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "16s_good1", args: [I32(65508)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 102, 54, 52, 46, 108, 111, 97, 100, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "16s_good2", args: [I32(65508)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_s", args: [I32(12816)] }, [I32(12816)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 102, 54, 52, 46, 108, 111, 97, 100, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "16s_good3", args: [I32(65508)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_u", args: [I32(4294967295)] }, [I32(65535)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 105, 51, 50, 46, 115, 116, 111, 114, 101, 56, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "16s_good4", args: [I32(65508)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_u", args: [I32(4294963054)] }, [I32(61294)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 105, 51, 50, 46, 115, 116, 111, 114, 101, 56, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "16s_good5", args: [I32(65508)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_u", args: [I32(42)] }, [I32(42)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 105, 51, 50, 46, 115, 116, 111, 114, 101, 49, 54, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "32_good1", args: [I32(65508)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_u", args: [I32(51966)] }, [I32(51966)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 105, 51, 50, 46, 115, 116, 111, 114, 101, 49, 54, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "32_good2", args: [I32(65508)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load", args: [I32(4294967295)] }, [I32(4294967295)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 105, 51, 50, 46, 115, 116, 111, 114, 101, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "32_good3", args: [I32(65508)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 105, 51, 50, 46, 115, 116, 111, 114, 101, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "i32_load", args: [I32(4252543054)] }, [I32(4252543054)])
run assertion Return(Invoke { mod_ref: None, func: "32_good4", args: [I32(65508)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 115, 116, 111, 114, 101, 56, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "elements segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(-0.0)] }, [F32(-0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "32_good5", args: [I32(65508)] }, "out of bounds memory access")
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 115, 116, 111, 114, 101, 56, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load", args: [I32(42424242)] }, [I32(42424242)])
run assertion TrapAction(Invoke { mod_ref: None, func: "8u_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(0.0)] }, [F32(0.0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 115, 116, 111, 114, 101, 49, 54, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "empty", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 11, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 97]), "data segment does not fit")
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 4, 133, 128, 128, 128, 0, 1, 112, 1, 0, 0, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "elements segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "i32_load", args: [I32(2880249322)] }, [I32(2880249322)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(-0.0)] }, [F32(0.0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 115, 116, 111, 114, 101, 49, 54, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "singular", args: [] }, [I32(7)])
run assertion TrapAction(Invoke { mod_ref: None, func: "8s_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(0.0)] }, [F32(0.0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 115, 116, 111, 114, 101, 51, 50, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 132, 128, 128, 128, 0, 1, 1, 0, 0, 11, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 97]), "data segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_s", args: [I64(18446744073709551615)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "multi", args: [] }, [I32(8)])
run assertion TrapAction(Invoke { mod_ref: None, func: "16u_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 115, 116, 111, 114, 101, 51, 50, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 4, 133, 128, 128, 128, 0, 1, 112, 1, 0, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "elements segment does not fit")
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 132, 128, 128, 128, 0, 1, 1, 0, 1, 11, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 97]), "data segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "nested", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "deep", args: [] }, [I32(150)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_s", args: [I64(18446744073709547374)] }, [I64(18446744073709547374)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(-1.1)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "type-i32", args: [] }, [I32(306)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_s", args: [I64(42)] }, [I64(42)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-mid", args: [] }, [I32(2)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 9, 134, 128, 128, 128, 0, 1, 0, 65, 1, 11, 0]), "elements segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "type-i32", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_s", args: [I64(12816)] }, [I64(12816)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 115, 116, 111, 114, 101, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(-0.5)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-i64", args: [] }, [I64(356)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_u", args: [I64(18446744073709551615)] }, [I64(65535)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-last", args: [] }, [I32(2)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 10, 9, 135, 128, 128, 128, 0, 1, 0, 65, 10, 11, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "elements segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "type-i64", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(-1.5)] }, [I32(4294967295)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 11, 134, 128, 128, 128, 0, 1, 0, 65, 1, 11, 0]), "data segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(0.5)] }, [F32(0.0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 115, 116, 111, 114, 101, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "type-f32", args: [] }, [F32(3890.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_u", args: [I64(18446744073709547374)] }, [I64(61294)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(-0.5)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-f32", args: [] }, [])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 132, 128, 128, 128, 0, 1, 1, 0, 1, 11, 134, 128, 128, 128, 0, 1, 0, 65, 1, 11, 0]), "data segment does not fit")
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 115, 116, 111, 114, 101, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-f64", args: [] }, [F64(3940.0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 148, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 5, 116, 97, 98, 108, 101, 1, 112, 0, 10, 3, 130, 128, 128, 128, 0, 1, 0, 9, 135, 128, 128, 128, 0, 1, 0, 65, 10, 11, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "elements segment does not fit")
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 115, 116, 111, 114, 101, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "type-first-i32", args: [] }, [I32(32)])
run assertion Return(Invoke { mod_ref: None, func: "type-f64", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-first", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "type-first-i64", args: [] }, [I64(64)])
run assertion Return(Invoke { mod_ref: None, func: "type-i32", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(-1.9)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "type-first-f32", args: [] }, [F32(1.32)])
run assertion Return(Invoke { mod_ref: None, func: "type-i64", args: [] }, [])
run assertion TrapAction(Invoke { mod_ref: None, func: "16s_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "type-f32", args: [] }, [])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 152, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 10, 103, 108, 111, 98, 97, 108, 95, 105, 51, 50, 3, 127, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 11, 135, 128, 128, 128, 0, 1, 0, 35, 0, 11, 1, 97]), "data segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "type-f64", args: [] }, [])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 115, 116, 111, 114, 101, 32, 97, 108, 105, 103, 110, 61, 48, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "type-i32-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-mid", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_u", args: [I64(42)] }, [I64(42)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(-2.0)] }, [I32(4294967294)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-last", args: [] }, [I32(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 4, 133, 128, 128, 128, 0, 1, 112, 1, 10, 20, 9, 135, 128, 128, 128, 0, 1, 0, 65, 10, 11, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "elements segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(-1.0)] }, [F32(-0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "32_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "type-i32-value", args: [] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 115, 116, 111, 114, 101, 32, 97, 108, 105, 103, 110, 61, 55, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "alignment")
run assertion Return(Invoke { mod_ref: None, func: "type-i64-value", args: [] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(1.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-first-f64", args: [] }, [F64(1.64)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-condition", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "type-f32-value", args: [] }, [F32(3.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 44, 1, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "8u_bad", args: [I32(1)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "type-i64-value", args: [] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 132, 128, 128, 128, 0, 1, 1, 1, 2, 11, 137, 128, 128, 128, 0, 1, 0, 65, 128, 128, 4, 11, 1, 97]), "data segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_u", args: [I64(51966)] }, [I64(51966)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(-1.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-second-i32", args: [] }, [I32(32)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(2147483500.0)] }, [I32(2147483520)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 45, 1, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 148, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 5, 116, 97, 98, 108, 101, 1, 112, 0, 10, 3, 130, 128, 128, 128, 0, 1, 0, 9, 135, 128, 128, 128, 0, 1, 0, 65, 10, 11, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "elements segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "type-f32-value", args: [] }, [F32(3.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "8s_bad", args: [I32(1)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "type-f64-value", args: [] }, [F64(4.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_s", args: [I64(18446744073709551615)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(1.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "type-second-i64", args: [] }, [I64(64)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 148, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 6, 109, 101, 109, 111, 114, 121, 2, 0, 1, 11, 137, 128, 128, 128, 0, 1, 0, 65, 128, 128, 4, 11, 1, 97]), "data segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_s", args: [I64(18446744073667127374)] }, [I64(18446744073667127374)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-first", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(-6.2831855)] }, [F32(-0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "16u_bad", args: [I32(1)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "as-block-first", args: [I32(0)] }, [I32(2)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 46, 2, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(6.2831855)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-second-f32", args: [] }, [F32(32.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-f64-value", args: [] }, [F64(4.0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 10, 9, 135, 128, 128, 128, 0, 1, 0, 65, 127, 11, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "elements segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "as-block-first", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(-6.2831855)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-mid", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(-2147483600.0)] }, [I32(2147483648)])
run assertion TrapAction(Invoke { mod_ref: None, func: "16s_bad", args: [I32(1)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "as-block-last", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-block-first", args: [I32(1)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-last", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(6.2831855)] }, [F32(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(2147483600.0)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 2, 11, 137, 128, 128, 128, 0, 1, 0, 65, 128, 128, 8, 11, 1, 97]), "data segment does not fit")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 47, 2, 0, 26, 11]), "alignment must not be larger than natural")
run assertion TrapAction(Invoke { mod_ref: None, func: "32_bad", args: [I32(1)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_s", args: [I64(42424242)] }, [I64(42424242)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 148, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 5, 116, 97, 98, 108, 101, 1, 112, 0, 10, 3, 130, 128, 128, 128, 0, 1, 0, 9, 135, 128, 128, 128, 0, 1, 0, 65, 127, 11, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "elements segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "type-second-f64", args: [] }, [F64(64.1)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-mid", args: [I32(0)] }, [I32(2)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 132, 128, 128, 128, 0, 1, 1, 2, 3, 11, 137, 128, 128, 128, 0, 1, 0, 65, 128, 128, 8, 11, 1, 97]), "data segment does not fit")
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(-2147484000.0)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-value", args: [] }, [I32(2)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 32, 111, 102, 102, 115, 101, 116, 61, 52, 50, 57, 52, 57, 54, 55, 50, 57, 54, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41]), "i32 constant")
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-first", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_s", args: [I64(305419896)] }, [I64(305419896)])
run assertion Return(Invoke { mod_ref: None, func: "fac", args: [I64(0)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-last", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-mid", args: [I32(1)] }, [I32(3)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 10, 9, 135, 128, 128, 128, 0, 1, 0, 65, 118, 11, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "elements segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "as-loop-first", args: [] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_u", args: [I64(18446744073709551615)] }, [I64(4294967295)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 40, 3, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "as-loop-mid", args: [] }, [I32(4)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(inf)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "fac", args: [I64(1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [] }, [I32(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 11, 135, 128, 128, 128, 0, 1, 0, 65, 127, 11, 1, 97]), "data segment does not fit")
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(-inf)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "fac", args: [I64(5)] }, [I64(120)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-last", args: [] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_u", args: [I64(18446744073667127374)] }, [I64(4252543054)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-last", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(-0.5)] }, [F32(-0.5)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 148, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 6, 109, 101, 109, 111, 114, 121, 2, 0, 1, 11, 135, 128, 128, 128, 0, 1, 0, 65, 127, 11, 1, 97]), "data segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "as-block-last", args: [I32(1)] }, [])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 48, 1, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "fac", args: [I64(25)] }, [I64(7034535277573963776)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 148, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 5, 116, 97, 98, 108, 101, 1, 112, 0, 10, 3, 130, 128, 128, 128, 0, 1, 0, 9, 135, 128, 128, 128, 0, 1, 0, 65, 118, 11, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "elements segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-cond", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_u", args: [I64(42424242)] }, [I64(42424242)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-first-value", args: [I32(0)] }, [I32(11)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "fac-acc", args: [I64(0), I64(1)] }, [I64(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 2, 11, 136, 128, 128, 128, 0, 1, 0, 65, 156, 127, 11, 1, 97]), "data segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "fac-acc", args: [I64(1), I64(1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "unknown table")
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_u", args: [I64(2880249322)] }, [I64(2880249322)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 41, 32, 100, 114, 111, 112, 41]), "unexpected token")
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value", args: [] }, [I32(8)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 148, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 6, 109, 101, 109, 111, 114, 121, 2, 0, 1, 11, 136, 128, 128, 128, 0, 1, 0, 65, 156, 127, 11, 1, 97]), "data segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "as-block-first-value", args: [I32(1)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value-cond", args: [] }, [I32(9)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 1, 9, 134, 128, 128, 128, 0, 1, 0, 66, 0, 11, 0]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "fac-acc", args: [I64(5), I64(1)] }, [I64(120)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-mid-value", args: [I32(0)] }, [I32(21)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-first", args: [] }, [])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 46, 48, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 104, 11, 0]), "constant expression required")
run assertion Return(Invoke { mod_ref: None, func: "as-store-last", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-block-mid-value", args: [I32(1)] }, [I32(20)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 46, 48, 101, 48, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(-inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "fac-acc", args: [I64(25), I64(1)] }, [I64(7034535277573963776)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-last-value", args: [I32(0)] }, [I32(11)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 101, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 11, 134, 128, 128, 128, 0, 1, 0, 65, 0, 11, 0]), "unknown memory")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-last-value", args: [I32(1)] }, [I32(11)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-index", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "fib", args: [I64(0)] }, [I64(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 49, 1, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "i64_load", args: [I64(18446744073709551615)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-first", args: [I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(inf)] }, [F32(0.0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 101, 43, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "as-loop-first", args: [I32(1)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(-inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "fib", args: [I64(1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load", args: [I64(18446744073667127374)] }, [I64(18446744073667127374)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 50, 2, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(inf)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value", args: [] }, [I32(10)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 46, 48, 101, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "as-loop-mid", args: [I32(0)] }, [I32(2)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 1, 9, 133, 128, 128, 128, 0, 1, 0, 1, 11, 0]), "constant expression required")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 46, 48, 101, 45, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "fib", args: [I64(2)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-mid", args: [I32(1)] }, [I32(4)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 11, 134, 128, 128, 128, 0, 1, 0, 66, 0, 11, 0]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(NaN)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load", args: [I64(2880249322)] }, [I64(2880249322)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value-index", args: [] }, [I32(11)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 51, 2, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "type-i32", args: [] }, [I32(306)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "fib", args: [I64(5)] }, [I64(8)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 1, 9, 135, 128, 128, 128, 0, 1, 0, 1, 65, 0, 11, 0]), "constant expression required")
run assertion Return(Invoke { mod_ref: None, func: "as-loop-last", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.0), F32(NaN)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 11, 135, 128, 128, 128, 0, 1, 0, 65, 0, 104, 11, 0]), "constant expression required")
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [] }, [I64(7)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 1, 11, 0]), "constant expression required")
run assertion Return(Invoke { mod_ref: None, func: "type-i64", args: [] }, [I64(356)])
run assertion Return(Invoke { mod_ref: None, func: "fib", args: [I64(20)] }, [I64(10946)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-last", args: [I32(1)] }, [])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 52, 3, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load", args: [I64(12370766947463011818)] }, [I64(12370766947463011818)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-cond", args: [] }, [I32(2)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 11, 133, 128, 128, 128, 0, 1, 0, 1, 11, 0]), "constant expression required")
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_s", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "type-f32", args: [] }, [F32(3890.0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f32_load", args: [F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-cond", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(1), I32(6)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "type-f64", args: [] }, [F64(3940.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 11, 135, 128, 128, 128, 0, 1, 0, 1, 65, 0, 11, 0]), "constant expression required")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 120, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 53, 3, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(NaN)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 11, 135, 128, 128, 128, 0, 1, 0, 65, 0, 1, 11, 0]), "constant expression required")
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(0), I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "f32_load", args: [F32(0.01234)] }, [F32(0.01234)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.0), F32(NaN)] }, [F32(0.0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 103, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value", args: [] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 41, 4, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 46, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "call-overwritten", args: [] }, [I32(66)])
test run_data ... run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 46, 103, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "type-index", args: [] }, [I64(100)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32_load", args: [F32(4242.4243)] }, [F32(4242.4243)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value-cond", args: [I32(0)] }, [I32(2)])
ok
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 112, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "type-first-i32", args: [] }, [I32(32)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(-0.0)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 112, 43, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(0), I32(6)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value-cond", args: [I32(1)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 112, 45, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 42, 3, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-index", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "type-first-i64", args: [] }, [I64(64)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(1), I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32_load", args: [F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 46, 48, 112, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 43, 4, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "type-first-f32", args: [] }, [F32(1.32)])
run assertion Return(Invoke { mod_ref: None, func: "f64_load", args: [F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "call-overwritten-element", args: [] }, [I32(66)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(0), I32(6)] }, [I32(5)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 46, 48, 112, 43, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f64_load", args: [F64(1234.56789)] }, [F64(1234.56789)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value-index", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(1), I32(6)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(1.0)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 46, 48, 112, 45, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "type-first-f64", args: [] }, [F64(1.64)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 44, 1, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-second-i32", args: [] }, [I32(32)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 112, 65, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "as-select-second", args: [I32(0), I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(1.1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64_load", args: [F64(424242.424242)] }, [F64(424242.424242)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-second", args: [I32(1), I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "type-second-i64", args: [] }, [I64(64)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 45, 1, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(1.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-cond", args: [] }, [I32(7)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good1", args: [I32(0)] }, [I64(97)])
run assertion Return(Invoke { mod_ref: None, func: "type-second-f32", args: [] }, [F32(32.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-first", args: [] }, [I32(12)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(1.9)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good2", args: [I32(0)] }, [I64(97)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 46, 2, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "as-call-mid", args: [] }, [I32(13)])
run assertion Return(Invoke { mod_ref: None, func: "type-second-f64", args: [] }, [F64(64.1)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(2.0)] }, [I32(2)])
run assertion TrapAction(Invoke { mod_ref: Some("module1"), func: "call-7", args: [] }, "uninitialized element")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good3", args: [I32(0)] }, [I64(98)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-last", args: [] }, [I32(14)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch", args: [I32(5), I64(2)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: Some("module1"), func: "call-8", args: [] }, [I32(65)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-func", args: [] }, [I32(20)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good4", args: [I32(0)] }, [I64(99)])
run assertion Return(Invoke { mod_ref: Some("module1"), func: "call-9", args: [] }, [I32(66)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 47, 2, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 48, 48, 48, 48, 48, 48, 48, 48, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch", args: [I32(5), I64(5)] }, [I64(5)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [] }, [I32(21)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good5", args: [I32(0)] }, [I64(122)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(2147483600.0)] }, [I32(2147483648)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 45, 48, 120, 56, 48, 48, 48, 48, 48, 48, 49, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 40, 3, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [] }, [I32(22)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "dispatch", args: [I32(12), I64(5)] }, [I64(120)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good1", args: [I32(0)] }, [I64(97)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(4294967000.0)] }, [I32(4294967040)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [] }, [I32(23)])
run assertion Return(Invoke { mod_ref: None, func: "f64_load", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: Some("module1"), func: "call-7", args: [] }, [I32(67)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "8s_good2", args: [I32(0)] }, [I64(97)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(-0.9)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 48, 1, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [] }, [I32(17)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(-0.99999994)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: Some("module1"), func: "call-8", args: [] }, [I32(68)])
run assertion Return(Invoke { mod_ref: None, func: "i32_store16", args: [I32(4294967295)] }, [I32(65535)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-cond", args: [I32(0)] }, [I32(2)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(4294967300.0)] }, "integer overflow")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 49, 1, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "as-if-cond", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: Some("module1"), func: "call-9", args: [] }, [I32(66)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(0), I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "i32_store16", args: [I32(4294963054)] }, [I32(61294)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch", args: [I32(13), I64(5)] }, [I64(8)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(-1.0)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "e", args: [I32(42)] }, [I32(43)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good3", args: [I32(0)] }, [I64(98)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 52, 50, 57, 52, 57, 54, 55, 50, 57, 54, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good4", args: [I32(0)] }, [I64(99)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 50, 2, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "as-load-address", args: [] }, [F32(1.7)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(inf)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "dispatch", args: [I32(20), I64(2)] }, [I64(2)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-loadN-address", args: [] }, [I64(30)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(4), I32(0)] }, [])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 45, 50, 49, 52, 55, 52, 56, 51, 54, 52, 57, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "i32_store16", args: [I32(42)] }, [I32(42)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good5", args: [I32(0)] }, [I64(122)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: Some("Func"), func: "e", args: [I32(42)] }, [I32(43)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(-inf)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: Some("module1"), func: "call-7", args: [] }, [I32(67)])
run assertion TrapAction(Invoke { mod_ref: None, func: "dispatch", args: [I32(0), I64(2)] }, "indirect call type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 51, 2, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "i32_store16", args: [I32(51966)] }, [I32(51966)])
run assertion Return(Invoke { mod_ref: None, func: "16u_good1", args: [I32(0)] }, [I64(25185)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-address", args: [] }, [I32(30)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: Some("module1"), func: "call-8", args: [] }, [I32(69)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(0), I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-store-value", args: [] }, [I32(31)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 52, 3, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(4), I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "i32_store", args: [I32(4294967295)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "16u_good2", args: [I32(0)] }, [I64(25185)])
run assertion Return(Invoke { mod_ref: Some("Func"), func: "e", args: [I32(42)] }, [I32(43)])
run assertion TrapAction(Invoke { mod_ref: None, func: "dispatch", args: [I32(15), I64(2)] }, "indirect call type mismatch")
run assertion Return(Invoke { mod_ref: Some("module1"), func: "call-9", args: [] }, [I32(70)])
run assertion Return(Invoke { mod_ref: None, func: "16u_good3", args: [I32(0)] }, [I64(25442)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 53, 3, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(0), I32(0)] }, [])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 45, 48, 120, 56, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 7, 133, 128, 128, 128, 0, 1, 1, 97, 0, 1, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "unknown function")
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(3), I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-storeN-address", args: [] }, [I32(32)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 41, 4, 0, 26, 11]), "alignment must not be larger than natural")
test run_elem ... okrun assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.5)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion TrapAction(Invoke { mod_ref: None, func: "dispatch", args: [I32(29), I64(2)] }, "undefined element")
run assertion Return(Invoke { mod_ref: None, func: "16u_good4", args: [I32(0)] }, [I64(25699)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 7, 137, 128, 128, 128, 0, 2, 1, 97, 0, 0, 1, 97, 0, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "duplicate export name")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion TrapAction(Invoke { mod_ref: None, func: "dispatch", args: [I32(4294967295), I64(2)] }, "undefined element")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 42, 3, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.5)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "as-storeN-value", args: [] }, [I32(33)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(0), I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "16u_good5", args: [I32(0)] }, [I64(122)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 56, 52, 52, 54, 55, 52, 52, 48, 55, 51, 55, 48, 57, 53, 53, 49, 54, 49, 54, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "16s_good1", args: [I32(0)] }, [I64(25185)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 0, 7, 137, 128, 128, 128, 0, 2, 1, 97, 0, 0, 1, 97, 0, 1, 10, 143, 128, 128, 128, 0, 2, 130, 128, 128, 128, 0, 0, 11, 130, 128, 128, 128, 0, 0, 11]), "duplicate export name")

run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f32_u", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(3), I32(1)] }, [])
run assertion TrapAction(Invoke { mod_ref: None, func: "dispatch", args: [I32(1213432423), I64(2)] }, "undefined element")
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 43, 4, 0, 26, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-i64", args: [I32(5)] }, [I64(9)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 45, 57, 50, 50, 51, 51, 55, 50, 48, 51, 54, 56, 53, 52, 55, 55, 53, 56, 48, 57, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(1.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-i64", args: [I32(12)] }, [I64(362880)])
run assertion Return(Invoke { mod_ref: None, func: "16s_good2", args: [I32(0)] }, [I64(25185)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(0)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "16s_good3", args: [I32(0)] }, [I64(25442)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-i64", args: [I32(13)] }, [I64(55)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 65, 0, 58, 1, 0, 11]), "alignment must not be larger than natural")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 0, 65, 0, 11, 7, 137, 128, 128, 128, 0, 2, 1, 97, 0, 0, 1, 97, 3, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "duplicate export name")
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [] }, [F32(3.4)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(1)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-left", args: [] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-second", args: [I32(0)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-right", args: [] }, [I64(45)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 7, 137, 128, 128, 128, 0, 2, 1, 97, 0, 0, 1, 97, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "duplicate export name")
run assertion Return(Invoke { mod_ref: None, func: "16s_good4", args: [I32(0)] }, [I64(25699)])
run assertion Return(Invoke { mod_ref: None, func: "as-test-operand", args: [] }, [I32(44)])
run assertion Return(Invoke { mod_ref: None, func: "i32_store", args: [I32(4294963054)] }, [I32(4294963054)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(-0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 65, 0, 59, 2, 0, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "as-call-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32_store", args: [I32(42424242)] }, [I32(42424242)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "16s_good5", args: [I32(0)] }, [I64(122)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-left", args: [] }, [I32(43)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-i64", args: [I32(20)] }, [I64(9)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-second", args: [I32(1)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-right", args: [] }, [I32(42)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 65, 0, 54, 3, 0, 11]), "alignment must not be larger than natural")
run assertion TrapAction(Invoke { mod_ref: None, func: "dispatch-structural-i64", args: [I32(11)] }, "indirect call type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "32u_good1", args: [I32(0)] }, [I64(1684234849)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(1.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion TrapAction(Invoke { mod_ref: None, func: "dispatch-structural-i64", args: [I32(22)] }, "indirect call type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-cond", args: [] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "i32_store", args: [I32(3735931646)] }, [I32(3735931646)])
run assertion Return(Invoke { mod_ref: None, func: "as-convert-operand", args: [] }, [I32(41)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "32u_good2", args: [I32(0)] }, [I64(1684234849)])
run assertion Return(Invoke { mod_ref: None, func: "as-drop-operand", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 66, 0, 60, 1, 0, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 7, 137, 128, 128, 128, 0, 2, 1, 97, 0, 0, 1, 97, 2, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "duplicate export name")
run assertion Return(Invoke { mod_ref: None, func: "as-call-first", args: [] }, [I32(12)])
run assertion Return(Invoke { mod_ref: None, func: "i64_store16", args: [I64(18446744073709551615)] }, [I64(65535)])
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-size", args: [] }, [I32(40)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-i32", args: [I32(4)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "32u_good3", args: [I32(0)] }, [I64(1701077858)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 66, 0, 61, 2, 0, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "32u_good4", args: [I32(0)] }, [I64(1717920867)])
run assertion Return(Invoke { mod_ref: None, func: "i64_store16", args: [I64(18446744073709547374)] }, [I64(61294)])
run assertion Return(Invoke { mod_ref: None, func: "nested-block-value", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "32u_good5", args: [I32(0)] }, [I64(122)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-i32", args: [I32(23)] }, [I32(362880)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-mid", args: [] }, [I32(13)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "32s_good1", args: [I32(0)] }, [I64(1684234849)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 66, 0, 62, 3, 0, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754945)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br-value", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "32s_good2", args: [I32(0)] }, [I64(1684234849)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-last", args: [] }, [I32(14)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-i32", args: [I32(26)] }, [I32(55)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754942)])
run assertion Return(Invoke { mod_ref: None, func: "32s_good3", args: [I32(0)] }, [I64(1701077858)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-func", args: [] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "32s_good4", args: [I32(0)] }, [I64(1717920867)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754942)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(0.0)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 66, 0, 55, 4, 0, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64_store16", args: [I64(42)] }, [I64(42)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value-cond", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(1.1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value", args: [] }, [I32(9)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 112, 49, 50, 56, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754945)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 45, 48, 120, 49, 112, 49, 50, 56, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [I32(0)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "i64_store16", args: [I64(51966)] }, [I64(51966)])
run assertion Return(Invoke { mod_ref: None, func: "32s_good5", args: [I32(0)] }, [I64(122)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value-index", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [I32(1)] }, [I32(17)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_store32", args: [I64(18446744073709551615)] }, [I64(4294967295)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 102, 102, 102, 102, 102, 102, 112, 49, 50, 55, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 45, 48, 120, 49, 46, 102, 102, 102, 102, 102, 102, 112, 49, 50, 55, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(1.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-load-operand", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "64_good1", args: [I32(0)] }, [I64(7523094288207667809)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [I32(0)] }, [I32(4294967295)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 127, 12, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64_store32", args: [I64(18446744073709547374)] }, [I64(4294963054)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-i32", args: [I32(19)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.5)] }, [F32(0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 56, 3, 0, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(-1.0)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 127, 1, 12, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-operand", args: [] }, [I32(12)])
run assertion TrapAction(Invoke { mod_ref: None, func: "dispatch-structural-i32", args: [I32(9)] }, "indirect call type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "64_good2", args: [I32(0)] }, [I64(7523094288207667809)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [F32(-0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 57, 4, 0, 11]), "alignment must not be larger than natural")
run assertion Return(Invoke { mod_ref: None, func: "i64_store32", args: [I64(42424242)] }, [I64(42424242)])
run assertion Return(Invoke { mod_ref: None, func: "64_good3", args: [I32(0)] }, [I64(7595434461045744482)])
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [I32(0)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.5)] }, [F32(0.5)])
run assertion TrapAction(Invoke { mod_ref: None, func: "dispatch-structural-i32", args: [I32(21)] }, "indirect call type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 127, 65, 0, 2, 64, 12, 1, 11, 11, 11]), "type mismatch")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 101, 51, 57, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(-1.1)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-f32", args: [I32(6)] }, [F32(9.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-test-operand", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "64_good4", args: [I32(0)] }, [I64(7667774633883821155)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(-1.5)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-operand", args: [] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 45, 49, 101, 51, 57, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "64_good5", args: [I32(0)] }, [I64(122)])
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64_store32", args: [I64(3735931646)] }, [I64(3735931646)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 127, 66, 1, 12, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-f32", args: [I32(24)] }, [F32(362880.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Get { mod_ref: None, global: "e" }, [I32(42)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "break-bare", args: [] }, [I32(19)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "as-load-address", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64_store", args: [I64(18446744073709551615)] }, [I64(18446744073709551615)])
run assertion Return(Get { mod_ref: Some("Global"), global: "e" }, [I32(42)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 2, 127, 12, 0, 12, 0, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(-1.9)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "i64_store", args: [I64(18446744073667127374)] }, [I64(18446744073667127374)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 51, 52, 48, 50, 56, 50, 51, 53, 54, 55, 55, 57, 55, 51, 51, 54, 54, 49, 54, 51, 55, 53, 51, 57, 51, 57, 53, 52, 53, 56, 49, 52, 50, 53, 54, 56, 52, 52, 56, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "8u_good1", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "break-value", args: [] }, [I32(18)])
run assertion Return(Invoke { mod_ref: None, func: "as-loadN-address", args: [] }, [I32(30)])
run assertion Return(Invoke { mod_ref: None, func: "i64_store", args: [I64(2880249322)] }, [I64(2880249322)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-f32", args: [I32(27)] }, [F32(55.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(-2.0)] }, [I32(4294967294)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(1.0)] }, [F32(1.0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 45, 51, 52, 48, 50, 56, 50, 51, 53, 54, 55, 55, 57, 55, 51, 51, 54, 54, 49, 54, 51, 55, 53, 51, 57, 51, 57, 53, 52, 53, 56, 49, 52, 50, 53, 54, 56, 52, 52, 56, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 65, 0, 2, 127, 12, 0, 65, 1, 13, 0, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "8u_good2", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "break-repeated", args: [] }, [I32(18)])
run assertion Return(Get { mod_ref: Some("Global"), global: "e" }, [I32(42)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-address", args: [] }, [I32(30)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good3", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "break-inner", args: [] }, [I32(15)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-value", args: [] }, [I32(31)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "i64_store", args: [I64(12370766947463011818)] }, [I64(12370766947463011818)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(2147483647.0)] }, [I32(2147483647)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 134, 128, 128, 128, 0, 1, 127, 0, 65, 0, 11, 7, 133, 128, 128, 128, 0, 1, 1, 97, 3, 1]), "unknown global")
run assertion Return(Invoke { mod_ref: None, func: "f32_store", args: [F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good4", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good5", args: [I32(65503)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 134, 128, 128, 128, 0, 1, 127, 0, 65, 0, 11, 7, 137, 128, 128, 128, 0, 2, 1, 97, 3, 0, 1, 97, 3, 0]), "duplicate export name")
run assertion Return(Invoke { mod_ref: None, func: "f32_store", args: [F32(0.01234)] }, [F32(0.01234)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 2, 127, 12, 0, 14, 0, 0, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-storeN-address", args: [] }, [I32(32)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(-2147483648.0)] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "effects", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-f32", args: [I32(21)] }, [F32(9.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(2147483648.0)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 139, 128, 128, 128, 0, 2, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 7, 137, 128, 128, 128, 0, 2, 1, 97, 3, 0, 1, 97, 3, 1]), "duplicate export name")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 127, 12, 0, 15, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32_store", args: [F32(4242.4243)] }, [F32(4242.4243)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-inf)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-storeN-value", args: [] }, [I32(33)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 2, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "dispatch-structural-f32", args: [I32(8)] }, "indirect call type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(-2147483649.0)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "8s_good1", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(inf)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good2", args: [I32(65503)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 2, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32_store", args: [F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "dispatch-structural-f32", args: [I32(19)] }, "indirect call type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(inf)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 127, 12, 0, 65, 1, 65, 2, 27, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-left", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good3", args: [I32(65503)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 2, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-right", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-f64", args: [I32(7)] }, [F64(9.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(-inf)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(-inf)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 0, 65, 0, 11, 7, 137, 128, 128, 128, 0, 2, 1, 97, 3, 0, 1, 97, 0, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "duplicate export name")
run assertion Return(Invoke { mod_ref: None, func: "f64_store", args: [F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good4", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-test-operand", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(inf)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-f64", args: [I32(25)] }, [F64(362880.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-left", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 0, 0, 96, 1, 127, 1, 127, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 154, 128, 128, 128, 0, 2, 139, 128, 128, 128, 0, 0, 2, 127, 12, 0, 16, 1, 11, 69, 26, 11, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "8s_good5", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64_store", args: [F64(1234.56789)] }, [F64(1234.56789)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 2, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 112, 49, 48, 50, 52, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "f64_store", args: [F64(424242.424242)] }, [F64(424242.424242)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-right", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-f64", args: [I32(28)] }, [F64(55.0)])
run assertion Return(Invoke { mod_ref: None, func: "16u_good1", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 6, 134, 128, 128, 128, 0, 1, 127, 0, 65, 0, 11, 7, 137, 128, 128, 128, 0, 2, 1, 97, 3, 0, 1, 97, 1, 0]), "duplicate export name")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 6, 134, 128, 128, 128, 0, 1, 127, 0, 65, 0, 11, 7, 137, 128, 128, 128, 0, 2, 1, 97, 3, 0, 1, 97, 2, 0]), "duplicate export name")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 45, 48, 120, 49, 112, 49, 48, 50, 52, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 1, 127, 1, 127, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 157, 128, 128, 128, 0, 2, 132, 128, 128, 128, 0, 0, 32, 0, 11, 142, 128, 128, 128, 0, 0, 2, 127, 12, 0, 65, 0, 17, 0, 0, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-size", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "16u_good2", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 56, 112, 49, 48, 50, 51, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f32_align_switch", args: [I32(0)] }, [F32(10.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.0)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 45, 48, 120, 49, 46, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 56, 112, 49, 48, 50, 51, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-block-value", args: [I32(0)] }, [I32(21)])
run assertion Return(Invoke { mod_ref: None, func: "16u_good3", args: [I32(65503)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 1, 1, 127, 2, 127, 12, 0, 33, 0, 32, 0, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32_align_switch", args: [I32(1)] }, [F32(10.0)])
run assertion Return(Invoke { mod_ref: None, func: "dispatch-structural-f64", args: [I32(22)] }, [F64(9.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64_store", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "f32_align_switch", args: [I32(2)] }, [F32(10.0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-block-value", args: [I32(1)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "16u_good4", args: [I32(65503)] }, [I64(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "dispatch-structural-f64", args: [I32(10)] }, "indirect call type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-inf)] }, [F32(-inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_s", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 1, 1, 127, 2, 127, 12, 0, 34, 0, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32_align_switch", args: [I32(3)] }, [F32(10.0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br-value", args: [I32(0)] }, [I32(5)])
test run_endianness ... ok
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 2, 64, 65, 1, 11, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "dispatch-structural-f64", args: [I32(18)] }, "indirect call type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(0.0)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 101, 51, 48, 57, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br-value", args: [I32(1)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "f64_align_switch", args: [I32(0)] }, [F64(10.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(-inf)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 2, 64, 66, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "16u_good5", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value", args: [I32(0)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "f64_align_switch", args: [I32(1)] }, [F64(10.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(-0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 127, 12, 0, 36, 0, 35, 0, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value", args: [I32(1)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "fac-i64", args: [I64(0)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "16s_good1", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "f64_align_switch", args: [I32(2)] }, [F64(10.0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 45, 49, 101, 51, 48, 57, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "fac-i64", args: [I64(1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "16s_good2", args: [I32(65503)] }, [I64(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 67, 0, 0, 128, 63, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 127, 12, 0, 64, 0, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64_align_switch", args: [I32(3)] }, [F64(10.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "fac-i64", args: [I64(5)] }, [I64(120)])
run assertion Return(Invoke { mod_ref: None, func: "16s_good3", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 64, 68, 0, 0, 0, 0, 0, 0, 240, 63, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64_align_switch", args: [I32(4)] }, [F64(10.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 127, 12, 0, 40, 2, 0, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "fac-i64", args: [I64(25)] }, [I64(7034535277573963776)])
run assertion Return(Invoke { mod_ref: None, func: "16s_good4", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 2, 127, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 50, 54, 57, 54, 53, 51, 57, 55, 48, 50, 50, 57, 51, 52, 55, 51, 53, 54, 50, 50, 49, 55, 57, 49, 49, 51, 53, 53, 57, 55, 53, 53, 54, 53, 51, 53, 49, 57, 55, 49, 48, 53, 56, 53, 49, 50, 56, 56, 55, 54, 55, 52, 57, 52, 56, 57, 56, 51, 55, 54, 50, 49, 53, 50, 48, 52, 55, 51, 53, 56, 57, 49, 49, 55, 48, 48, 52, 50, 56, 48, 56, 49, 52, 48, 56, 56, 52, 51, 51, 55, 57, 52, 57, 49, 53, 48, 51, 49, 55, 50, 53, 55, 51, 49, 48, 54, 56, 56, 52, 51, 48, 50, 55, 49, 53, 55, 51, 54, 57, 54, 51, 53, 49, 52, 56, 49, 57, 57, 48, 51, 51, 52, 49, 57, 54, 50, 55, 52, 49, 53, 50, 55, 48, 49, 51, 50, 48, 48, 53, 53, 51, 48, 54, 50, 55, 53, 52, 55, 57, 48, 55, 52, 56, 54, 53, 56, 54, 52, 56, 50, 54, 57, 50, 51, 49, 49, 52, 51, 54, 56, 50, 51, 53, 49, 51, 53, 53, 56, 51, 57, 57, 51, 52, 49, 54, 49, 49, 51, 56, 48, 50, 55, 54, 50, 54, 56, 50, 55, 48, 48, 57, 49, 51, 52, 53, 54, 56, 55, 52, 56, 53, 53, 51, 53, 52, 56, 51, 52, 52, 50, 50, 50, 52, 56, 55, 49, 50, 56, 51, 56, 57, 57, 56, 49, 56, 53, 48, 50, 50, 52, 49, 50, 49, 57, 54, 55, 51, 57, 51, 48, 54, 50, 49, 55, 48, 56, 52, 55, 53, 51, 49, 48, 55, 50, 54, 53, 55, 55, 49, 51, 55, 56, 57, 52, 57, 56, 50, 49, 56, 55, 53, 54, 48, 54, 48, 51, 57, 50, 55, 54, 49, 56, 55, 50, 56, 55, 53, 53, 50, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(1.1)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 2, 126, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 127, 12, 0, 65, 0, 54, 2, 0, 11, 69, 26, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "i32_align_switch", args: [I32(0), I32(0)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "16s_good5", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "fac-i32", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "i32_align_switch", args: [I32(0), I32(1)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(0.5)] }, [F64(0.5)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value-cond", args: [I32(0)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "32u_good1", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value-cond", args: [I32(1)] }, [I32(9)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 45, 50, 54, 57, 54, 53, 51, 57, 55, 48, 50, 50, 57, 51, 52, 55, 51, 53, 54, 50, 50, 49, 55, 57, 49, 49, 51, 53, 53, 57, 55, 53, 53, 54, 53, 51, 53, 49, 57, 55, 49, 48, 53, 56, 53, 49, 50, 56, 56, 55, 54, 55, 52, 57, 52, 56, 57, 56, 51, 55, 54, 50, 49, 53, 50, 48, 52, 55, 51, 53, 56, 57, 49, 49, 55, 48, 48, 52, 50, 56, 48, 56, 49, 52, 48, 56, 56, 52, 51, 51, 55, 57, 52, 57, 49, 53, 48, 51, 49, 55, 50, 53, 55, 51, 49, 48, 54, 56, 56, 52, 51, 48, 50, 55, 49, 53, 55, 51, 54, 57, 54, 51, 53, 49, 52, 56, 49, 57, 57, 48, 51, 51, 52, 49, 57, 54, 50, 55, 52, 49, 53, 50, 55, 48, 49, 51, 50, 48, 48, 53, 53, 51, 48, 54, 50, 55, 53, 52, 55, 57, 48, 55, 52, 56, 54, 53, 56, 54, 52, 56, 50, 54, 57, 50, 51, 49, 49, 52, 51, 54, 56, 50, 51, 53, 49, 51, 53, 53, 56, 51, 57, 57, 51, 52, 49, 54, 49, 49, 51, 56, 48, 50, 55, 54, 50, 54, 56, 50, 55, 48, 48, 57, 49, 51, 52, 53, 54, 56, 55, 52, 56, 53, 53, 51, 53, 52, 56, 51, 52, 52, 50, 50, 50, 52, 56, 55, 49, 50, 56, 51, 56, 57, 57, 56, 49, 56, 53, 48, 50, 50, 52, 49, 50, 49, 57, 54, 55, 51, 57, 51, 48, 54, 50, 49, 55, 48, 56, 52, 55, 53, 51, 49, 48, 55, 50, 54, 53, 55, 55, 49, 51, 55, 56, 57, 52, 57, 56, 50, 49, 56, 55, 53, 54, 48, 54, 48, 51, 57, 50, 55, 54, 49, 56, 55, 50, 56, 55, 53, 53, 50, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "fac-i32", args: [I32(1)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 12, 1, 11]), "unknown label")
run assertion Return(Invoke { mod_ref: None, func: "i32_align_switch", args: [I32(1), I32(0)] }, [I32(10)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 2, 125, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(1.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "32u_good2", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value", args: [I32(0)] }, [I32(5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 2, 124, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "i32_align_switch", args: [I32(1), I32(1)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(1.9)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 2, 64, 12, 5, 11, 11, 11]), "unknown label")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 7, 133, 128, 128, 128, 0, 1, 1, 97, 1, 1]), "unknown table")
run assertion Return(Invoke { mod_ref: None, func: "i32_align_switch", args: [I32(2), I32(0)] }, [I32(10)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 2, 64, 2, 127, 11, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "fac-i32", args: [I32(5)] }, [I32(120)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value", args: [I32(1)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(2.0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "32u_good3", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_align_switch", args: [I32(2), I32(1)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(2147483648.0)] }, [I32(2147483648)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 7, 137, 128, 128, 128, 0, 2, 1, 97, 1, 0, 1, 97, 1, 0]), "duplicate export name")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 12, 129, 128, 128, 128, 1, 11]), "unknown label")
run assertion Return(Invoke { mod_ref: None, func: "i32_align_switch", args: [I32(2), I32(2)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "fac-i32", args: [I32(10)] }, [I32(3628800)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "i32_align_switch", args: [I32(3), I32(0)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "32u_good4", args: [I32(65503)] }, [I64(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value-index", args: [I32(0)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 7, 137, 128, 128, 128, 0, 2, 1, 97, 1, 0, 1, 97, 0, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "duplicate export name")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(1.0)] }, [F64(1.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "i32_align_switch", args: [I32(3), I32(1)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(4294967295.0)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "32u_good5", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "fac-f32", args: [F32(0.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value-index", args: [I32(1)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(-0.9)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(1.0)] }, [I32(0)])
test run_br ... run assertion Return(Invoke { mod_ref: None, func: "fac-f32", args: [F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 110, 97, 110, 58, 49, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "32s_good1", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 3, 64, 2, 127, 11, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 6, 134, 128, 128, 128, 0, 1, 127, 0, 65, 0, 11, 7, 137, 128, 128, 128, 0, 2, 1, 97, 1, 0, 1, 97, 3, 0]), "duplicate export name")
run assertion Return(Invoke { mod_ref: None, func: "32s_good2", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_align_switch", args: [I32(3), I32(2)] }, [I32(10)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 65, 0, 13, 0, 104, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "32s_good3", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "i32_align_switch", args: [I32(4), I32(0)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "32s_good4", args: [I32(65503)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 7, 137, 128, 128, 128, 0, 2, 1, 97, 1, 0, 1, 97, 2, 0]), "duplicate export name")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_align_switch", args: [I32(4), I32(1)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(-0.9999999999999999)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 65, 0, 13, 0, 122, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "fac-f32", args: [F32(5.0)] }, [F32(120.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 2, 127, 11, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "32s_good5", args: [I32(65503)] }, [I64(0)])
ok
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "i32_align_switch", args: [I32(4), I32(2)] }, [I32(10)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 65, 0, 13, 0, 140, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "64_good1", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_align_switch", args: [I32(4), I32(4)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "64_good2", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 65, 0, 13, 0, 154, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "fac-f32", args: [F32(10.0)] }, [F32(3628800.0)])
run assertion Return(Invoke { mod_ref: None, func: "64_good3", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(0), I32(0)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "64_good4", args: [I32(65503)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 2, 127, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(0), I32(1)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "64_good5", args: [I32(65503)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 65, 1, 13, 0, 104, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(100000000.0)] }, [I32(100000000)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 110, 97, 110, 58, 49, 41, 32, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(1), I32(0)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "fac-f64", args: [F64(0.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 66, 1, 13, 0, 122, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(1), I32(1)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good1", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.5)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 110, 97, 110, 58, 48, 120, 48, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(4294967296.0)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "fac-f64", args: [F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 2, 126, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good2", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(2), I32(0)] }, [I64(10)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 110, 97, 110, 58, 48, 120, 48, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(-1.0)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "fac-f64", args: [F64(5.0)] }, [F64(120.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.5)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good3", args: [I32(65504)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 64, 67, 0, 0, 128, 63, 13, 0, 140, 11, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(10000000000000000.0)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(2), I32(1)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "8u_good4", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "fac-f64", args: [F64(10.0)] }, [F64(3628800.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(-0.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 2, 125, 1, 11, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(1000000000000000000000000000000.0)] }, "integer overflow")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 110, 97, 110, 58, 48, 120, 56, 48, 95, 48, 48, 48, 48, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(2), I32(2)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(1.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 66, 1, 13, 0, 154, 11, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(9223372036854776000.0)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "8u_good5", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "fib-i64", args: [I64(0)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(inf)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "fib-i64", args: [I64(1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 127, 65, 0, 13, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 2, 124, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(3), I32(0)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good1", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(1.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 127, 65, 1, 13, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 2, 127, 66, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(3), I32(1)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "fib-i64", args: [I64(2)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(-inf)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000011754945)])
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(3), I32(2)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(-0.5)] }, [F64(-0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(-inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 64, 65, 0, 65, 0, 13, 0, 11, 11]), "type mismatch")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 110, 97, 110, 58, 48, 120, 49, 48, 95, 48, 48, 48, 48, 95, 48, 48, 48, 48, 95, 48, 48, 48, 48, 41, 32, 100, 114, 111, 112, 41]), "constant out of range")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 127, 67, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "fib-i64", args: [I64(5)] }, [I64(8)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good2", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000011754942)])
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(4), I32(0)] }, [I64(10)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 7, 133, 128, 128, 128, 0, 1, 1, 97, 2, 1]), "unknown memory")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 64, 65, 0, 65, 1, 13, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "8s_good3", args: [I32(65504)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 127, 68, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "fib-i64", args: [I64(20)] }, [I64(10946)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000011754942)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(-0.5)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(4), I32(1)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881784)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.trunc_f64_u", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(4), I32(2)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(0.0)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 2, 126, 65, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(-0.0)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 7, 137, 128, 128, 128, 0, 2, 1, 97, 2, 0, 1, 97, 2, 0]), "duplicate export name")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(0.000000000000000000000000000000000000000000001)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 126, 67, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881784)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000011754945)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good4", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(-0.000000000000000000000000000000000000000000001)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 7, 137, 128, 128, 128, 0, 2, 1, 97, 2, 0, 1, 97, 0, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "duplicate export name")
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(1.0)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000023509887)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 127, 1, 65, 0, 13, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(0.5)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 126, 68, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 6, 134, 128, 128, 128, 0, 1, 127, 0, 65, 0, 11, 7, 137, 128, 128, 128, 0, 2, 1, 97, 2, 0, 1, 97, 3, 0]), "duplicate export name")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881785)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(1.1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "8s_good5", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(4), I32(4)] }, [I64(10)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 2, 125, 65, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "16u_good1", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(1.5)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(-1.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 127, 1, 65, 1, 13, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(5), I32(0)] }, [I64(10)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 2, 125, 66, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881785)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 7, 137, 128, 128, 128, 0, 2, 1, 97, 2, 0, 1, 97, 1, 0]), "duplicate export name")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(-1.0)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(1.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 125, 68, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(5), I32(1)] }, [I64(10)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 127, 66, 1, 65, 0, 13, 0, 26, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(-1.1)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(5), I32(2)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-inf)] }, [F32(-0.000000000000000000000000000000000000011754944)])
test run_exports ... ok
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 2, 124, 65, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881785)])
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(5), I32(4)] }, [I64(10)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 127, 66, 1, 65, 0, 13, 0, 26, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(6), I32(0)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(inf)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000023509887)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(-1.5)] }, [I64(18446744073709551615)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 2, 64, 13, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(-1.9)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(inf)] }, [F64(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 2, 124, 66, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "16u_good2", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(-inf)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881785)])
run assertion Return(Invoke { mod_ref: None, func: "16u_good3", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(-2.0)] }, [I64(18446744073709551614)])
run assertion Return(Invoke { mod_ref: None, func: "16u_good4", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(-1.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(1.0)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 124, 67, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(inf)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.5)] }, [F32(0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 2, 64, 1, 13, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(4294967300.0)] }, [I64(4294967296)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(-6.283185307179586)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881785)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 126, 0, 0, 0, 27, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(6), I32(1)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(-4294967300.0)] }, [I64(18446744069414584320)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 64, 66, 0, 13, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(9223371500000000000.0)] }, [I64(9223371487098961920)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881785)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(6.283185307179586)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 125, 0, 0, 0, 27, 11, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 127, 65, 0, 1, 13, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(-6.283185307179586)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(6), I32(2)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(-9223372000000000000.0)] }, [I64(9223372036854775808)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 124, 0, 0, 0, 27, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(9223372000000000000.0)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 127, 65, 0, 2, 64, 65, 1, 13, 1, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(6.283185307179586)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(6), I32(4)] }, [I64(10)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(-0.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "16u_good5", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881785)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(0.0)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_align_switch", args: [I32(6), I32(8)] }, [I64(10)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(-9223373000000000000.0)] }, "integer overflow")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 127, 0, 0, 0, 27, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(inf)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(-0.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 127, 65, 0, 66, 0, 13, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "16s_good1", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(0.0)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(-0.5)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(-inf)] }, "integer overflow")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 125, 0, 0, 0, 27, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "16s_good2", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881785)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 64, 65, 0, 65, 0, 4, 127, 13, 0, 11, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(0.5)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "16s_good3", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 124, 0, 0, 0, 27, 11, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 152, 128, 128, 128, 0, 1, 146, 128, 128, 128, 0, 0, 2, 64, 65, 0, 65, 0, 4, 127, 65, 1, 13, 0, 11, 11, 69, 26, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "store", args: [I32(65532), I64(18446744073709551615)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "load", args: [I32(65532)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 127, 0, 0, 0, 27, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881785)])
run assertion Return(Invoke { mod_ref: None, func: "16s_good4", args: [I32(65504)] }, [I64(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(1.0)] }, [F32(1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 127, 13, 0, 15, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "16s_good5", args: [I32(65504)] }, [I64(0)])
test run_align ... run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(1.0)] }, [I32(0)])
ok
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 126, 0, 0, 0, 27, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "32u_good1", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_s", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 127, 65, 1, 13, 0, 15, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 124, 0, 0, 0, 27, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "32u_good2", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881785)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 127, 0, 0, 0, 27, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(0.0)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 65, 1, 13, 1, 11]), "unknown label")
run assertion Return(Invoke { mod_ref: None, func: "32u_good3", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "32u_good4", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "32u_good5", args: [I32(65504)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 126, 0, 0, 0, 27, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 64, 2, 64, 65, 1, 13, 5, 11, 11, 11]), "unknown label")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(-0.0)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(-1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 125, 0, 0, 0, 27, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 1, 13, 129, 128, 128, 128, 1, 11]), "unknown label")
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(0.000000000000000000000000000000000000000000001)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 2, 127, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "32s_good1", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(-0.000000000000000000000000000000000000000000001)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 2, 126, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "32s_good2", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_contraction", args: [F64(-0.00000000000000000000000000000015967133604096234), F64(87633521608271230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(42896576204898460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-13992561434270632000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(1.0)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881786)])
test run_br_if ... run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(1.1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 2, 125, 12, 0, 11, 11]), "type mismatch")
ok
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "32s_good3", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_contraction", args: [F64(8341016642481988.0), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003223424965918293), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023310835741659086)] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000026886641288847496)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(1.5)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 2, 124, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "32s_good4", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(-inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(4294967300.0)] }, [I64(4294967296)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_contraction", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030119045290520013), F64(52699336439236750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.00000000000000000000000000000006654454781339856)] }, [F64(-0.0000000000000000015872537009936566)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "32s_good5", args: [I32(65504)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 127, 12, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(18446743000000000000.0)] }, [I64(18446742974197923840)])
run assertion Return(Invoke { mod_ref: None, func: "add", args}, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(inf)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(-1.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_contraction", args: [F64(0.0000000000000000000031413936116780743), F64(-0.0000000000000000000000000000007262766035707377), F64(0.000000000000000000000000000000000000000000000000000000000000000004619684894228461)] }, [F64(-0.00000000000000000000000000000000000000000000000000228152068276836)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "64_good1", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(-0.9)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 126, 12, 0, 66, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(-inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "64_good2", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(-0.99999994)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "64_good3", args: [I32(65504)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(inf)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "64_good4", args: [I32(65504)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 125, 12, 0, 67, 0, 0, 128, 63, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(1.0)] }, [F32(0.5)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(18446744000000000000.0)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(NaN)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_contraction", args: [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016080464217402378), F64(-382103410226833000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.00000000000000010541980504151345)] }, [F64(0.00006144400215510552)])
run assertion TrapAction(Invoke { mod_ref: None, func: "64_good5", args: [I32(65504)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(-1.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "add", args}, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "8u_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.0), F64(NaN)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 124, 12, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 11, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(-1.0)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(1.0)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(NaN)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881786)])
run assertion TrapAction(Invoke { mod_ref: None, func: "8s_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(inf)] }, "integer overflow")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 127, 1, 12, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.0), F64(NaN)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(-6.2831855)] }, [F32(-0.5)])
run assertion TrapAction(Invoke { mod_ref: None, func: "16u_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(-inf)] }, "integer overflow")
run assertion TrapAction(Invoke { mod_ref: None, func: "16s_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(6.2831855)] }, [F32(0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 126, 1, 12, 0, 66, 1, 11, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion TrapAction(Invoke { mod_ref: None, func: "32u_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "add", args}, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fma", args: [F32(35184304000000000000000000000000000000.0), F32(0.00000021584361), F32(259340640000000000000000000000000.0)] }, [F32(266934960000000000000000000000000.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "32s_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(-6.2831855)] }, [F32(-0.5)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "64_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 125, 1, 12, 0, 67, 0, 0, 128, 63, 11, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(6.2831855)] }, [F32(0.5)])
run assertion TrapAction(Invoke { mod_ref: None, func: "8u_bad", args: [I32(1)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fma", args: [F32(0.0000000071753243), F32(-0.000000000000001225534), F32(0.0000000000000000000000000041316436)] }, [F32(-0.0000000000000000000000087894724)])
run assertion TrapAction(Invoke { mod_ref: None, func: "8s_bad", args: [I32(1)] }, "out of bounds memory access")
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f32_u", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(0.0)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 151, 128, 128, 128, 0, 1, 145, 128, 128, 128, 0, 0, 2, 124, 1, 12, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "16u_bad", args: [I32(1)] }, "out of bounds memory access")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fma", args: [F32(231063440000.0), F32(0.00020773262), F32(1797.6421)] }, [F32(48001210.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(-0.0)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(340282350000000000000000000000000000000.0)] }, [F32(0.5)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 127, 66, 1, 12, 0, 65, 1, 11, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "16s_bad", args: [I32(1)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "add", args}, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(-0.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(-inf)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "32u_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fma", args: [F32(0.0045542703), F32(-7265493.5), F32(-2.3964283)] }, [F32(-33091.414)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(0.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(inf)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "32s_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 127, 67, 0, 0, 128, 63, 12, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fma", args: [F32(98881730000000000000000000000000000000.0), F32(-0.0000000000000000000008570631), F32(-21579143000.0)] }, [F32(-84747910000000000.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "64_bad", args: [I32(1)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(340282350000000000000000000000000000000.0)] }, [F32(0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 152, 128, 128, 128, 0, 1, 146, 128, 128, 128, 0, 0, 2, 127, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(-inf)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fma", args}, [F64(1989405000320312800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(inf)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 126, 65, 1, 12, 0, 66, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fma", args: [F64(5586822348009285500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0000000000000000000000000000000000000007397302005677334), F64(36567834172040920000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(4132741216029240700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(-inf)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "add", args}, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(inf)] }, [F32(0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 126, 67, 0, 0, 128, 63, 12, 0, 66, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fma", args}, [F64(-4433244872049653000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(NaN)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-0.5), F32(NaN)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 152, 128, 128, 128, 0, 1, 146, 128, 128, 128, 0, 0, 2, 126, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 66, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fma", args: [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000809034701735478), F64(-24874417850667450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(49484765138510810.0)] }, [F64(250727437405094720.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(NaN)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "32_good1", args: [I32(0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 125, 65, 1, 12, 0, 67, 0, 0, 128, 63, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(0.5), F32(NaN)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "32_good2", args: [I32(0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fma", args: [F64(6723256985364377.0), F64(285456566692879460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-5593839470050757000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(1919197856036028600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(-0.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "32_good3", args: [I32(0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args}, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 125, 66, 1, 12, 0, 67, 0, 0, 128, 63, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(0.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "32_good4", args: [I32(0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(-0.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "32_good5", args: [I32(0)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 155, 128, 128, 128, 0, 1, 149, 128, 128, 128, 0, 0, 2, 125, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 67, 0, 0, 128, 63, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "32_good1", args: [I32(65524)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(0.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args}, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "32_good2", args: [I32(65524)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 152, 128, 128, 128, 0, 1, 146, 128, 128, 128, 0, 0, 2, 126, 65, 1, 12, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "32_good3", args: [I32(65524)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_zero", args: [F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "32_good4", args: [I32(65524)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_zero", args: [F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "32_good5", args: [I32(65524)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 152, 128, 128, 128, 0, 1, 146, 128, 128, 128, 0, 0, 2, 124, 66, 1, 12, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "32_good1", args: [I32(65525)] }, [F32(0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f32.no_fold_add_zero", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "fac-rec", args: [I64(25)] }, [I64(7034535277573963776)])
run assertion Return(Invoke { mod_ref: None, func: "add", args}, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f64.no_fold_add_zero", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "32_good2", args: [I32(65525)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881786)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 155, 128, 128, 128, 0, 1, 149, 128, 128, 128, 0, 0, 2, 124, 67, 0, 0, 128, 63, 12, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "32_good3", args: [I32(65525)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(-0.0)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "32_good4", args: [I32(65525)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(0.0)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "fac-iter", args: [I64(25)] }, [I64(7034535277573963776)])
run assertion TrapAction(Invoke { mod_ref: None, func: "32_good5", args: [I32(65525)] }, "out of bounds memory access")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 127, 1, 12, 0, 65, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "32_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "fac-rec-named", args: [I64(25)] }, [I64(7034535277573963776)])
run assertion TrapAction(Invoke { mod_ref: None, func: "32_bad", args: [I32(1)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 126, 1, 12, 0, 66, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(-0.5)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_zero_sub", args: [F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "fac-iter-named", args: [I64(25)] }, [I64(7034535277573963776)])
run assertion Return(Invoke { mod_ref: None, func: "add", args}, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(0.5)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_zero_sub", args: [F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 2, 125, 1, 12, 0, 67, 0, 0, 128, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "fac-opt", args: [I64(25)] }, [I64(7034535277573963776)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881787)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(-0.5)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(-0.5)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f32.no_fold_zero_sub", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args}, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(0.5)] }, [I32(0)])
run assertion Exhaustion(Invoke { mod_ref: None, func: "fac-rec", args: [I64(1073741824)] }, "call stack exhausted")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 153, 128, 128, 128, 0, 1, 147, 128, 128, 128, 0, 0, 2, 124, 1, 12, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(0.5)] }, [F32(1.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f64.no_fold_zero_sub", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881787)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(-1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 127, 66, 1, 12, 0, 65, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "64_good1", args: [I32(0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "64_good2", args: [I32(0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 127, 67, 0, 0, 128, 63, 12, 0, 65, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "64_good3", args: [I32(0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(-0.5)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881784)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(-6.2831855)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "64_good4", args: [I32(0)] }, [F64(0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f32.no_fold_sub_zero", args: [F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 154, 128, 128, 128, 0, 1, 148, 128, 128, 128, 0, 0, 2, 127, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 65, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(-0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(6.2831855)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "64_good5", args: [I32(0)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f64.no_fold_sub_zero", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(0.5)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(-6.2831855)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "64_good1", args: [I32(65510)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(-1.0)] }, [F32(-1.5)])
run assertion Return(Invoke { mod_ref: None, func: "64_good2", args: [I32(65510)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(6.2831855)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881784)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 126, 65, 1, 12, 0, 66, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(1.0)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "64_good3", args: [I32(65510)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(-1.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "64_good4", args: [I32(65510)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(340282350000000000000000000000000000000.0)] }, [F32(1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 126, 67, 0, 0, 128, 63, 12, 0, 66, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(1.0)] }, [F32(1.5)])
run assertion Return(Invoke { mod_ref: None, func: "64_good5", args: [I32(65510)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "64_good1", args: [I32(65511)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(-6.2831855)] }, [F32(-6.7831855)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881785)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_zero", args: [F32(-0.0)] }, [F32(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 154, 128, 128, 128, 0, 1, 148, 128, 128, 128, 0, 0, 2, 126, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 66, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(340282350000000000000000000000000000000.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "64_good2", args: [I32(65511)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_zero", args: [F32(-1.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(6.2831855)] }, [F32(5.7831855)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(-inf)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "64_good3", args: [I32(65511)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 125, 65, 1, 12, 0, 67, 0, 0, 128, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_zero", args: [F32(-2.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(inf)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "64_good4", args: [I32(65511)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(-6.2831855)] }, [F32(-5.7831855)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f32.no_fold_mul_zero", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881785)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [F64(-1.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "64_good5", args: [I32(65511)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(-inf)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_zero", args: [F64(-0.0)] }, [F64(-0.0)])
test run_fac ... run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 125, 66, 1, 12, 0, 67, 0, 0, 128, 63, 12, 0, 11, 11]), "type mismatch")
ok
run assertion TrapAction(Invoke { mod_ref: None, func: "64_bad", args: [I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion TrapAction(Invoke { mod_ref: None, func: "64_bad", args: [I32(1)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [F64(1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 157, 128, 128, 128, 0, 1, 151, 128, 128, 128, 0, 0, 2, 125, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 67, 0, 0, 128, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(inf)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(6.2831855)] }, [F32(6.7831855)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_zero", args: [F64(-1.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881785)])
test run_address ... ok
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(NaN)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_zero", args: [F64(-2.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 154, 128, 128, 128, 0, 1, 148, 128, 128, 128, 0, 0, 2, 124, 65, 1, 12, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f64.no_fold_mul_zero", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-1.0), F32(NaN)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(NaN)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args}, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 154, 128, 128, 128, 0, 1, 148, 128, 128, 128, 0, 0, 2, 124, 66, 1, 12, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881785)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(1.0), F32(NaN)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(-0.0)] }, [F32(-6.2831855)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 157, 128, 128, 128, 0, 1, 151, 128, 128, 128, 0, 0, 2, 124, 67, 0, 0, 128, 63, 12, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.nan", args: [] }, [I32(2143289344)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(0.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "i32.load", args: [] }, [I32(2141192192)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f32.no_fold_mul_one", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.positive_nan", args: [] }, [I32(2143289344)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [] }, [F32(NaN)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f64.no_fold_mul_one", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881785)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(1.0)] }, [I64(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 127, 2, 127, 65, 1, 12, 1, 11, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(-0.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(1.1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(1.5)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.load", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(-1.0)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(0.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 126, 2, 126, 66, 1, 12, 1, 11, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(-1.1)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "i32.load", args: [] }, [I32(2141192192)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881785)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_zero_div", args: [F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(-1.5)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.negative_nan", args: [] }, [I32(4290772992)])
run assertion Return(Invoke { mod_ref: None, func: "i32.load", args: [] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_zero_div", args: [F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.plain_nan", args: [] }, [I32(2143289344)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 151, 128, 128, 128, 0, 1, 145, 128, 128, 128, 0, 0, 2, 125, 2, 125, 67, 0, 0, 128, 63, 12, 1, 11, 12, 0, 11, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_zero_div", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(-1.9)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [F32(6.2831855)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.informally_known_as_plain_snan", args: [] }, [I32(2141192192)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [] }, [F32(0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f32.no_fold_zero_div", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(-2.0)] }, [I64(18446744073709551614)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881785)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_zero_div", args: [F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.all_ones_nan", args: [] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-6.2831855)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 155, 128, 128, 128, 0, 1, 149, 128, 128, 128, 0, 0, 2, 124, 2, 124, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 1, 11, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i32.load", args: [] }, [I32(2141192192)])
run assertion Return(Invoke { mod_ref: None, func: "f32.misc_nan", args: [] }, [I32(2139169605)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(4294967296.0)] }, [I64(4294967296)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_zero_div", args: [F64(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.misc_positive_nan", args: [] }, [I32(2142257232)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [F32(6.2831855)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_zero_div", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(-4294967296.0)] }, [I64(18446744069414584320)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881785)])
run assertion Return(Invoke { mod_ref: None, func: "f32.misc_negative_nan", args: [] }, [I32(4289379550)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.infinity", args: [] }, [I32(2139095040)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 127, 2, 64, 12, 1, 11, 65, 1, 12, 0, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f64.no_fold_zero_div", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(9223372036854775000.0)] }, [I64(9223372036854774784)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.positive_infinity", args: [] }, [I32(2139095040)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args}, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881785)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(-9223372036854776000.0)] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f32.negative_infinity", args: [] }, [I32(4286578688)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 126, 2, 64, 12, 1, 11, 66, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "f32.zero", args: [] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [F32(6.2831855)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 151, 128, 128, 128, 0, 1, 145, 128, 128, 128, 0, 0, 2, 125, 2, 64, 12, 1, 11, 67, 0, 0, 128, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.positive_zero", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f32.no_fold_div_one", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881785)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(-0.5)] }, [F32(-6.2831855)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f64.no_fold_div_one", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(1.1234568), F32(0.00000000012345)] }, [F32(1.1234568)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(-0.0)] }, [F32(-1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 155, 128, 128, 128, 0, 1, 149, 128, 128, 128, 0, 0, 2, 124, 2, 64, 12, 1, 11, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.negative_zero", args: [] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(0.5)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(0.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.misc", args: [] }, [I32(1086918619)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(1.123456789), F64(0.00000000012345)] }, [F64(1.12345678912345)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(-0.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(-0.5)] }, [F32(-6.2831855)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 2, 127, 2, 127, 1, 12, 1, 11, 65, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.min_positive", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881786)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(9223372036854776000.0)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(1.0), F32(0.000000059604645)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.min_normal", args: [] }, [I32(8388608)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(0.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.max_subnormal", args: [] }, [I32(8388607)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(-9223372036854778000.0)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(1.0), F32(0.00000005960465)] }, [F32(1.0000001)])
run assertion Return(Invoke { mod_ref: None, func: "f32.max_finite", args: [] }, [I32(2139095039)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 2, 126, 2, 126, 1, 12, 1, 11, 66, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(0.5)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f32.no_fold_div_neg1", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(-1.0)] }, [F32(-6.2831855)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(inf)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f64.no_fold_div_neg1", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [] }, [I64(9219994337134247936)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 152, 128, 128, 128, 0, 1, 146, 128, 128, 128, 0, 0, 2, 125, 2, 125, 1, 12, 1, 11, 67, 0, 0, 128, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(1.0), F64(0.00000000000000011102230246251565)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.trailing_dot", args: [] }, [I32(1149239296)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(-inf)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(1.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(1.0), F64(0.00000000000000011102230246251568)] }, [F64(1.0000000000000002)])
run assertion Return(Invoke { mod_ref: None, func: "f32_dec.zero", args: [] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 156, 128, 128, 128, 0, 1, 150, 128, 128, 128, 0, 0, 2, 124, 2, 124, 1, 12, 1, 11, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [] }, [I64(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754942)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "f32_dec.positive_zero", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(-1.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32_dec.negative_zero", args: [] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881786)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 127, 2, 127, 66, 1, 12, 1, 11, 65, 1, 12, 0, 11, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_s", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "f32_dec.misc", args: [] }, [I32(1086918619)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(1.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [] }, [I64(9219994337134247936)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f32.no_fold_neg0_sub", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f32_dec.min_positive", args: [] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 153, 128, 128, 128, 0, 1, 147, 128, 128, 128, 0, 0, 2, 127, 2, 127, 67, 0, 0, 128, 63, 12, 1, 11, 65, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f64.no_fold_neg0_sub", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 157, 128, 128, 128, 0, 1, 151, 128, 128, 128, 0, 0, 2, 127, 2, 127, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 1, 11, 65, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [] }, [I64(9219994337134247936)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "f32_dec.min_normal", args: [] }, [I32(8388608)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32_dec.max_subnormal", args: [] }, [I32(8388607)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(-0.5)] }, [F32(-1.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 126, 2, 126, 65, 1, 12, 1, 11, 66, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(2147483600.0), F32(1024.25)] }, [F32(2147484700.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32_dec.max_finite", args: [] }, [I32(2139095039)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(6.2831855)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f32.no_fold_neg1_mul", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32_dec.trailing_dot", args: [] }, [I32(1343554297)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(-0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(6.2831855)] }, [F32(6.2831855)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f64.no_fold_neg1_mul", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(9223372036854776000.0), F64(1024.25)] }, [F64(9223372036854778000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(-6.2831855)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 153, 128, 128, 128, 0, 1, 147, 128, 128, 128, 0, 0, 2, 126, 2, 126, 67, 0, 0, 128, 63, 12, 1, 11, 66, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32_dec.root_beer_float", args: [] }, [I32(1065353217)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(0.5)] }, [F32(1.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(-1.0)] }, [F32(-2.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.nan", args: [] }, [I64(9221120237041090560)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(1.0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 157, 128, 128, 128, 0, 1, 151, 128, 128, 128, 0, 0, 2, 126, 2, 126, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 1, 11, 66, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.positive_nan", args: [] }, [I64(9221120237041090560)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(340282350000000000000000000000000000000.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(-1.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.negative_nan", args: [] }, [I64(18444492273895866368)])
run assertion Return(Invoke { mod_ref: None, func: "f64.plain_nan", args: [] }, [I64(9221120237041090560)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(1.0)] }, [F32(2.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 153, 128, 128, 128, 0, 1, 147, 128, 128, 128, 0, 0, 2, 125, 2, 125, 65, 1, 12, 1, 11, 67, 0, 0, 128, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f64.informally_known_as_plain_snan", args: [] }, [I64(9219994337134247936)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_eq_self", args: [F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "i32.load", args: [] }, [I32(2141192192)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(0.0)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(-6.2831855)] }, [F32(-7.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f64.all_ones_nan", args: [] }, [I64(18446744073709551615)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 153, 128, 128, 128, 0, 1, 147, 128, 128, 128, 0, 0, 2, 125, 2, 125, 66, 1, 12, 1, 11, 67, 0, 0, 128, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_eq_self", args: [F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(340282350000000000000000000000000000000.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(-0.0)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args}, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(-inf)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.load", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(6.2831855)] }, [F32(5.2831855)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 160, 128, 128, 128, 0, 1, 154, 128, 128, 128, 0, 0, 2, 125, 2, 125, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 1, 11, 67, 0, 0, 128, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003645561009778199), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000292)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036455610097781983)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(inf)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.load", args: [] }, [I32(2141192192)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(-6.2831855)] }, [F32(-5.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(9007199254740992.0), F64(1.00001)] }, [F64(9007199254740994.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 157, 128, 128, 128, 0, 1, 151, 128, 128, 128, 0, 0, 2, 124, 2, 124, 65, 1, 12, 1, 11, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(-inf)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "i32.load", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(6.2831855)] }, [F32(7.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ne_self", args: [F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(9007199254740994.0), F64(0.9999847412109375)] }, [F64(9007199254740994.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(inf)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 157, 128, 128, 128, 0, 1, 151, 128, 128, 128, 0, 0, 2, 124, 2, 124, 66, 1, 12, 1, 11, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.misc_nan", args: [] }, [I64(9218888453225749180)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(1.0)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(8388608.0), F32(0.5)] }, [F32(8388608.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ne_self", args: [F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.load", args: [] }, [I32(2141192192)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(NaN)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 160, 128, 128, 128, 0, 1, 154, 128, 128, 128, 0, 0, 2, 124, 2, 124, 67, 0, 0, 128, 63, 12, 1, 11, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(1.1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.misc_positive_nan", args: [] }, [I64(9219717281780008969)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(1.5)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.misc_negative_nan", args: [] }, [I64(18442992325002076997)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(8388609.0), F32(0.5)] }, [F32(8388610.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 2, 64, 12, 0, 11, 104, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(4294967295.0)] }, [I64(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.infinity", args: [] }, [I64(9218868437227405312)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(4503599627370496.0), F64(0.5)] }, [F64(4503599627370496.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(4294967296.0)] }, [I64(4294967296)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.positive_infinity", args: [] }, [I64(9218868437227405312)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 2, 64, 12, 0, 11, 122, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(18446744073709550000.0)] }, [I64(18446744073709549568)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-6.2831855), F32(NaN)] }, [F32(6.2831855)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_sub_self", args: [F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(4503599627370497.0), F64(0.5)] }, [F64(4503599627370498.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.negative_infinity", args: [] }, [I64(18442240474082181120)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881787)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(-inf)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 2, 64, 12, 0, 11, 142, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(-0.9)] }, [I64(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_sub_self", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(NaN)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.zero", args: [] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(-0.9999999999999999)] }, [I64(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_sub_self", args: [F64(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [] }, [I64(9219994337134247936)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(6.2831855), F32(NaN)] }, [F32(6.2831855)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 2, 64, 12, 0, 11, 156, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [] }, [F64(NaN)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.positive_zero", args: [] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881787)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(100000000.0)] }, [I64(100000000)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(-6207600000000000000000000000000.0), F32(0.000000000000000000000000000002309799)] }, [F32(-6207600000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_sub_self", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(10000000000000000.0)] }, [I64(10000000000000000)])
run assertion Return(Invoke { mod_ref: None, func: "f64.negative_zero", args: [] }, [I64(9223372036854775808)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 64, 1, 12, 0, 11, 104, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(9223372036854776000.0)] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "f64.misc", args: [] }, [I64(4618760256179416344)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(209865800000000000000.0), F32(-5270152500000000.0)] }, [F32(209860530000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.min_positive", args: [] }, [I64(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(0.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881784)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(18446744073709552000.0)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.min_normal", args: [] }, [I64(4503599627370496)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 64, 1, 12, 0, 11, 122, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.max_subnormal", args: [] }, [I64(4503599627370495)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(-0.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(-1.0)] }, "integer overflow")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(0.0000000000000000000000001963492), F32(0.000000000000000000000000000000000000046220067)] }, [F32(0.0000000000000000000000001963492)])
run assertion Return(Invoke { mod_ref: None, func: "f64.max_finite", args: [] }, [I64(9218868437227405311)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(inf)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.trailing_dot", args: [] }, [I64(5057542381537067008)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(0.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_div_self", args: [F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881784)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(-inf)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(640905000000.0), F32(-64449550000000000.0)] }, [F32(-64448910000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [] }, [I64(9219994337134247936)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_div_self", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64_dec.zero", args: [] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 64, 1, 12, 0, 11, 142, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [] }, [F64(NaN)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_div_self", args: [F32(0.0)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "f64_dec.positive_zero", args: [] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_div_self", args: [F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(0.0000601966), F32(120372790000000000000000000000000.0)] }, [F32(120372790000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 64, 1, 12, 0, 11, 156, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64_dec.negative_zero", args: [] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881785)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_div_self", args: [F64(inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-1.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 66, 9, 12, 0, 11, 122, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.trunc_f64_u", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64_dec.misc", args: [] }, [I64(4618760256179416344)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009218993827002741), F64(-1283078243878048500000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-1283078243878048500000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_div_self", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_s", args: [I32(1)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_div_self", args: [F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 64, 67, 0, 0, 16, 65, 12, 0, 11, 142, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64_dec.min_positive", args: [] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_s", args: [I32(4294967295)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881785)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(-96503407870148960000000.0), F64(0.00000000000000000000000000000000000000000000000000000004670208988478548)] }, [F64(-96503407870148960000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64_dec.min_normal", args: [] }, [I64(4503599627370496)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 151, 128, 128, 128, 0, 1, 145, 128, 128, 128, 0, 0, 2, 64, 68, 0, 0, 0, 0, 0, 0, 34, 64, 12, 0, 11, 156, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [] }, [I64(9219994337134247936)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_s", args: [I32(0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(-0.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f64_dec.max_subnormal", args: [] }, [I64(4503599627370495)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(0.0000000000000000000000000000000000000000000028559147675434106), F64(-0.00026124280570653086)] }, [F64(-0.00026124280570653086)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 65, 9, 12, 0, 11, 104, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_s", args: [I32(2147483647)] }, [F32(2147483600.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881785)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_div_self", args: [F64(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64_dec.max_finite", args: [] }, [I64(9218868437227405311)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(0.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(417909928165296700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(79335564741512700000.0)] }, [F64(417909928165296700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_s", args: [I32(2147483648)] }, [F32(-2147483600.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 64, 67, 0, 0, 16, 65, 12, 0, 11, 142, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64_dec.trailing_dot", args: [] }, [I64(6103021453049119613)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(-0.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(8265442868747023000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(43603327839006250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(43603327839006250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64_dec.root_beer_float", args: [] }, [I64(4607182419335945764)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(0.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32-dec-sep1", args: [] }, [F32(1000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881785)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 151, 128, 128, 128, 0, 1, 145, 128, 128, 128, 0, 0, 2, 64, 68, 0, 0, 0, 0, 0, 0, 34, 64, 12, 0, 11, 156, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32-dec-sep2", args: [] }, [F32(1000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(5238404000000000000000.0), F32(-1570182.5)] }, [F32(5238404000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32-dec-sep3", args: [] }, [F32(1003.1416)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32-dec-sep4", args: [] }, [F32(990000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_3", args: [F32(-1361679000000000.0)] }, [F32(-453892980000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(0.00000000000004258938), F32(-0.0000000000000000000000057092353)] }, [F32(0.00000000000004258938)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 65, 9, 12, 0, 11, 104, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.5)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_s", args: [I32(1234567890)] }, [F32(1234568000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32-dec-sep5", args: [] }, [F32(12200012000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_s", args: [I32(16777217)] }, [F32(16777216.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_3", args: [F32(-18736880000000000000000000000.0)] }, [F32(-6245626600000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 66, 9, 12, 0, 11, 122, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32-hex-sep1", args: [] }, [F32(168755360.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(-0.00000000000027251026), F32(83711560000000000000000000000000000000.0)] }, [F32(83711560000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_3", args: [F32(-0.00000000000000000000000012045131)] }, [F32(-0.000000000000000000000000040150435)])
run assertion Return(Invoke { mod_ref: None, func: "i32.load", args: [] }, [I32(2144337921)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(0.5)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_s", args: [I32(4278190079)] }, [F32(-16777216.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32-hex-sep2", args: [] }, [F32(109071.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f32-hex-sep3", args: [] }, [F32(41215.94)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 151, 128, 128, 128, 0, 1, 145, 128, 128, 128, 0, 0, 2, 64, 68, 0, 0, 0, 0, 0, 0, 34, 64, 12, 0, 11, 156, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_3", args: [F32(-0.00000000000000000000000000000000000005281346)] }, [F32(-0.000000000000000000000000000000000000017604486)])
run assertion Return(Invoke { mod_ref: None, func: "i32.load", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(-0.5)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32-hex-sep4", args: [] }, [F32(1966080.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_s", args: [I32(16777219)] }, [F32(16777220.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 65, 9, 12, 0, 11, 104, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_3", args: [F32(-0.000000000000000025495563)] }, [F32(-0.000000000000000008498521)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(0.5)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0000000000000008881786)])
run assertion Return(Invoke { mod_ref: None, func: "f32-hex-sep5", args: [] }, [F32(23605224000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(-0.0000000000000884536), F32(-0.000000000000000000000000000000015165626)] }, [F32(-0.0000000000000884536)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_s", args: [I32(4278190077)] }, [F32(-16777220.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.load", args: [] }, [I32(2144337921)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-6.2831855)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 66, 9, 12, 0, 11, 122, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_3", args: [F64(-29563579573969634000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-9854526524656545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64-dec-sep1", args: [] }, [F64(1000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_s", args: [I64(1)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(0.0010521035), F32(-0.000000000000000000000000000000007582135)] }, [F32(0.0010521035)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(-1.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_s", args: [I64(18446744073709551615)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125899900000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64-dec-sep2", args: [] }, [F64(1000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_3", args: [F64(-0.000000000000000000000000000000000000000000000000009291150921449772)] }, [F64(-0.000000000000000000000000000000000000000000000000003097050307149924)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(6.2831855)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 64, 67, 0, 0, 16, 65, 12, 0, 11, 142, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64-dec-sep3", args: [] }, [F64(1003.141592)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_s", args: [I64(0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(1.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(1511135228188924600000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002760218100603169)] }, [F64(1511135228188924600000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64-dec-sep4", args: [] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000099)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_s", args: [I64(9223372036854775807)] }, [F32(9223372000000000000.0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 98, 108, 111, 99, 107, 32, 101, 110, 100, 32, 36, 108, 41]), "mismatching label")
run assertion Return(Invoke { mod_ref: None, func: "i32.load", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64-dec-sep5", args: [] }, [F64(12200011354000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(62386719760360280000000000000000000000000000000.0), F64(-0.0000000000000000008592185488839212)] }, [F64(62386719760360280000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(-1.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(-0.5)] }, [F32(-6.7831855)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 98, 108, 111, 99, 107, 32, 36, 97, 32, 101, 110, 100, 32, 36, 108, 41]), "mismatching label")
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_s", args: [I64(9223372036854775808)] }, [F32(-9223372000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125899900000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64-hex-sep1", args: [] }, [F64(3078696982321561.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(1.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_s", args: [I64(314159265358979)] }, [F32(314159280000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.load", args: [] }, [I32(2144337921)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(0.5)] }, [F32(-5.7831855)])
run assertion Return(Invoke { mod_ref: None, func: "f64-hex-sep2", args: [] }, [F64(109071.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_s", args: [I64(16777217)] }, [F32(16777216.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64-hex-sep3", args: [] }, [F64(41215.94240794191)])
test run_block ... run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(-0.5)] }, [F32(5.7831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004195022848436354), F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000029225342022551453)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004195022848436354)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_s", args: [I64(18446744073692774399)] }, [F32(-16777216.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(0.5)] }, [F32(6.7831855)])
ok
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_s", args: [I64(16777219)] }, [F32(16777220.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(6.2831855)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(-1.0)] }, [F32(-7.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f64-hex-sep4", args: [] }, [F64(1966080.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(-215220546714824520000000000000000000000000000.0), F64(-1112220412047137200000000000000000000000000.0)] }, [F64(-216332767126871650000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_s", args: [I64(18446744073692774397)] }, [F32(-16777220.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64-hex-sep5", args: [] }, [F64(23605225168752.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(1.0)] }, [F32(-5.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(-13.6911535055856), F64(2066117898924419800000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(2066117898924419800000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_s", args: [I64(9223371212221054977)] }, [F32(9223371500000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(-1.0)] }, [F32(5.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(6.2831855)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_s", args: [I64(9223372311732682753)] }, [F32(-9223371500000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(-0.000000000000000000000000000000000006456021), F32(0.00000000000020219949)] }, [F32(0.00000000000020219949)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(1.0)] }, [F32(7.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_s", args: [I64(9007199791611905)] }, [F32(9007200000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "4294967249", args: [] }, [F64(4294967249.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(-6.2831855)] }, [F32(-12.566371)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_s", args: [I64(18437736873917939711)] }, [F32(-9007200000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [] }, [I64(9222246136947933185)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(-0.000026823169), F32(0.000000011196016)] }, [F32(-0.000026811973)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(6.2831855)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(-128526170000.0), F32(0.0000000000000000000000000000000027356305)] }, [F32(-128526170000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i32_s", args: [I32(1)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(-inf)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 43, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i32_s", args: [I32(4294967295)] }, [F64(-1.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 45, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "even", args: [I32(13)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(-6.2831855)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(0.000000000000000000000000000000000004158973), F32(-1573528700.0)] }, [F32(-1573528700.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 57, 57, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i32_s", args: [I32(0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_3", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013808061543557006)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004602687181185669)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "even", args: [I32(20)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 95, 95, 48, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(6.2831855)] }, [F32(12.566371)])
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [] }, [I64(9222246136947933185)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 95, 49, 46, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i32_s", args: [I32(2147483647)] }, [F64(2147483647.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 46, 48, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_3", args: [F64(-1378076163468349000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-459358721156116300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i32_s", args: [I32(2147483648)] }, [F64(-2147483648.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(-0.0000000000000000000000000000000000009338769), F32(78647514000000000000000000000.0)] }, [F32(78647514000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "odd", args: [I32(13)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 95, 46, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_3", args: [F64(86324008088313660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(28774669362771220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i32_s", args: [I32(987654321)] }, [F64(987654321.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 46, 95, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(-inf)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "odd", args: [I32(20)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args}, [F64(-235447594845461340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args}, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202)])
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_s", args: [I64(1)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(inf)] }, [F32(340282350000000000000000000000000000000.0)])
test run_forward ... run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(-314175619593595700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-30114098514611660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-314175649707694230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
ok
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_s", args: [I64(18446744073709551615)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(-inf)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 95, 49, 101, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_s", args: [I64(0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 101, 49, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [] }, [I64(9222246136947933185)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 95, 101, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(inf)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_factor", args: [F32(-1435111700000.0), F32(-853617640000000.0), F32(1113849300000000000.0)] }, [F32(-952399900000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_s", args: [I64(9223372036854775807)] }, [F64(9223372036854776000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_s", args: [I64(9223372036854775808)] }, [F64(-9223372036854776000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_factor", args: [F32(-0.026666632), F32(0.048412822), F32(-0.002813697)] }, [F32(-0.0000611872)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_s", args: [I64(4669201609102990)] }, [F64(4669201609102990.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_s", args: [I64(9007199254740993)] }, [F64(9007199254740992.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_factor", args: [F32(-0.00000000000046619777), F32(0.00000000000000000010478377), F32(14469202000000000000000000000000000000.0)] }, [F32(-6745508000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403)])
test run_float_memory ... run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013722858367681836), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000011571842749688977)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000011571842749688977)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_s", args: [I64(18437736874454810623)] }, [F64(-9007199254740992.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [F32(-340282350000000000000000000000000000000.0)])
ok
run assertion Return(Invoke { mod_ref: None, func: "f32.no_factor", args: [F32(-0.00000000000000000010689046), F32(0.00000000000000000000000010694433), F32(568307000000000000000000000000000000.0)] }, [F32(-60746540000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_s", args: [I64(9007199254740995)] }, [F64(9007199254740996.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 101, 95, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_s", args: [I64(18437736874454810621)] }, [F64(-9007199254740996.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009828583756551075), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016862581574752944)] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009828583756551075)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(NaN)] })
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 95, 49, 46, 48, 101, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(-0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args}, [F64(-672584203522163500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_factor", args: [F32(-0.000000000000000000000000063545994), F32(0.0000000000000000000007524625), F32(1626770.3)] }, [F32(0.0000000000000012239803)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(-0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args}, [F64(581483022524591100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_factor", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028390554709988774), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001473981250649641), F64(-0.000000000000000000000000000000000000000000000000000000000000000000029001229846550766)] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008233610026197336)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(102315792666821480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(450204300797494900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(102315792667271680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "one", args: [] }, [I32(13)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(-130529978570956560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(154899434220186570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(154899434220186450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "two", args: [I32(13)] }, [I32(14)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "three", args: [I32(13)] }, [I32(11)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(47629997434721684000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(455586451058259700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(455586451058259700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 46, 48, 101, 49, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900000000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 46, 48, 95, 101, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(NaN)] })
I32(83)
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 46, 48, 101, 95, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(NaN)] })
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 46, 48, 101, 43, 95, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 9, 134, 128, 128, 128, 0, 1, 0, 65, 0, 11, 0]), "unknown table")
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 46, 48, 101, 95, 43, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_factor", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006461015505916123), F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023923242802975938), F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015300738798561604)] }, [F64(0.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 95, 48, 120, 49, 48, 48, 41, 41]), "unknown operator")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 95, 120, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900200000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "unknown table")
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_factor", args: [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002939056292080733), F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000002146156743463356), F64(-2510967223130241600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(538892923853642600000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 48, 95, 41, 41]), "unknown operator")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 1, 9, 134, 128, 128, 128, 0, 1, 0, 66, 0, 11, 0]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args}, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 102, 102, 95, 95, 102, 102, 102, 102, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(0.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_factor", args: [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000017785466771708878), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000009328516775403213), F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000012121009044876735)] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001130710359943689)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 95, 49, 46, 48, 41, 41]), "unknown operator")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 104, 11, 0]), "constant expression required")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(-0.5)] }, [F32(-inf)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 48, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_u", args: [I32(1)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 95, 46, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(-0.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(0.5)] }, [F32(inf)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 95, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_u", args: [I32(0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 1, 9, 133, 128, 128, 128, 0, 1, 0, 1, 11, 0]), "constant expression required")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(0.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 95, 49, 112, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(-0.5)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_u", args: [I32(2147483647)] }, [F32(2147483600.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 112, 49, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900200000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 3, 130, 128, 128, 128, 0, 1, 42, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "unknown type")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args}, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000230924607140219)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(0.5)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 150, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 9, 112, 114, 105, 110, 116, 95, 105, 51, 50, 0, 43]), "unknown type")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_u", args: [I32(2147483648)] }, [F32(2147483600.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(-1.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args}, [F64(-49680759347383435000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_u", args: [I32(305419896)] }, [F32(305419900.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(1.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900200000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_u", args: [I32(4294967295)] }, [F32(4294967300.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(-1.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(21174311168546080000000000000000000000000000000000000000000.0), F64(-26385928474612128000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-26385928474612128000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_u", args: [I32(2147483776)] }, [F32(2147483600.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(1.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_u", args: [I32(2147483777)] }, [F32(2147484000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(-9508489561700635000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007858068235728165)] }, [F64(-9508489561700635000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(-6.2831855)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_factor", args}, [F64(-0.0000000000000000000000000015337619131701908)])
run assertion Return(Invoke { mod_ref: None, func: "callt", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(0.5)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 95, 112, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900200000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(6.2831855)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_u", args: [I32(2147483778)] }, [F32(2147484000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005079144928553737), F64(-354021720742499800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-354021720742499800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "callt", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_u", args: [I32(4294966912)] }, [F32(4294966800.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(-0.5)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 112, 95, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "callt", args: [I32(2)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_u", args: [I32(4294966913)] }, [F32(4294967000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 95, 49, 46, 48, 112, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "callt", args: [I32(3)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(-6.2831855)] }, [F32(-inf)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 48, 112, 49, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "callt", args: [I32(4)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_u", args: [I32(4294966914)] }, [F32(4294967000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 48, 95, 112, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(6.2831855)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000004165382103988111), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010865942283516648)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000004165382103988111)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_u", args: [I32(16777217)] }, [F32(16777216.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 48, 112, 95, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "callt", args: [I32(5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900200000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(-340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "callt", args: [I32(6)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [F64(0.5)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 48, 112, 43, 95, 49, 41, 41]), "unknown operator")
run assertion TrapAction(Invoke { mod_ref: None, func: "callt", args: [I32(7)] }, "undefined element")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_distribute", args: [F32(-1435111700000.0), F32(-853617640000000.0), F32(1113849300000000000.0)] }, [F32(-952400000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i32_u", args: [I32(16777219)] }, [F32(16777220.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(97215650000000000000000000000000000.0), F32(305590870000000000000000000000000000000.0)] }, [F32(305688080000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 48, 112, 95, 43, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_u", args: [I64(1)] }, [F32(1.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(0.5)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "callt", args: [I32(100)] }, "undefined element")
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 43, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [F64(-1.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "callt", args: [I32(4294967295)] }, "undefined element")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_distribute", args: [F32(-0.026666632), F32(0.048412822), F32(-0.002813697)] }, [F32(-0.000061187195)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "callu", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900200000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_u", args: [I64(0)] }, [F32(0.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 45, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_u", args: [I64(9223372036854775807)] }, [F32(9223372000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_distribute", args: [F32(-0.00000000000046619777), F32(0.00000000000000000010478377), F32(14469202000000000000000000000000000000.0)] }, [F32(-6745508500000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(-340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "callu", args: [I32(1)] }, [I32(2)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 57, 57, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_u", args: [I64(9223372036854775808)] }, [F32(9223372000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(270465630000000000000000000000000000000.0), F32(-230236850000000000000000000000000.0)] }, [F32(270465400000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 95, 95, 48, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900200000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 95, 49, 46, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "callu", args: [I32(2)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_u", args: [I64(18446744073709551615)] }, [F32(18446744000000000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 46, 48, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_distribute", args: [F32(-0.00000000000000000010689046), F32(0.00000000000000000000000010694433), F32(568307000000000000000000000000000000.0)] }, [F32(-60746536000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "callu", args: [I32(3)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(357209300000000000000000000000000000.0), F32(-236494050000000000000000000000000000000.0)] }, [F32(-236136840000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_u", args: [I64(16777217)] }, [F32(16777216.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 95, 46, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.5)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_distribute", args: [F32(-0.000000000000000000000000063545994), F32(0.0000000000000000000007524625), F32(1626770.3)] }, [F32(0.0000000000000012239802)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_u", args: [I64(16777219)] }, [F32(16777220.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "callu", args: [I32(4)] }, [I32(5)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 46, 95, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900200000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_u", args: [I64(9007199791611905)] }, [F32(9007200000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(-1484234100000000000000000000000000000.0), F32(-328991400000000000000000000000000000000.0)] }, [F32(-330475620000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(0.5)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "callu", args: [I32(5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_u", args: [I64(9223371761976868863)] }, [F32(9223371500000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "callu", args: [I32(6)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(-0.5)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_distribute", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028390554709988774), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001473981250649641), F64(-0.000000000000000000000000000000000000000000000000000000000000000000029001229846550766)] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008233610026197337)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(-219885600000000000000000000000000000000.0), F32(-81560930000000000000000000000000000000.0)] }, [F32(-301446520000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_u", args: [I64(9223372586610589697)] }, [F32(9223373000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900200000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(0.5)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.convert_i64_u", args: [I64(18446742424442109953)] }, [F32(18446743000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(-1.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "callu", args: [I32(7)] }, "undefined element")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(inf)] }, [F32(inf)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 95, 49, 101, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(NaN)] }, [F32(-inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "callu", args: [I32(100)] }, "undefined element")
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 101, 49, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i32_u", args: [I32(1)] }, [F64(1.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "callu", args: [I32(4294967295)] }, "undefined element")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(-inf), F32(NaN)] }, [F32(inf)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 95, 101, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(-1.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i32_u", args: [I32(0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900200000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(NaN)] }, [F32(-inf)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 101, 95, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i32_u", args: [I32(2147483647)] }, [F64(2147483647.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 95, 49, 46, 48, 101, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(inf), F32(NaN)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i32_u", args: [I32(2147483648)] }, [F64(2147483648.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 46, 48, 101, 49, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-0.0)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_distribute", args}, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i32_u", args: [I32(4294967295)] }, [F64(4294967295.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(0.0)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_u", args: [I64(1)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900200000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(1.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-0.0)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_u", args: [I64(0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_distribute", args: [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002939056292080733), F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000002146156743463356), F64(-2510967223130241600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(538892923853642500000000000000000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 46, 48, 95, 101, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "callt", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(6.2831855)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 46, 48, 101, 95, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(0.0)] }, [F32(NaN)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 46, 48, 101, 43, 95, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_u", args: [I64(9223372036854775807)] }, [F64(9223372036854776000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(-1.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "callt", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args}, [F64(90390204939570580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_distribute", args: [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000017785466771708878), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000009328516775403213), F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000012121009044876735)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011307103599436889)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_u", args: [I64(9223372036854775808)] }, [F64(9223372036854776000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900200000000.0)])
test run_func_ptrs ... okrun assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(1.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_u", args: [I64(18446744073709551615)] }, [F64(18446744073709552000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])

run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_distribute", args}, [F64(-0.0000000000000000000000000015337619131701907)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_u", args: [I64(9223372036854776832)] }, [F64(9223372036854776000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_u", args: [I64(9223372036854776833)] }, [F64(9223372036854778000.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-use-1", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900200000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(6.2831855)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-use-2", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_u", args: [I64(9223372036854776834)] }, [F64(9223372036854778000.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-use-3", args: [I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_u", args: [I64(18446744073709548544)] }, [F64(18446744073709548000.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-use-4", args: [I32(1), F64(1.0), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 46, 48, 101, 95, 43, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args}, [F64(165916059748823400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_u", args: [I64(18446744073709548545)] }, [F64(18446744073709550000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "type-use-5", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 95, 48, 120, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "type-use-6", args: [I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900200000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_u", args: [I64(18446744073709548546)] }, [F64(18446744073709550000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(NaN)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 95, 120, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(6.2831855)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_u", args: [I64(9007199254740993)] }, [F64(9007199254740992.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(-inf)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 48, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_regroup_div_mul", args: [F32(-0.00000000000000000000000000000000002831349), F32(-0.00000000000000000007270787), F32(0.000000000000000000000000000000000016406605)] }, [F32(0.00000000000000000012547468)])
run assertion Return(Invoke { mod_ref: None, func: "type-use-7", args: [I32(1), F64(1.0), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [F32(NaN)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 102, 102, 95, 95, 102, 102, 102, 102, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 95, 49, 46, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "local-first-i32", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900300000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_regroup_div_mul", args: [F32(-3145897700000000000000000000.0), F32(-0.000000000000000000000000000000000040864003), F32(-9245928300000000000000.0)] }, [F32(-0.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 48, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f64.convert_i64_u", args: [I64(9007199254740995)] }, [F64(9007199254740996.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(-inf)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 95, 46, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "local-first-i64", args: [] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 95, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-0.5)] }, [F32(NaN)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 95, 49, 112, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_regroup_div_mul", args: [F32(-93157.43), F32(-0.00000081292654), F32(-0.00000000000000000000000000000000000015469397)] }, [F32(-489548120000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "local-first-f32", args: [] }, [F32(0.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 112, 49, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "local-first-f64", args: [] }, [F64(0.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 95, 112, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900300000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(0.000000000000000000000000000000000000000000001)] }, [F64(0.000000000000000000000000000000000000000000001401298464324817)])
run assertion Return(Invoke { mod_ref: None, func: "local-second-i32", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(-136351292561394300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(60507030603873580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-136290785530790440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "local-second-i64", args: [] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(-0.000000000000000000000000000000000000000000001)] }, [F64(-0.000000000000000000000000000000000000000000001401298464324817)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_regroup_div_mul", args: [F32(-0.00000000000000000000000000008899643), F32(17887725000000000000000.0), F32(514680230000000000000.0)] }, [F32(-0.000000000000000000000000003093073)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 112, 95, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "local-second-f32", args: [] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-i32", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 95, 49, 46, 48, 112, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "local-second-f64", args: [] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(0.5)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-i64", args: [] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125899900000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 48, 112, 49, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_regroup_div_mul", args: [F32(9222036000000000000000000000000000.0), F32(33330492.0), F32(-3253108800000000000000.0)] }, [F32(-94486550000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-0.5)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-f32", args: [] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(-340282350000000000000000000000000000000.0)] }, [F64(-340282346638528860000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "local-mixed", args: [] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(340282350000000000000000000000000000000.0)] }, [F64(340282346638528860000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(0.5)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-f64", args: [] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_regroup_div_mul", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005698811412550059), F64(-0.0000000000000000000000000000000000018313439132919336), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009543270551003098)] }, [F64(-1093596114413331000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125899900000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "param-first-i32", args: [I32(2), I32(3)] }, [I32(2)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 48, 95, 112, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(0.0000000000000000000000000000000000015046328)] }, [F64(0.000000000000000000000000000000000001504632769052528)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-1.0)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_regroup_div_mul", args: [F64(357289288425507550000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003952760844538651), F64(-1450781241254900800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(-34377613258227424000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(169947152758793490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(169947118381180220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(66382537000000000000000000000000000000.0)] }, [F64(66382536710104395000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "param-first-i64", args: [I64(2), I64(3)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-i32", args: [I32(2)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(1.0)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_regroup_div_mul", args: [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009124278383497107), F64(55561345277147970000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025090826940306507)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-i64", args: [I64(3)] }, [I64(3)])
run assertion Return(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-1.0)] }, [F32(NaN)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "param-first-f32", args: [F32(2.0), F32(3.0)] }, [F32(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-f32", args: [F32(4.4)] }, [F32(4.4)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(1.0)] }, [F32(NaN)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(NaN)] })
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 48, 112, 95, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_regroup_div_mul", args}, [F64(-91013507803376260000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "param-first-f64", args: [F64(2.0), F64(3.0)] }, [F64(2.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-f64", args: [F64(5.5)] }, [F64(5.5)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(NaN)] })
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 48, 112, 43, 95, 49, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900000000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 102, 54, 52, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 49, 46, 48, 112, 95, 43, 49, 41, 41]), "unknown operator")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "param-second-i32", args: [I32(2), I32(3)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "type-mixed", args: [I64(1), F32(2.2), F64(3.3), I32(4), I32(5)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f64.promote_f32", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "param-second-i64", args: [I64(2), I64(3)] }, [I64(3)])
test run_float_literals ... ok
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-6.2831855)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(0.0)] }, [F32(0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "read", args: [I64(1), F32(2.0), F64(3.3), I32(4), I32(5)] }, [F64(34.8)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "param-second-f32", args: [F32(2.0), F32(3.0)] }, [F32(3.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(6.2831855)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900000000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 1, 1, 127, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_regroup_div_mul", args}, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005356807494101561)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "param-second-f64", args: [F64(2.0), F64(3.0)] }, [F64(3.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(92273427008645570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-39269416451018680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(92273426969376150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-6.2831855)] }, [F32(NaN)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 1, 1, 125, 32, 0, 69, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "param-mixed", args: [F32(1.0), I32(2), I64(3), I32(4), F64(5.5), I32(6)] }, [F64(5.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(6.2831855)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "empty", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(0.000000000000000000000000000000000000008313455), F32(0.000000000000000000000000000000000000000000873)] }, [F32(0.000000000000000000000000000000000000008314328)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "value-void", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "value-i32", args: [] }, [I32(77)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [F32(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 2, 1, 124, 1, 126, 32, 1, 154, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "value-i64", args: [] }, [I64(7777)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(0.000000000000000000000000000000000000000000052), F32(-0.000000000000000000000000000000000000000000003)] }, [F32(0.000000000000000000000000000000000000000000049)])
run assertion Return(Invoke { mod_ref: None, func: "value-f32", args: [] }, [F32(77.7)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "value-f64", args: [] }, [F64(77.77)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(-0.000000000000000000000000000000000000000000011), F32(0.000000000000000000000000000000000000005186284)] }, [F32(0.000000000000000000000000000000000000005186273)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "value-block-void", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [F32(NaN)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(-0.000000000000000000000000000000000000000000028), F32(0.00000000000000000000000000000000000023675283)] }, [F32(0.0000000000000000000000000000000000002367528)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "value-block-i32", args: [] }, [I32(77)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(-0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(0.000000000000000000000000000000000000011754942807573643)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [F32(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 125, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 32, 0, 69, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "return-empty", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_regroup_mul_div", args: [F32(-0.00000000000000000000000000000000002831349), F32(-0.00000000000000000007270787), F32(0.000000000000000000000000000000000016406605)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-inf)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(0.000000000000000000000000000000000000000000635), F32(-0.00000000000000000000000000000000000000003327)] }, [F32(-0.000000000000000000000000000000000000000032635)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "return-i32", args: [] }, [I32(78)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(inf)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 124, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 32, 1, 154, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-0.000000000000000000000000000000000000011754942807573643)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(-inf)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "return-i64", args: [] }, [I64(7878)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_regroup_mul_div", args: [F32(-3145897700000000000000000000.0), F32(-0.000000000000000000000000000000000040864003), F32(-9245928300000000000000.0)] }, [F32(-0.000000000000000000000000000013903848)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(0.000000000000000000000000000000000000011754942807573642)] }, [F32(0.000000000000000000000000000000000000011754942)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 3, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "return-f32", args: [] }, [F32(78.7)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(inf)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-0.000000000000000000000000000000000000011754942807573642)] }, [F32(-0.000000000000000000000000000000000000011754942)])
run assertion Return(Invoke { mod_ref: None, func: "return-f64", args: [] }, [F64(78.78)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "return-block-i32", args: [] }, [I32(77)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(-0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(0.000000000000000000000000000000000000000000001401298464324817)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 247, 164, 234, 6, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "break-empty", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-0.000000000000000000000000000000000000000000001401298464324817)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "break-i32", args: [] }, [I32(79)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(NaN)] }, [F32(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 127, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 32, 2, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "break-i64", args: [] }, [I64(7979)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_regroup_mul_div", args: [F32(-93157.43), F32(-0.00000081292654), F32(-0.00000000000000000000000000000000000015469397)] }, [F32(-489548160000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F32(NaN), F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "break-f32", args: [] }, [F32(79.9)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(340282336497324060000000000000000000000.0)] }, [F32(340282330000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028461489375936755), F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005130160608603642)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002284011671009967)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_regroup_mul_div", args: [F32(-0.00000000000000000000000000008899643), F32(17887725000000000000000.0), F32(514680230000000000000.0)] }, [F32(-0.0000000000000000000000000030930732)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-340282336497324060000000000000000000000.0)] }, [F32(-340282330000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(-1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 247, 242, 206, 212, 2, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "break-f64", args: [] }, [F64(79.79)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(340282336497324100000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "break-block-i32", args: [] }, [I32(77)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_if-empty", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-340282336497324100000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 3, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "break-br_if-empty", args: [I32(2)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_if-num", args: [I32(0)] }, [I32(51)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(340282346638528860000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_regroup_mul_div", args: [F32(9222036000000000000000000000000000.0), F32(33330492.0), F32(-3253108800000000000000.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_if-num", args: [I32(1)] }, [I32(50)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 247, 168, 153, 102, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-empty", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-340282346638528860000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-empty", args: [I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(6.2831855)] }, [I32(0)])
test run_get_local ... ok
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_regroup_mul_div", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005698811412550059), F64(-0.0000000000000000000000000000000000018313439132919336), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009543270551003098)] }, [F64(-1093596114413331100000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(340282356779733620000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-empty", args: [I32(5)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(-0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-340282356779733620000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-empty", args: [I32(4294967295)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900200000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(340282356779733660000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args}, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004154936641026667)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-num", args: [I32(0)] }, [I32(50)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(-1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_regroup_mul_div", args}, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009734611044734945)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-num", args: [I32(1)] }, [I32(50)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-340282356779733660000000000000000000000.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(-6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(-0.5)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_regroup_mul_div", args}, [F64(20204881364667663000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(0.000000000000000000000000000000000001504632769052528)] }, [F32(0.0000000000000000000000000000000000015046328)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-num", args: [I32(10)] }, [I32(50)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(0.5)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900200000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_regroup_mul_div", args}, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(66382536710104395000000000000000000000.0)] }, [F32(66382537000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-num", args: [I32(4294967196)] }, [I32(50)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(-0.5)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(1.0000000000000002)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(0.5)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125899900000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(0.9999999999999999)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(-1.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "type-i32", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(1.0000000596046448)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_regroup_mul_div", args}, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(1.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009330082001250494), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000029863980609419717)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003919406261067021)])
run assertion Return(Invoke { mod_ref: None, func: "type-i64", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(-1.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-nested-empty", args: [I32(0)] }, [])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(1.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "type-f32", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(1.000000059604645)] }, [F32(1.0000001)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125899900000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-nested-empty", args: [I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(-6.2831855)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "type-f64", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-nested-empty", args: [I32(3)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(1.000000178813934)] }, [F32(1.0000001)])
run assertion Return(Invoke { mod_ref: None, func: "type-i32-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(6.2831855)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-nested-empty", args: [I32(4294967294)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "type-i64-value", args: [] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-nested-num", args: [I32(0)] }, [I32(52)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(1.0000001788139343)] }, [F32(1.0000002)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(-6.2831855)] }, [F32(inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(1.0000002980232239)] }, [F32(1.0000002)])
run assertion Return(Invoke { mod_ref: None, func: "get-a", args: [] }, [I32(4294967294)])
run assertion Return(Invoke { mod_ref: None, func: "type-f32-value", args: [] }, [F32(3.0)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_reassociate_add", args: [F32(-24154321000000.0), F32(26125812000.0), F32(-238608080000000.0), F32(-2478953500000.0)] }, [F32(-265215220000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "get-b", args: [] }, [I64(18446744073709551611)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(16777217.0)] }, [F32(16777216.0)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-nested-num", args: [I32(1)] }, [I32(50)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "type-f64-value", args: [] }, [F64(4.0)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-nested-num", args: [I32(2)] }, [I32(52)])
run assertion Return(Invoke { mod_ref: None, func: "get-x", args: [] }, [I32(4294967284)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(6.2831855)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(16777217.000000004)] }, [F32(16777218.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "get-y", args: [] }, [I64(18446744073709551601)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "empty", args: [I32(0)] }, [I32(22)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "get-1", args: [] }, [F32(-3.0)])
run assertion Return(Invoke { mod_ref: None, func: "break-br_table-nested-num", args: [I32(4294967293)] }, [I32(52)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(-340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "get-2", args: [] }, [F64(-4.0)])
run assertion Return(Invoke { mod_ref: None, func: "init-local-i32", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "empty", args: [I32(1)] }, [I32(22)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(16777218.999999996)] }, [F32(16777218.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "empty", args: [I32(11)] }, [I32(22)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args}, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001906220493265178)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "init-local-i64", args: [] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "get-5", args: [] }, [F32(-13.0)])
run assertion Return(Invoke { mod_ref: None, func: "init-local-f32", args: [] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_reassociate_add", args: [F32(0.0036181053), F32(-0.00985944), F32(0.063375376), F32(-0.011150199)] }, [F32(0.04598384)])
run assertion Return(Invoke { mod_ref: None, func: "empty", args: [I32(4294967295)] }, [I32(22)])
run assertion Return(Invoke { mod_ref: None, func: "get-6", args: [] }, [F64(-14.0)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(16777219.0)] }, [F32(16777220.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "init-local-f64", args: [] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(-0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "empty", args: [I32(4294967196)] }, [I32(22)])
run assertion Return(Invoke { mod_ref: None, func: "set-x", args: [I32(6)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(424258443299142700000000000000000.0)] }, [F32(424258450000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_reassociate_add", args: [F32(-34206968000.0), F32(-3770877200000.0), F32(30868425000000.0), F32(421132080000.0)] }, [F32(27484470000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "empty", args: [I32(4294967295)] }, [I32(22)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I32(1), I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "set-y", args: [I64(7)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(-1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I32(1), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "set-5", args: [F32(8.0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I32(4294967295), I32(4294967295)] }, [I32(4294967294)])
run assertion Return(Invoke { mod_ref: None, func: "set-6", args: [F64(9.0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_reassociate_add", args: [F32(153506400000000.0), F32(925114700000000.0), F32(-36021854000.0), F32(2450846000000000.0)] }, [F32(3529431000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I32(4294967295), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(-6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I32(2147483647), I32(1)] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(-340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "even", args: [I64(0)] }, [I32(44)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(6.2831855)] }, [F32(-6.2831855)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 1, 127, 0, 96, 0, 1, 124, 3, 133, 128, 128, 128, 0, 4, 1, 0, 1, 2, 10, 175, 128, 128, 128, 0, 4, 139, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 11, 130, 128, 128, 128, 0, 0, 11, 139, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 11, 130, 128, 128, 128, 0, 0, 11]), "unknown type")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I32(2147483648), I32(4294967295)] }, [I32(2147483647)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_reassociate_add", args: [F32(470600300000000000000000000000000.0), F32(-396552040000000000000000000000000.0), F32(48066940000000000000000000000000.0), F32(-35644073000000000000000000000.0)] }, [F32(122079560000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "get-x", args: [] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "even", args: [I64(1)] }, [I32(99)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I32(2147483648), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "get-y", args: [] }, [I64(7)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043203619362281506), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002521511966399844)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017988499698283067)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I32(1073741823), I32(1)] }, [I32(1073741824)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_reassociate_add", args}, [F64(-921652887575998600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "empty-value", args: [I32(0)] }, [I32(33)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "get-5", args: [] }, [F32(8.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(-inf)] }, [F32(-inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [I32(1), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "empty-value", args: [I32(1)] }, [I32(33)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(340282330000000000000000000000000000000.0), F32(20282410000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "even", args: [I64(100)] }, [I32(44)])
run assertion Return(Invoke { mod_ref: None, func: "get-6", args: [] }, [F64(9.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(0.0000000000000000000000000000000001569262107843488)] }, [F32(0.00000000000000000000000000000000015692621)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(-inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_reassociate_add", args}, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022324206697150536)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [I32(1), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(-0.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [I32(4294967295), I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(0.000000000000000000000000000000000000010551773688605172)] }, [F32(0.000000000000000000000000000000000000010551773)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-mid", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(0.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [I32(2147483647), I32(4294967295)] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(-0.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "empty-value", args: [I32(11)] }, [I32(33)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_reassociate_add", args: [F64(-5412584921122726300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(597603656170379500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-355830077793396300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(373627259957625440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-5768414998318146000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "empty-value", args: [I32(4294967295)] }, [I32(33)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [I32(2147483648), I32(1)] }, [I32(2147483647)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [I32(2147483648), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-last", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "empty-value", args: [I32(4294967196)] }, [I32(33)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-2.8238128484141933)] }, [F32(-2.823813)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-first", args: [] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [I32(1073741823), I32(4294967295)] }, [I32(1073741824)])
run assertion Return(Invoke { mod_ref: None, func: "even", args: [I64(77)] }, [I32(99)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-mid", args: [] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_reassociate_add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006469047714189599), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064286584974746), F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000021277698072285604), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000008768287273189493)] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000006640517465960996)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(0.0)] }, [F64(0.5)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "empty-value", args: [I32(4294967295)] }, [I32(33)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 152, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-9063376370095757000000000000000000.0)] }, [F32(-9063376000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I32(1), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-last", args: [] }, [I32(6)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(-inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "signature-explicit-reused", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_reassociate_add", args}, [F64(319443655442136560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "singleton", args: [I32(0)] }, [I32(22)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I32(1), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "odd", args: [I64(0)] }, [I32(99)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-condition", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args}, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "odd", args: [I64(1)] }, [I32(44)])
run assertion Return(Invoke { mod_ref: None, func: "signature-implicit-reused", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [] }, [I32(6)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 139, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I32(4294967295), I32(4294967295)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(2.0), F32(2.0)] }, [F32(4.0)])
run assertion Return(Invoke { mod_ref: None, func: "odd", args: [I64(200)] }, [I32(99)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(1125900200000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "singleton", args: [I32(1)] }, [I32(20)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 140, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "singleton", args: [I32(11)] }, [I32(20)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args: [F64(2.0), F64(2.0)] }, [F64(4.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I32(268435456), I32(4096)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "signature-explicit-duplicate", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.5)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I32(2147483648), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "signature-implicit-duplicate", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I32(2147483648), I32(4294967295)] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "singleton", args: [I32(4294967295)] }, [I32(20)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-first", args: [] }, [I32(6)])
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 102, 117, 110, 99, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41]), "unexpected token")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-1125900200000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.0)] })
test run_f32_bitwise ... ok
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-last", args: [] }, [I32(2)])
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41]), "unexpected token")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I32(2147483647), I32(4294967295)] }, [I32(2147483649)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_reassociate_mul", args: [F32(0.00000000000000000000000000000000001904515), F32(0.00000000022548861), F32(-6964322000000000000000000000000.0), F32(0.000000000000000026902832)] }, [F32(-0.00000000000000000000000000000078764173)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "singleton", args: [I32(4294967196)] }, [I32(20)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(340282350000000000000000000000000000000.0), F32(10141204000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-first", args: [] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41]), "unexpected token")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I32(19088743), I32(1985229328)] }, [I32(898528368)])
run assertion Return(Invoke { mod_ref: None, func: "singleton", args: [I32(4294967295)] }, [I32(20)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.0)])
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41]), "unexpected token")
run assertion Return(Invoke { mod_ref: None, func: "odd", args: [I64(77)] }, [I32(44)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I32(2147483647), I32(2147483647)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_reassociate_mul", args: [F32(0.000000000000000018733125), F32(-7565904000000000000000000000000.0), F32(-0.000000000000000000000000000000000000030807684), F32(-1592759200000000000000.0)] }, [F32(-0.0069547286)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-last", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "singleton-value", args: [I32(0)] }, [I32(32)])
run assertion Return(Invoke { mod_ref: None, func: "f32.add", args: [F32(340282350000000000000000000000000000000.0), F32(10141205000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41]), "unexpected token")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [] }, [I32(6)])
run assertion Exhaustion(Invoke { mod_ref: None, func: "runaway", args: [] }, "call stack exhausted")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41]), "unexpected token")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "singleton-value", args: [I32(1)] }, [I32(33)])
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 41, 41, 40, 102, 117, 110, 99, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41]), "inline function type")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "singleton-value", args: [I32(11)] }, [I32(33)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "singleton-value", args: [I32(4294967295)] }, [I32(33)])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(0.0000000000000000000000000000000000000000000007006492321624085)] }, [F32(0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_reassociate_mul", args: [F32(0.0000000000000050355575), F32(-56466884000000000.0), F32(-0.0000000000011740512), F32(84984730000000000000000.0)] }, [F32(28370654000000.0)])
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 102, 117, 110, 99, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41]), "inline function type")
run assertion Exhaustion(Invoke { mod_ref: None, func: "mutual-runaway", args: [] }, "call stack exhausted")
run assertion Return(Invoke { mod_ref: None, func: "singleton-value", args: [I32(4294967196)] }, [I32(33)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [] }, "undefined element")
run assertion TrapAction(Invoke { mod_ref: None, func: "div_s", args: [I32(1), I32(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-0.0000000000000000000000000000000000000000000007006492321624085)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "singleton-value", args: [I32(4294967295)] }, [I32(33)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 102, 117, 110, 99, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41]), "inline function type")
run assertion Return(Invoke { mod_ref: None, func: "multiple", args: [I32(0)] }, [I32(103)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_reassociate_mul", args: [F32(0.000000000000000000000000000000046394946), F32(254449360000000000000000.0), F32(-72460980000000000.0), F32(-962511040000000000.0)] }, [F32(823345100000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "div_s", args: [I32(0), I32(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.5)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(0.0000000000000000000000000000000000000000000007006492321624087)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "multiple", args: [I32(1)] }, [I32(102)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [] }, [I32(306)])
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 102, 117, 110, 99, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 41, 41]), "inline function type")
run assertion Return(Invoke { mod_ref: None, func: "as-store-first", args: [] }, [])
run assertion TrapAction(Invoke { mod_ref: None, func: "div_s", args: [I32(2147483648), I32(4294967295)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-last", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.demote_f64", args: [F64(-0.0000000000000000000000000000000000000000000007006492321624087)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args}, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-mid", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "f32.reinterpret_i32", args: [I32(0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_reassociate_mul", args: [F32(-0.0000000000000000000000000000019420536), F32(0.0000000000000023200355), F32(-9.772748), F32(864066000000000000.0)] }, [F32(0.000000000000000000000000035113616)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 1, 1, 127, 32, 0, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.reinterpret_i32", args: [I32(2147483648)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "multiple", args: [I32(2)] }, [I32(101)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-last", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "multiple", args: [I32(3)] }, [I32(100)])
run assertion Return(Invoke { mod_ref: None, func: "f32.reinterpret_i32", args: [I32(1)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.0)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "div_s", args: [I32(2147483648), I32(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "as-load-operand", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-condition", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(1), I32(1)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 1, 1, 125, 32, 0, 69, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(0), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.reinterpret_i32", args: [I32(4294967295)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_reassociate_mul", args}, [F64(40822261813278614000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-first", args: [] }, [I32(306)])
run assertion Return(Invoke { mod_ref: None, func: "multiple", args: [I32(4)] }, [I32(104)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.add", args}, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(-0.5)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(0), I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-last", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 2, 1, 124, 1, 126, 32, 1, 154, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "multiple", args: [I32(5)] }, [I32(104)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_reassociate_mul", args}, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008159057447560471)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(65536.0), F32(0.000000000007275958)] }, [F32(65536.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-first", args: [] }, [I32(306)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(-0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-last", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "multiple", args: [I32(6)] }, [I32(104)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(65536.0), F64(0.000000000007275957614183426)] }, [F64(65535.99999999999)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(4294967295), I32(4294967295)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.reinterpret_i32", args: [I32(123456789)] }, [F32(0.00000000000000000000000000000000016535997)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(1.0), F32(0.000000029802322)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [] }, [I32(306)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(0.5)] }, [F64(1.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_reassociate_mul", args}, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001241793627299937)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(1.0), F32(0.000000029802326)] }, [F32(0.99999994)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 125, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 32, 0, 69, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.reinterpret_i32", args: [I32(2147483649)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "multiple", args: [I32(10)] }, [I32(104)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(-1.0)] }, [F64(-1.5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.reinterpret_i32", args: [I32(2139095040)] }, [F32(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(1.0), F64(0.00000000000000005551115123125783)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_reassociate_mul", args: [F64(24318065966298720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006508014075793436), F64(17596421287233897000000000000000000000000000000000000000000000000000.0), F64(-0.0000001416141401305358)] }, [F64(-3943741918531223000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(1.0)] }, [F64(0.5)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [] }, "undefined element")
run assertion Return(Invoke { mod_ref: None, func: "multiple", args: [I32(4294967295)] }, [I32(104)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 124, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 32, 1, 154, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "multiple", args: [I32(4294967295)] }, [I32(104)])
run assertion Return(Invoke { mod_ref: None, func: "f32.reinterpret_i32", args: [I32(4286578688)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-first", args: [] }, [])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(-1.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.reinterpret_i32", args: [I32(2143289344)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(2147483648), I32(2)] }, [I32(3221225472)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(1.0)] }, [F64(1.5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.reinterpret_i32", args: [I32(4290772992)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 0, 2, 127, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 137, 128, 128, 128, 0, 1, 131, 128, 128, 128, 0, 0, 0, 11]), "invalid result arity")
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(1.0), F64(0.00000000000000005551115123125784)] }, [F64(0.9999999999999999)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-last", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I64(1), I64(1)] }, [I64(2)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "multiple-value", args: [I32(0)] }, [I32(213)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(2147483649), I32(1000)] }, [I32(4292819813)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I64(1), I64(0)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_reassociate_mul", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004171548126376117)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(-6.283185307179586)] }, [F64(-6.783185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(0.00000000000000000000000000000002379208), F32(-722129800000000000000000000000000000.0)] }, [F32(722129800000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I64(18446744073709551614)])
run assertion Return(Invoke { mod_ref: None, func: "f32.reinterpret_i32", args: [I32(2141192192)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "multiple-value", args: [I32(1)] }, [I32(212)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I64(18446744073709551615), I64(1)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(6.283185307179586)] }, [F64(5.783185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-value", args: [] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 0, 2, 127, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 137, 128, 128, 128, 0, 1, 131, 128, 128, 128, 0, 0, 0, 11]), "invalid result arity")
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(5), I32(2)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(-842284000000000000000000000000000000.0), F32(-11118414000000.0)] }, [F32(-842284000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.reinterpret_i32", args: [I32(4288675840)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "multiple-value", args: [I32(2)] }, [I32(211)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I64(9223372036854775807), I64(1)] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "multiple-value", args: [I32(3)] }, [I32(210)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(4294967291), I32(2)] }, [I32(4294967294)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(1.4549444), F32(-0.00000000000000000000000033792615)] }, [F32(1.4549444)])
run assertion Return(Invoke { mod_ref: None, func: "f64.reinterpret_i64", args: [I64(0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(-6.283185307179586)] }, [F64(-5.783185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(5), I32(4294967294)] }, [I32(4294967294)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I64(9223372036854775808), I64(18446744073709551615)] }, [I64(9223372036854775807)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(0.0000000000000000000000000000000000094808914), F32(0.000000000000000000000018589502)] }, [F32(-0.000000000000000000000018589502)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(6.283185307179586)] }, [F64(6.783185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(4294967291), I32(4294967294)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "multiple-value", args: [I32(4)] }, [I32(214)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I64(9223372036854775808), I64(9223372036854775808)] }, [I64(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "multiple-value", args: [I32(5)] }, [I32(214)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [I64(1073741823), I64(1)] }, [I64(1073741824)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_0", args: [F32(1.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(0.000006181167), F32(-0.0000000000000000000000000000000093959864)] }, [F32(0.000006181167)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [I64(1), I64(1)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_0", args: [F32(-1.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(7), I32(3)] }, [I32(2)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(4294967289), I32(3)] }, [I32(4294967294)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_0", args: [F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(7), I32(4294967293)] }, [I32(4294967294)])
run assertion Return(Invoke { mod_ref: None, func: "f64.reinterpret_i64", args: [I64(1)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [I64(1), I64(0)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(4294967289), I32(4294967293)] }, [I32(2)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_0", args: [F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(11), I32(5)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "f64.reinterpret_i64", args: [I64(18446744073709551615)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000775701650124413), F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002524845082116609)] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000775701650124413)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_div_0", args: [F32(0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I32(17), I32(7)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "f64.reinterpret_i64", args: [I64(9223372036854775808)] }, [F64(-0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_div_0", args: [F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "multiple-value", args: [I32(6)] }, [I32(214)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion TrapAction(Invoke { mod_ref: None, func: "div_u", args: [I32(1), I32(0)] }, "integer divide by zero")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 137, 128, 128, 128, 0, 1, 131, 128, 128, 128, 0, 0, 1, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "div_u", args: [I32(0), I32(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "multiple-value", args: [I32(10)] }, [I32(214)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [I64(9223372036854775807), I64(18446744073709551615)] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f32.no_fold_div_0", args: [F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.reinterpret_i64", args: [I64(1234567890)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000609957582)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I32(1), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(-20991871064832710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0000000000000000000000000000000000000000000000038165079778426864)] }, [F64(-20991871064832710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [I64(9223372036854775808), I64(1)] }, [I64(9223372036854775807)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028592030964162332), F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020889465194336087)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028592030964162332)])
run assertion Return(Invoke { mod_ref: None, func: "multiple-value", args: [I32(4294967295)] }, [I32(214)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I32(0), I32(1)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_div_0", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I32(4294967295), I32(4294967295)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.reinterpret_i64", args: [I64(9223372036854775809)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "multiple-value", args: [I32(4294967295)] }, [I32(214)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [I64(9223372036854775808), I64(9223372036854775808)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_0", args: [F64(1.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I32(2147483648), I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [I64(1073741823), I64(18446744073709551615)] }, [I64(1073741824)])
run assertion Return(Invoke { mod_ref: None, func: "large", args: [I32(0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 137, 128, 128, 128, 0, 1, 131, 128, 128, 128, 0, 0, 15, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000303879528930943), F64(-23204941114021897000000000000000000000000000000.0)] }, [F64(23204941114021897000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I32(2147483648), I32(2)] }, [I32(1073741824)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_0", args: [F64(-1.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(-0.00000000000000000000000000000000000000000014953904039036317), F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010592252695645683)] }, [F64(-0.00000000000000000000000000000000000000000014953904039036317)])
run assertion Return(Invoke { mod_ref: None, func: "f64.reinterpret_i64", args: [I64(9218868437227405312)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "large", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I64(1), I64(1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I32(2414874608), I32(65537)] }, [I32(36847)])
run assertion Return(Invoke { mod_ref: None, func: "f64.reinterpret_i64", args: [I64(18442240474082181120)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_0", args: [F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I32(2147483649), I32(1000)] }, [I32(2147483)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 1, 15, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "large", args: [I32(100)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(-448601660000000000000000000000000.0), F32(-8984148000000000000000000000000000.0)] }, [F32(8535546400000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I64(1), I64(0)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.reinterpret_i64", args: [I64(9221120237041090560)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_0", args: [F64(-inf)] }, [F64(-inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 15, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "large", args: [I32(101)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(-899427400000000000000000000000000.0), F32(91.579384)] }, [F32(-899427400000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_div_0", args: [F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.reinterpret_i64", args: [I64(18444492273895866368)] }, [F64(NaN)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(-0.00000000000000000000000011975), F32(0.000000063140405)] }, [F32(-0.000000063140405)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "large", args: [I32(10000)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I32(5), I32(2)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I64(1152921504606846976), I64(4096)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 15, 65, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "large", args: [I32(10001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I32(4294967291), I32(2)] }, [I32(2147483645)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_div_0", args: [F64(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.000000000000000000000000000000000000000000003)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.reinterpret_i64", args: [I64(9219994337134247936)] }, [F64(NaN)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_div_0", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 1, 15, 65, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I64(9223372036854775808), I64(0)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I32(5), I32(4294967294)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "large", args: [I32(1000000)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(0.5)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(-0.000000000000000000000011800487), F32(-0.00031558736)] }, [F32(0.00031558736)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f64.no_fold_div_0", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.reinterpret_i64", args: [I64(18443366373989023744)] }, [F64(NaN)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I32(4294967291), I32(4294967294)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I64(9223372036854775808), I64(18446744073709551615)] }, [I64(9223372036854775808)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.reinterpret_f32", args: [F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "large", args: [I32(1000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(-0.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(-736483800000000000000000000000.0), F32(0.0000000000000000030824513)] }, [F32(-736483800000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I32(7), I32(3)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "i32.reinterpret_f32", args: [F32(-0.0)] }, [I32(2147483648)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I64(9223372036854775807), I64(18446744073709551615)] }, [I64(9223372036854775809)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I32(11), I32(5)] }, [I32(2)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 66, 1, 15, 65, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(0.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-first", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "i32.reinterpret_f32", args: [F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(-9410469964196796000000000000000000000000000000000000000000000.0), F64(-17306275691385970000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(17306275691385970000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_neg0", args: [F32(1.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I32(17), I32(7)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I64(81985529216486895), I64(18364758544493064720)] }, [I64(2465395958572223728)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-mid", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(-0.0)] }, [F64(-0.5)])
run assertion TrapAction(Invoke { mod_ref: None, func: "rem_s", args: [I32(1), I32(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002877908564233173), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002339448785991429)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002877908564233173)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [I64(9223372036854775807), I64(9223372036854775807)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32.reinterpret_f32", args: [F32(NaN)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_neg0", args: [F32(-1.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-last", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(-0.0000000000000000000000000000000000000000000000000000000000009719219783531962), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001572015082308034)] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000009719219783531962)])
run assertion TrapAction(Invoke { mod_ref: None, func: "rem_s", args: [I32(0), I32(0)] }, "integer divide by zero")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(0.0)] }, [F64(0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 66, 1, 15, 65, 1, 15, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_neg0", args: [F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "i32.reinterpret_f32", args: [F32(-0.000000000000000000000000000000000000000000001)] }, [I32(2147483649)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-value", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "div_s", args: [I64(1), I64(0)] }, "integer divide by zero")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 12, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(2147483647), I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034908896031751274), F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019928479721303208)] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019928479721303208)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_neg0", args: [F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(1), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(-6.283185307179586)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_div_neg0", args: [F32(0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(0), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 12, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "i32.reinterpret_f32", args: [F32(1.0)] }, [I32(1065353216)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(-7538298763725556000000000000000000.0), F64(4447012580193329000000000000000000000000000000000000.0)] }, [F64(-4447012580193329000000000000000000000000000000000000.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "div_s", args: [I64(0), I64(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(0), I32(4294967295)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "i32.reinterpret_f32", args: [F32(3.1415925)] }, [I32(1078530010)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(75846976000000000000000000000.0), F32(0.000046391753)] }, [F32(75846976000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_div_neg0", args: [F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(4294967295), I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.5)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "as-loop-first", args: [] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(-567139.9), F32(-0.000000000030334842)] }, [F32(-567139.9)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-mid", args: [] }, [I32(4)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f32.no_fold_div_neg0", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "i32.reinterpret_f32", args: [F32(340282350000000000000000000000000000000.0)] }, [I32(2139095039)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(2147483648), I32(4294967295)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 12, 0, 65, 1, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_div_neg0", args: [F32(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "div_s", args: [I64(9223372036854775808), I64(18446744073709551615)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "i32.reinterpret_f32", args: [F32(-340282350000000000000000000000000000000.0)] }, [I32(4286578687)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(2147483648), I32(2)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-last", args: [] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(-0.000000000017412261), F32(-0.000000000000000017877793)] }, [F32(-0.000000000017412244)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_neg0", args: [F64(1.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "i32.reinterpret_f32", args: [F32(inf)] }, [I32(2139095040)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(-inf)] }, [F64(-inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(2147483649), I32(1000)] }, [I32(4294966649)])
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [] }, [I32(9)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 66, 1, 12, 0, 65, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(-0.000065645545), F32(0.00014473806)] }, [F32(-0.00021038362)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_neg0", args: [F64(-1.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "i32.reinterpret_f32", args: [F32(-inf)] }, [I32(4286578688)])
run assertion TrapAction(Invoke { mod_ref: None, func: "div_s", args: [I64(9223372036854775808), I64(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(5), I32(2)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 1, 12, 0, 65, 1, 12, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-cond", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(4294967291), I32(2)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_neg0", args: [F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(1), I64(1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32.reinterpret_f32", args: [F32(NaN)] }, [I32(2143289344)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_neg0", args: [F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(0), I64(1)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 64, 12, 1, 11, 65, 1, 12, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(0), I64(18446744073709551615)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value", args: [] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(5), I32(4294967294)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32.reinterpret_f32", args: [F32(NaN)] }, [I32(4290772992)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value-cond", args: [] }, [I32(9)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(-0.00000000016016115), F32(-0.000000000000000000000000000000085380075)] }, [F32(-0.00000000016016115)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(4294967291), I32(4294967294)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-index", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(9223372036854775808), I64(2)] }, [I64(13835058055282163712)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.000000000000000000000000000000000000000000003)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 64, 1, 12, 1, 11, 65, 1, 12, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i32.reinterpret_f32", args: [F32(NaN)] }, [I32(2141192192)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_div_neg0", args: [F64(0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.reinterpret_f32", args: [F32(NaN)] }, [I32(4288675840)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(-0.000000000000000000000000000000000000000000000009358725267183177), F64(-31137147338685164000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(31137147338685164000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(7), I32(3)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value", args: [] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(4294967289), I32(3)] }, [I32(4294967295)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_div_neg0", args: [F64(-0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args}, [F64(67890457158958560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.reinterpret_f64", args: [F64(0.0)] }, [I64(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value-index", args: [] }, [I32(11)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 64, 66, 1, 12, 1, 11, 65, 1, 12, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(9223372036854775809), I64(1000)] }, [I64(18437520701672696841)])
run assertion Return(Invoke { mod_ref: None, func: "i64.reinterpret_f64", args: [F64(-0.0)] }, [I64(9223372036854775808)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_div_neg0", args: [F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(7), I32(4294967293)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.5)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036288281010831153), F64(3383199683245004400000000000000000000000000000000000000.0)] }, [F64(-3383199683245004400000000000000000000000000000000000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "f64.no_fold_div_neg0", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [] }, [I64(7)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 110, 111, 112, 41, 32, 40, 108, 111, 99, 97, 108, 32, 105, 51, 50, 41, 41]), "unexpected token")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(5), I64(2)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(4294967289), I32(4294967293)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "i64.reinterpret_f64", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I64(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-if-cond", args: [] }, [I32(2)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 110, 111, 112, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 41]), "unexpected token")
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003645097751812619), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000031423490969686624)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000031423491006137603)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(18446744073709551611), I64(2)] }, [I64(18446744073709551614)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(11), I32(5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "i64.reinterpret_f64", args: [F64(NaN)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(5), I64(18446744073709551614)] }, [I64(18446744073709551614)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(1), I32(6)] }, [I32(3)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 110, 111, 112, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41]), "unexpected token")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008021529638989887), F64(-0.00006774972769072139)] }, [F64(0.00006774972769072139)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I32(17), I32(7)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(18446744073709551611), I64(18446744073709551614)] }, [I64(2)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 108, 111, 99, 97, 108, 32, 105, 51, 50, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 41]), "unexpected token")
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(0.000000000000000000000005816988065793039), F64(0.000000000000000000000000000000000025021499241540866)] }, [F64(0.000000000000000000000005816988065768018)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(-0.5)] }, [F64(-0.5)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(0), I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "i64.reinterpret_f64", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I64(9223372036854775809)])
run assertion TrapAction(Invoke { mod_ref: None, func: "rem_u", args: [I32(1), I32(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(0), I32(6)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_to_hypot", args: [F32(0.00000000000000000000000072854914), F32(0.0000000000000000000042365796)] }, [F32(0.0000000000000000000042366535)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(0.5)] }, [F64(0.5)])
run assertion TrapAction(Invoke { mod_ref: None, func: "rem_u", args: [I32(0), I32(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(7), I64(3)] }, [I64(2)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "i64.reinterpret_f64", args: [F64(1.0)] }, [I64(4607182418800017408)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(1), I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I32(1), I32(1)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 108, 111, 99, 97, 108, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 41]), "unexpected token")
run assertion Return(Invoke { mod_ref: None, func: "i64.reinterpret_f64", args: [F64(3.14159265358979)] }, [I64(4614256656552045841)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I32(0), I32(1)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 41]), "unexpected token")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_to_hypot", args: [F32(-0.0000000000000000000007470285), F32(-0.000000000000000000000000000000007453745)] }, [F32(0.0000000000000000000007468044)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I32(4294967295), I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(18446744073709551609), I64(3)] }, [I64(18446744073709551614)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(0), I32(6)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(0.5)] }, [F64(0.5)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(7), I64(18446744073709551613)] }, [I64(18446744073709551614)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
test run_func ... ok
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(18446744073709551609), I64(18446744073709551613)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_to_hypot", args: [F32(-0.0000000000000000000000000000000000770895), F32(-0.0000000000000000000032627214)] }, [F32(0.0000000000000000000032627695)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(1), I32(6)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(-1.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I32(2147483648), I32(4294967295)] }, [I32(2147483648)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(11), I64(5)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(1.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-second", args: [I32(0), I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(-0.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043336683135353726)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(-1.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I32(2147483648), I32(2)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_to_hypot", args: [F32(-35.42818), F32(174209.48)] }, [F32(174209.5)])
run assertion Return(Invoke { mod_ref: None, func: "div_s", args: [I64(17), I64(7)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-second", args: [I32(1), I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I32(2414874608), I32(65537)] }, [I32(32769)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000006908052676315257), F64(0.0000000000000000000000000000000000000000000000000000000000012001773734799856)] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000012001773734799856)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-cond", args: [] }, [I32(7)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(1.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "i64.reinterpret_f64", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I64(9218868437227405311)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(0.0)] }, [F64(-1.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "div_u", args: [I64(1), I64(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(-0.0000000000022044291547443813), F64(-0.0000000000000000000027947429925618632)] }, [F64(-0.000000000002204429151949638)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I32(2147483649), I32(1000)] }, [I32(649)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_to_hypot", args: [F32(0.000000000000000000000020628143), F32(-0.00000000000000000000046344753)] }, [F32(0.000000000000000000000463032)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-first", args: [] }, [I32(12)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I32(5), I32(2)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "div_u", args: [I64(0), I64(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-mid", args: [] }, [I32(13)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(0.00000004016393569117761), F64(0.17053881989395447)] }, [F64(-0.17053877973001877)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I64(1), I64(1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-last", args: [] }, [I32(14)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I32(4294967291), I32(2)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(-6.283185307179586)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(-0.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_to_hypot", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003863640258986321), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019133014752624014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019120893753235554)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I64(0), I64(1)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(6.283185307179586)] }, [F64(0.5)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I32(5), I32(4294967294)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(0.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_to_hypot", args: [F64(138561238950329770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-2828038515930043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(2828038519324483400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args}, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047853759589431757)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.reinterpret_f64", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I64(18442240474082181119)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [] }, [I32(20)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I32(4294967291), I32(4294967294)] }, [I32(4294967291)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_to_hypot", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006502729096641792), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004544399933151275)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006668276248455232)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(-15618959953.641388), F64(598234410620718900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-598234410620718900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(-6.283185307179586)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [] }, [I32(21)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I64(9223372036854775808), I64(18446744073709551615)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.reinterpret_f64", args: [F64(inf)] }, [I64(9218868437227405312)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(6.283185307179586)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I32(7), I32(3)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [] }, [I32(22)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(38832071540376680000000000000000000.0), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042192279274320304)] }, [F64(38832071540376680000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(0.000000000000000000000000000000000000000000004)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-1.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010705986890807897), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017466607734737216)] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010705986890807897)])
run assertion Return(Invoke { mod_ref: None, func: "i64.reinterpret_f64", args: [F64(-inf)] }, [I64(18442240474082181120)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I32(11), I32(5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_to_hypot", args: [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022340232024202604), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003435929714143315)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022340232023799234)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-func", args: [] }, [I32(23)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(0.00000000000000000949378346261834), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014584885434950294)] }, [F64(0.00000000000000000949378346261834)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I32(17), I32(7)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(-0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I64(9223372036854775808), I64(2)] }, [I64(4611686018427387904)])
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I32(1), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.reinterpret_f64", args: [F64(NaN)] }, [I64(9221120237041090560)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_to_hypot", args: [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002797963998630554), F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001906867996862016)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019068679968620105)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I64(10371807465568210928), I64(4294967297)] }, [I64(2414874607)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(-0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I32(0), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [] }, [I32(17)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-0.000000000000000000000000000000000000000000004)])
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I32(1), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I32(0), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I64(9223372036854775809), I64(1000)] }, [I64(9223372036854775)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I32(2147483647), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.reinterpret_f64", args: [F64(NaN)] }, [I64(18444492273895866368)])
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I64(5), I64(2)] }, [I64(2)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(23.140692), F32(3.1415927)] }, [F32(19.9991)])
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I32(2147483647), I32(4294967295)] }, [I32(2147483647)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_approximate_reciprocal", args: [F32(-0.0011329757)] }, [F32(-882.6315)])
run assertion Return(Invoke { mod_ref: None, func: "i64.reinterpret_f64", args: [F64(NaN)] }, [I64(9219994337134247936)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I32(4042326015), I32(4294963440)] }, [I32(4042322160)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-load-address", args: [] }, [F32(1.7)])
run assertion Return(Invoke { mod_ref: None, func: "i64.reinterpret_f64", args: [F64(NaN)] }, [I64(18443366373989023744)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I64(18446744073709551611), I64(2)] }, [I64(9223372036854775805)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I32(4294967295), I32(4294967295)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I64(5), I64(18446744073709551614)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-loadN-address", args: [] }, [I64(30)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(23.14069263277927), F64(3.141592653589793)] }, [F64(19.999099979189477)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 167, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_approximate_reciprocal", args: [F32(323753010000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000003088774)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I64(18446744073709551611), I64(18446744073709551614)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I32(1), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-address", args: [] }, [I32(30)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-value", args: [] }, [I32(31)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(2999999.0), F32(2999998.0)] }, [F32(1.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I64(7), I64(3)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_approximate_reciprocal", args: [F32(-0.0000000000000000000000000001272599)] }, [F32(-7857934600000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 168, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-storeN-address", args: [] }, [I32(32)])
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I32(0), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(1999999.0), F32(1999995.0)] }, [F32(4.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I64(11), I64(5)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_approximate_reciprocal", args: [F32(103020680000000000000000.0)] }, [F32(0.000000000000000000000009706789)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-storeN-value", args: [] }, [I32(33)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 169, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(1999999.0), F32(1999993.0)] }, [F32(6.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [] }, [F32(3.4)])
run assertion Return(Invoke { mod_ref: None, func: "div_u", args: [I64(17), I64(7)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(400002.0), F32(400001.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_approximate_reciprocal", args: [F32(-0.00000000000000000000000028443763)] }, [F32(-3515709300000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I32(1), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-left", args: [] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(340282350000000000000000000000000000000.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "rem_s", args: [I64(1), I64(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(400002.0), F32(400000.0)] }, [F32(2.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 170, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "rem_s", args: [I64(0), I64(0)] }, "integer divide by zero")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I32(0), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-right", args: [] }, [I64(45)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(2999999999999999.0), F64(2999999999999998.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(9223372036854775807), I64(18446744073709551615)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 171, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-test-operand", args: [] }, [I32(44)])
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I32(2147483647), I32(2147483648)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(1), I64(1)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(1.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-compare-left", args: [] }, [I32(43)])
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I32(2147483648), I32(0)] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(1999999999999999.0), F64(1999999999999995.0)] }, [F64(4.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 188, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-compare-right", args: [] }, [I32(42)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(1999999999999999.0), F64(1999999999999993.0)] }, [F64(6.0)])
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I32(4042326015), I32(4294963440)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "as-convert-operand", args: [] }, [I32(41)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_approximate_reciprocal_sqrt", args: [F32(0.00000000000016117865)] }, [F32(2490842.5)])
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I32(4294967295), I32(4294967295)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-size", args: [] }, [I32(40)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(0), I64(1)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-block-value", args: [I32(0)] }, [I32(19)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(400000000000002.0), F64(400000000000001.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-1.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 172, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_approximate_reciprocal_sqrt", args: [F32(0.0074491366)] }, [F32(11.58636)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(0), I64(18446744073709551615)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I32(1), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "nested-block-value", args: [I32(1)] }, [I32(17)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(-inf)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(340282350000000000000000000000000000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "nested-block-value", args: [I32(2)] }, [I32(16)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 173, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I32(0), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_approximate_reciprocal_sqrt", args: [F32(0.00000000000000000002339817)] }, [F32(6537460000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(400000000000002.0), F64(400000000000000.0)] }, [F64(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(inf)] }, [F64(0.5)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "nested-block-value", args: [I32(10)] }, [I32(16)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 174, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(9223372036854775808), I64(18446744073709551615)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754942)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I32(1), I32(1)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(-inf)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_approximate_reciprocal_sqrt", args: [F32(0.00000000000011123504)] }, [F32(2998328.3)])
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I32(0), I32(0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(9223372036854775808), I64(2)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-block-value", args: [I32(4294967295)] }, [I32(16)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(-0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 175, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(inf)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_approximate_reciprocal_sqrt", args: [F32(0.000000000000000000000000017653063)] }, [F32(7526446300000.0)])
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I32(2147483647), I32(2147483648)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(NaN)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(9223372036854775809), I64(1000)] }, [I64(18446744073709550809)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 176, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-0.5), F64(NaN)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fuse_reciprocal_sqrt", args: [F64(4472459252766337000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014952947335898096)])
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I32(2147483648), I32(0)] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "nested-block-value", args: [I32(100000)] }, [I32(16)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(NaN)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br-value", args: [I32(0)] }, [I32(8)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 177, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(5), I64(2)] }, [I64(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I32(4294967295), I32(2147483648)] }, [I32(2147483647)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fuse_reciprocal_sqrt", args: [F64(4752392260007119000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000014505872638954843)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br-value", args: [I32(1)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I32(4294967295), I32(2147483647)] }, [I32(2147483648)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 189, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(18446744073709551611), I64(2)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br-value", args: [I32(2)] }, [I32(17)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102884)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(-0.5)] }, [F64(-1.5)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(5), I64(18446744073709551614)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(1.0000001), F32(0.99999994)] }, [F32(0.00000017881393)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fuse_reciprocal_sqrt", args: [F64(29014415885392436000000000000000.0)] }, [F64(0.00000000000000018564920084793608)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I32(4042326015), I32(4294963440)] }, [I32(252645135)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(0.5), F64(NaN)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br-value", args: [I32(11)] }, [I32(17)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(18446744073709551611), I64(18446744073709551614)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(7), I64(3)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(1.0000001), F32(1.0)] }, [F32(0.00000011920929)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(-0.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102884)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br-value", args: [I32(4294967292)] }, [I32(17)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 178, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(1.0), F32(0.99999994)] }, [F32(0.000000059604645)])
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I32(4294967295), I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br-value", args: [I32(10213210)] }, [I32(17)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fuse_reciprocal_sqrt", args: [F64(1396612507697477800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026758516751072132)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(18446744073709551609), I64(3)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(1.0000000000000002), F64(0.9999999999999999)] }, [F64(0.00000000000000033306690738754696)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(0.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fuse_reciprocal_sqrt", args: [F64(151596415440704430000000000000000000000000000.0)] }, [F64(0.00000000000000000000008121860649480894)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value", args: [I32(0)] }, [I32(17)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(1.0000000000000002), F64(1.0)] }, [F64(0.0000000000000002220446049250313)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 179, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(7), I64(18446744073709551613)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I32(1), I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(-0.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value", args: [I32(1)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(0.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(1.0), F64(0.9999999999999999)] }, [F64(0.00000000000000011102230246251565)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(-0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(18446744073709551609), I64(18446744073709551613)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 180, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value", args: [I32(2)] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(0.5)] }, [F64(1.5)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(11), I64(5)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value", args: [I32(9)] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(340282350000000000000000000000000000000.0), F32(10141204000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_approximate_sqrt_reciprocal", args: [F32(1895057100000000000.0)] }, [F32(0.00000000072642176)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I32(1), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sub", args: [F32(340282350000000000000000000000000000000.0), F32(10141205000000000000000000000000.0)] }, [F32(340282330000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_s", args: [I64(17), I64(7)] }, [I64(3)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I32(2147483647), I32(1)] }, [I32(4294967294)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_approximate_sqrt_reciprocal", args: [F32(0.002565894)] }, [F32(19.741522)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 181, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(-1.0)] }, [F64(-2.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value", args: [I32(4294967287)] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion TrapAction(Invoke { mod_ref: None, func: "rem_u", args: [I64(1), I64(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value", args: [I32(999999)] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_approximate_sqrt_reciprocal", args: [F32(632654500000000000000.0)] }, [F32(0.000000000039757284)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(1.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I32(4294967295), I32(1)] }, [I32(4294967294)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion TrapAction(Invoke { mod_ref: None, func: "rem_u", args: [I64(0), I64(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_approximate_sqrt_reciprocal", args: [F32(14153.539)] }, [F32(0.008405576)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 182, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(-1.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value-cond", args: [I32(0)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_approximate_sqrt_reciprocal", args: [F32(26173730000000000000000000000000.0)] }, [F32(0.00000000000000019546418)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(1.0)] }, [F64(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value-cond", args: [I32(1)] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 190, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value-cond", args: [I32(2)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I64(1), I64(1)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value-cond", args: [I32(3)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(-6.283185307179586)] }, [F64(-7.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I64(0), I64(1)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 183, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I32(2147483648), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(6.283185307179586)] }, [F64(5.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(9979201547673598000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I32(1073741824), I32(1)] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value-cond", args: [I32(4293967296)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(-6.283185307179586)] }, [F64(-5.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I32(1), I32(31)] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I64(9223372036854775808), I64(18446744073709551615)] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 184, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_if-value-cond", args: [I32(9423975)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I32(1), I32(32)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(6.283185307179586)] }, [F64(7.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value", args: [I32(0)] }, [I32(17)])
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_f32_s", args: [I32(16777216)] }, [I32(16777216)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value", args: [I32(1)] }, [I32(9)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 185, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I32(1), I32(33)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_f32_s", args: [I32(16777217)] }, [I32(16777216)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(-0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value", args: [I32(2)] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_f32_s", args: [I32(4026531856)] }, [I32(4026531856)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I32(1), I32(4294967295)] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value", args: [I32(9)] }, [I32(8)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 186, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_f32_u", args: [I32(16777216)] }, [I32(16777216)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I32(1), I32(2147483647)] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(-0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_f32_u", args: [I32(16777217)] }, [I32(16777216)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(1), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value", args: [I32(4294967287)] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(0.5)] }, [F32(-0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 187, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_f32_u", args: [I32(4026531856)] }, [I32(4026531840)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(1), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(-1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value", args: [I32(999999)] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_f64_s", args: [I64(9007199254740992)] }, [I64(9007199254740992)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value-index", args: [I32(0)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(4294967295), I32(1)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sub", args}, [F64(179769313486231550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_f64_s", args: [I64(9007199254740993)] }, [I64(9007199254740992)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value-index", args: [I32(1)] }, [I32(8)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 191, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(2147483647), I32(1)] }, [I32(1073741823)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value-index", args: [I32(2)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(1000000000000000.0), F32(1000000000000000.0)] }, [F32(999999940000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(-1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_f64_s", args: [I64(17293822569102705664)] }, [I64(17293822569102705664)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(2147483648), I32(1)] }, [I32(3221225472)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value-index", args: [I32(3)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(100000000000000000000.0), F32(100000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_f64_u", args: [I64(9007199254740992)] }, [I64(9007199254740992)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(1073741824), I32(1)] }, [I32(536870912)])
test run_conversions ... ok
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value-index", args: [I32(4293967296)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(1), I32(32)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_f64_u", args: [I64(9007199254740993)] }, [I64(9007199254740992)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(10000000000000000000000000.0), F32(10000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I64(9223372036854775808), I64(2)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(-6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(1), I32(33)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_f64_u", args: [I64(17293822569102705664)] }, [I64(17293822569102704640)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-value-index", args: [I32(9423975)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(1000000000000000.0), F64(1000000000000000.0)] }, [F64(1000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(1), I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I64(10371807465568210928), I64(4294967297)] }, [I64(2147483649)])
run assertion Return(Invoke { mod_ref: None, func: "nested-br_table-loop-block", args: [I32(1)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(100000000000000000000.0), F64(100000000000000000000.0)] }, [F64(10000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(1), I32(2147483647)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I64(9223372036854775809), I64(1000)] }, [I64(809)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 64, 65, 1, 14, 0, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I64(5), I64(2)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(10000000000000000000000000.0), F64(10000000000000000000000000.0)] }, [F64(100000000000000030000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(1), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(-6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I64(18446744073709551611), I64(2)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(-0.5)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I64(5), I64(18446744073709551614)] }, [I64(5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(1848874900.0), F32(19954563000.0)] }, [F32(36893493000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I64(18446744073709551611), I64(18446744073709551614)] }, [I64(18446744073709551611)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 14, 0, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(2147483648), I32(31)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(0.5)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I64(7), I64(3)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I64(11), I64(5)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(4294967295), I32(32)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(1848874847.0), F64(19954562207.0)] }, [F64(36893488147419110000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(-0.5)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 127, 1, 65, 1, 14, 0, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "empty", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(4294967295), I32(33)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "empty", args: [I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(77.1), F32(850.0)] }, [F32(65535.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(0.5)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rem_u", args: [I64(17), I64(7)] }, [I64(3)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(4294967295), I32(4294967295)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(4294967295), I32(2147483647)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "empty", args: [I32(100)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(77.1), F64(850.0)] }, [F64(65534.99999999999)])
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I64(1), I64(0)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 127, 66, 1, 65, 1, 14, 2, 0, 0, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I32(4294967295), I32(2147483648)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(-2493839400000000000.0), F32(0.000000000021176054)] }, [F32(-52809680.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_sub", args: [F32(0.000000000000012138282), F32(-0.000000020946384)] }, [F32(0.000000000000012434498)])
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I64(0), I64(1)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "empty", args: [I32(4294967294)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_sub", args: [F32(-0.00000019768197), F32(0.0000037154566)] }, [F32(-0.00000019768208)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 154, 128, 128, 128, 0, 1, 148, 128, 128, 128, 0, 0, 2, 64, 2, 125, 67, 0, 0, 0, 0, 65, 0, 14, 1, 0, 1, 11, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I64(1), I64(1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(-6777248400000000000000000000000.0), F32(-0.00000000000000000000000000000034758242)] }, [F32(2.3556523)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "singular", args: [I32(0)] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I64(0), I64(0)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(1), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(1), I32(0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 64, 1, 14, 2, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "singular", args: [I32(1)] }, [I32(7)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(-8384397600000000000000000000.0), F32(-0.000000000000000000000000000011948991)] }, [F32(0.10018509)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I64(9223372036854775807), I64(9223372036854775808)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(-6.283185307179586)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(4294967295), I32(1)] }, [I32(2147483647)])
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I64(9223372036854775807), I64(18446744073709551615)] }, [I64(9223372036854775807)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "singular", args: [I32(10)] }, [I32(7)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_sub", args: [F32(-9596213000000000000000000.0), F32(-3538041400000000000000000000000.0)] }, [F32(-9671407000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I64(4042326015), I64(4294963440)] }, [I64(4042322160)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(-656765400000000000000000.0), F32(-0.000000000000000000000046889766)] }, [F32(30.795576)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(6.283185307179586)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(2147483647), I32(1)] }, [I32(1073741823)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 2, 64, 66, 0, 14, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "singular", args: [I32(4294967286)] }, [I32(7)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(13328204000000000.0), F32(45.567223)] }, [F32(607329200000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_sub", args: [F32(0.000000000000000000000005054346), F32(0.000000000000000024572656)] }, [F32(0.0000000000000000000000049630837)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "multi", args: [I32(0)] }, [I32(9)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "and", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(-6.283185307179586)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "multi", args: [I32(1)] }, [I32(8)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-99426226093342430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(583177241514245140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_sub", args: [F32(-0.0000000000000000000000000000000033693147), F32(-0.000000000000000000000000071014917)] }, [F32(-0.000000000000000000000000000000006162976)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(6.283185307179586)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I64(1), I64(0)] }, [I64(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 127, 65, 0, 1, 14, 1, 0, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(2147483648), I32(1)] }, [I32(1073741824)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(1073741824), I32(1)] }, [I32(536870912)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 2, 127, 65, 0, 2, 64, 65, 0, 14, 0, 1, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(1), I32(32)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I64(0), I64(1)] }, [I64(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(1), I32(33)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I64(1), I64(1)] }, [I64(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(1), I32(4294967295)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 2, 127, 65, 0, 66, 0, 14, 1, 0, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002748155824301909), F64(-0.000000000000000000000000000000000000000000000000000000000000000002093035437779455)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I64(0), I64(0)] }, [I64(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "multi", args: [I32(13)] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_sub", args}, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008445702651873978)])
run assertion Return(Invoke { mod_ref: None, func: "print32", args: [I32(13)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(464888257371302500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-159272886487254360000000000000000.0)] }, [F64(-74044094645556960000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
I32(13)
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I64(9223372036854775807), I64(9223372036854775808)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "multi", args: [I32(4294967291)] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008198798715927055), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004624035606110903)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008198798715897085)])
I32(14)
F32(42.0)
run assertion Return(Invoke { mod_ref: None, func: "nested", args: [I32(0), I32(0)] }, [I32(11)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(1), I32(2147483647)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 64, 65, 1, 14, 0, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_sub", args: [F64(-0.0000000013604511322066714), F64(-0.1751431740707098)] }, [F64(-0.0000000013604511406306585)])
I32(13)
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I64(9223372036854775808), I64(0)] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "nested", args: [I32(1), I32(0)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(1), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008261927764172427), F64(36684744190529535000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-3030867065492991300000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I64(4042326015), I64(4294963440)] }, [I64(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(2147483648), I32(31)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_sub", args: [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003944335437865966), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001663809741322667)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000039443355500325104)])
run assertion Return(Invoke { mod_ref: None, func: "or", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(4294967295), I32(32)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I64(1), I64(0)] }, [I64(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 151, 128, 128, 128, 0, 1, 145, 128, 128, 128, 0, 0, 2, 64, 65, 0, 65, 0, 4, 127, 14, 0, 0, 11, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_sub", args: [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005078309818866), F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010790431644461104)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000507831047937567)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [I32(1)])
I32(13)
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I64(0), I64(1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(4294967295), I32(33)] }, [I32(2147483647)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args}, [F64(0.00000000000000000019908317594263248)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I64(1), I64(1)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(4294967295), I32(4294967295)] }, [I32(1)])
F32(13.0)
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 153, 128, 128, 128, 0, 1, 147, 128, 128, 128, 0, 0, 2, 64, 65, 0, 65, 0, 4, 127, 65, 1, 14, 0, 0, 11, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
I32(13)
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(-0.0000000000000000000000000020153333), F32(-5031353000000000000000000000.0)] }, [F32(10.139854)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(4294967295), I32(2147483647)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "nested", args: [I32(0), I32(1)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I64(0), I64(0)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "print64", args: [I64(24)] }, [])
F64(25.0)
F64(53.0)
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I64(9223372036854775807), I64(9223372036854775808)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(12286325000000000000000.0), F32(749601.8)] }, [F32(9209852000000000000000000000.0)])
F64(24.0)
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 127, 14, 0, 0, 15, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I64(9223372036854775808), I64(0)] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-1.0)])
F64(24.0)
run assertion Return(Invoke { mod_ref: None, func: "nested", args: [I32(3), I32(2)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I64(18446744073709551615), I64(9223372036854775808)] }, [I64(9223372036854775807)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I32(4294967295), I32(2147483648)] }, [I32(4294967295)])
F64(24.0)
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(-0.0000000002763514), F32(-35524714000000000000000.0)] }, [F32(9817304000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 127, 65, 1, 14, 0, 0, 15, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I32(1), I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_sub_add", args: [F32(-676.47437), F32(403.0368)] }, [F32(-676.4744)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(218931220000000000000.0), F32(-40298.785)] }, [F32(-8822662000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 64, 65, 1, 14, 1, 2, 1, 11, 11]), "unknown label")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I64(18446744073709551615), I64(9223372036854775807)] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I32(1), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "nested", args: [I32(0), I32(4294967196)] }, [I32(10)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(1691996300.0), F32(-122103350000000000000.0)] }, [F32(-206598410000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I64(4042326015), I64(4294963440)] }, [I64(252645135)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 64, 2, 64, 65, 1, 14, 1, 0, 5, 11, 11, 11]), "unknown label")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 2, 141, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 4, 102, 117, 110, 99, 0, 1]), "unknown type")
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I32(4294967295), I32(1)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_sub_add", args: [F32(-0.0000000000000000000000000000000006305943), F32(0.0000000000000000000000000000367186)] }, [F32(-0.00000000000000000000000000000000063194576)])
run assertion Return(Invoke { mod_ref: None, func: "nested", args: [I32(10), I32(10)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_sub_add", args: [F32(83184800.0), F32(46216217000.0)] }, [F32(83185660.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 64, 65, 1, 14, 2, 0, 129, 128, 128, 128, 1, 0, 11, 11]), "unknown label")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754942)])
run assertion Return(Invoke { mod_ref: None, func: "nested", args: [I32(0), I32(4294967295)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(-inf)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I32(1), I32(32)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "xor", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 64, 65, 1, 14, 1, 1, 2, 11, 11]), "unknown label")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_sub_add", args: [F32(0.000000000002211957), F32(-0.00000001043793)] }, [F32(0.0000000000022115643)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "nested", args: [I32(4294967185), I32(4294967294)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(inf)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I32(2882377846), I32(1)] }, [I32(1469788397)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754945)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(-inf)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I64(1), I64(1)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_sub_add", args: [F32(0.14944395), F32(-27393.65)] }, [F32(0.15039063)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I32(4261469184), I32(4)] }, [I32(3758997519)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 64, 2, 64, 65, 1, 14, 1, 0, 5, 11, 11, 11]), "unknown label")
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I32(2965492451), I32(5)] }, [I32(406477942)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(inf)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I64(1), I64(0)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754945)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007576316076452304), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004601355879514986)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003486132652344772)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_sub_add", args: [F64(90365982617946240000000000000000000000000000000000000000000000000000000000000.0), F64(-958186427535552000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(90365982617946280000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-mid", args: [I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I32(32768), I32(37)] }, [I32(1048576)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(NaN)] }, [F64(-1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 64, 65, 1, 14, 2, 0, 0, 129, 128, 128, 128, 1, 11, 11]), "unknown label")
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I64(9223372036854775807), I64(1)] }, [I64(18446744073709551614)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_sub_add", args: [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044230403564658815), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026713491049366576)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004423040356647721)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754942)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-mid", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-1.0), F64(NaN)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_sub_add", args: [F64(4095348452776429000000000000000000000000000000000000000000000000000000000000.0), F64(-4050190019576568700000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(4070815637249397500000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-select-last", args: [I32(0)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I64(18446744073709551615), I64(1)] }, [I64(18446744073709551614)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(NaN)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-last", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I64(9223372036854775808), I64(1)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I32(2965492451), I32(65285)] }, [I32(406477942)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000012228616081443885), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008055526185180067)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009850793705258527)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(-0.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I64(4611686018427387904), I64(1)] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I32(1989852383), I32(4294967277)] }, [I32(1469837011)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(-1.0)] }, [I32(0)])
test run_br_table ... ok
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(0.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(1.0), F64(NaN)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-first", args: [I32(0)] }, [I32(0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 144, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 7, 117, 110, 107, 110, 111, 119, 110, 0, 0]), "unknown import")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_sub_add", args: [F64(0.000000024008889207554433), F64(-0.00017253797929188484)] }, [F64(0.00000002400888920756506)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-2068651246039250800000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-366801071583254800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(-0.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I32(1989852383), I32(2147483661)] }, [I32(1469837011)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(-0.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(0.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I64(1), I64(63)] }, [I64(9223372036854775808)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 148, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 7, 117, 110, 107, 110, 111, 119, 110, 0, 0]), "unknown import")
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I32(1), I32(31)] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_sub_add", args: [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043367542918305866), F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000039597706708227122)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004336754291830597)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-first", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(1543238835610281000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007370621385787007)] }, [F64(1137462916512617700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I64(1), I64(64)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(1.0)] }, [I32(0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 2, 141, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 4, 102, 117, 110, 99, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028857)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I32(2147483648), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-mid", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I64(1), I64(65)] }, [I64(2)])
test run_inline_module ... ok
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-mid", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(0.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I32(1), I32(1)] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(-0.0)] }, [F64(-6.283185307179586)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 2, 141, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 4, 102, 117, 110, 99, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I64(1), I64(18446744073709551615)] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I32(1), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(0.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028857)])
run assertion Return(Invoke { mod_ref: None, func: "shl", args: [I64(1), I64(9223372036854775807)] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I32(4294967295), I32(1)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_div", args: [F32(-32476715000000000.0), F32(0.000000000000010121375)] }, [F32(-32476713000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(2235876566242058700000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-760669005920257000000000000000000000000000000000000.0)] }, [F64(-1700762005003744000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I32(1), I32(32)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(1), I64(1)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-last", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I32(4278242304), I32(1)] }, [I32(2139121152)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_div", args: [F32(-0.000000015561163), F32(0.000000000000000000000000000000015799828)] }, [F32(-0.000000015561145)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(1), I64(0)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(-110087030000000.0), F32(-54038020000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-last", args: [I32(1)] }, [I32(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 127, 2, 141, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 4, 102, 117, 110, 99, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(18446744073709551615), I64(1)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I32(524288), I32(4)] }, [I32(32768)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-condition", args: [I32(0)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102884)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_div", args: [F32(-0.00000000000000676311), F32(-441324000000000.0)] }, [F32(-0.0000000000000067631096)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-condition", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(-0.19366351), F32(0.0000000000000000000000000000029748954)] }, [F32(-0.0000000000000000000000000000005761287)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_div", args: [F32(7505613700000000.0), F32(-2160384100000000000.0)] }, [F32(7505613000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(9223372036854775807), I64(1)] }, [I64(4611686018427387903)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-first", args: [I32(0)] }, [I32(0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 145, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 8, 102, 117, 110, 99, 45, 105, 51, 50, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-first", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(-0.0000034300713), F32(77991523000000000000000000000000.0)] }, [F32(-267516490000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(9223372036854775808), I64(1)] }, [I64(13835058055282163712)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102884)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_div", args: [F32(-0.0000000000000000000000000002362576), F32(-0.000000000010808759)] }, [F32(-0.00000000000000000000000000023625765)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_cmp_s_offset", args: [I32(2147483647), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-last", args: [I32(0)] }, [I32(3)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 2, 145, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 8, 102, 117, 110, 99, 45, 105, 51, 50, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_cmp_u_offset", args: [I32(4294967295), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-last", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(4611686018427387904), I64(1)] }, [I64(2305843009213693952)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(-99003850000000000.0), F32(0.000000000000000000000000000020933774)] }, [F32(-0.0000000000020725242)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-first", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_div", args: [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013532103713575586), F64(-0.00000000000000000000000000000000000000000000000000000000000003347836467564916)] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013532103713672434)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(1), I64(64)] }, [I64(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 125, 0, 2, 145, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 8, 102, 117, 110, 99, 45, 105, 51, 50, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_cmp_s_offset", args: [I64(9223372036854775807), I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-first", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(1), I64(65)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_cmp_u_offset", args: [I64(18446744073709551615), I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-last", args: [I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(-129919.07), F32(0.0000000000000000000000000000000000018480999)] }, [F32(-0.00000000000000000000000000000024010342)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_div", args: [F64(77662174313180845000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(195959155606939530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(77662174313180850000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(1), I64(18446744073709551615)] }, [I64(0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 126, 0, 2, 145, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 8, 102, 117, 110, 99, 45, 105, 51, 50, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006625572200844895), F64(-37374020681740010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.00000000000000000024762427246273877)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_div", args: [F64(-718011781190294800000000000000000000000000000000000000000000000000000000.0), F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009320036042623636)] }, [F64(-718011781190294750000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(1), I64(9223372036854775807)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(1), I64(9223372036854775808)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(821076848561758000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012976552328552289)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000010654746691124455)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 127, 2, 145, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 8, 102, 117, 110, 99, 45, 105, 51, 50, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_wrap_extend_s", args: [I64(4538991236898928)] }, [I64(1079009392)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(9223372036854775808), I64(63)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-last", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_wrap_extend_s", args: [I64(45230338458316960)] }, [I64(18446744072918986912)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(18446744073709551615), I64(64)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_div", args: [F64(0.000000000000000000000000000000000000000000000000017260010724693063), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003568792428129926)] }, [F64(0.00000000000000000000000000000000000000000000000001661286799244216)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-6.283185307179586)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 146, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 9, 102, 117, 110, 99, 45, 62, 105, 51, 50, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(18446744073709551615), I64(65)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-10223449294906041000000000000000000000000000000000000.0), F64(1970855583334680500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-20148942123804574000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_div", args: [F64(-9145223045828962000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005562094034342845)] }, [F64(-9145223045828963000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 2, 146, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 9, 102, 117, 110, 99, 45, 62, 105, 51, 50, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(2918243080119086000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-63633170941689700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(18446744073709551615), I64(9223372036854775807)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "shr_s", args: [I64(18446744073709551615), I64(9223372036854775808)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(3407037798802672000000000.0), F64(1225791423971563000000.0)] }, [F64(4176317714919266400000000000000000000000000000.0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 2, 146, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 9, 102, 117, 110, 99, 45, 62, 105, 51, 50, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_wrap_extend_u", args: [I64(4538991236898928)] }, [I64(1079009392)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(1), I64(1)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(1), I64(0)] }, [I64(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 2, 146, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 9, 102, 117, 110, 99, 45, 62, 105, 51, 50, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(18446744073709551615), I64(1)] }, [I64(9223372036854775807)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044091927284399547), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011518840702296592)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005078878866462432)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(-0.5)] }, [F64(-6.783185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(9223372036854775807), I64(1)] }, [I64(4611686018427387903)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_mul", args: [F32(-511517980000.0), F32(986062200.0)] }, [F32(-511517950000.0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 127, 2, 146, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 9, 102, 117, 110, 99, 45, 62, 105, 51, 50, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I32(2965492451), I32(5)] }, [I32(495324823)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(9223372036854775808), I64(1)] }, [I64(4611686018427387904)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-0.002980041826472432), F64(63125412993218000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-188116371033135940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_mul", args: [F32(-0.00000000000000024944853), F32(-0.0000041539834)] }, [F32(-0.00000000000000024944856)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(4611686018427387904), I64(1)] }, [I64(2305843009213693952)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(0.5)] }, [F64(-5.783185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [I32(1)] }, [I32(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 150, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 13, 102, 117, 110, 99, 45, 105, 51, 50, 45, 62, 105, 51, 50, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I32(32768), I32(37)] }, [I32(1024)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_mul", args: [F32(0.000000000000000000000000000000000000020827855), F32(-235.19847)] }, [F32(0.000000000000000000000000000000000000020828013)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I32(2965492451), I32(65285)] }, [I32(495324823)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 2, 150, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 13, 102, 117, 110, 99, 45, 105, 51, 50, 45, 62, 105, 51, 50, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_shl_shr_s", args: [I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-308344578081300100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010081049555008529)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000031084369716557833)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I32(1989852383), I32(4294967277)] }, [I32(3875255509)])
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_shl_shr_u", args: [I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(-0.5)] }, [F64(5.783185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_mul", args: [F32(-0.000000000000000000000062499487), F32(-696312600000000000.0)] }, [F32(-0.00000000000000000000006249919)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(-0.5)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(349387501315677300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(2131316915930809900.0)] }, [F64(744655491768901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I32(1989852383), I32(2147483661)] }, [I32(3875255509)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(1), I64(64)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(0.5)] }, [F64(6.283185307179586)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 2, 150, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 13, 102, 117, 110, 99, 45, 105, 51, 50, 45, 62, 105, 51, 50, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_mul", args: [F32(0.0000000000000000000000000000058353514), F32(212781120.0)] }, [F32(0.000000000000000000000000000005835352)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(0.5)] }, [F64(6.783185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I32(1), I32(31)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(1), I64(65)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_shl_shr_s", args: [I64(9223372036854775808)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000012500108005100234), F64(1035265704160467500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-12940933115981990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(-0.5)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(-1.0)] }, [F64(-7.283185307179586)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [I32(1)] }, "undefined element")
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(1), I64(18446744073709551615)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-first", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(1.0)] }, [F64(-5.283185307179586)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 2, 147, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 10, 103, 108, 111, 98, 97, 108, 45, 105, 51, 50, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_shl_shr_u", args: [I64(9223372036854775808)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(-1.0)] }, [F64(5.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(0.5)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I32(2147483648), I32(31)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(1), I64(9223372036854775807)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-first", args: [I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(-1.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(1.0)] }, [F64(7.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_mul", args: [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035984644259935362), F64(-28812263298033320000000000000000000000000000000000000000.0)] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035985034356565485)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-last", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(1.0)] }, [F64(6.283185307179586)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 149, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 12, 116, 97, 98, 108, 101, 45, 49, 48, 45, 105, 110, 102, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008947461661755698), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020853844141312436)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018658897095462173)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(-1.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(1), I64(9223372036854775808)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-last", args: [I32(1)] }, [])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I32(0)] }, [I32(32)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(1.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017486367047479447), F64(0.00000000000000016508738454798636)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001748636704747945)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(-6.283185307179586)] }, [F64(-12.566370614359172)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(9223372036854775808), I64(63)] }, [I64(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 149, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 12, 109, 101, 109, 111, 114, 121, 45, 50, 45, 105, 110, 102, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-value", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(6.283185307179586)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I32(32768)] }, [I32(16)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_mul", args: [F64(-0.00000000000000000000000000000000000000000003140341989542684), F64(942829809081919600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.000000000000000000000000000000000000000000031403419895426836)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(18446744073709551615), I64(64)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I32(255)] }, [I32(24)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-value", args: [I32(1)] }, [I32(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 151, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 10, 103, 108, 111, 98, 97, 108, 95, 105, 51, 50, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(18446744073709551615), I64(65)] }, [I64(9223372036854775807)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000003919745428533519), F64(-21314747179654705000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000039197454285335185)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(-6.283185307179586)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I32(1)] }, [I32(31)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028847)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I64(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 146, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 5, 116, 97, 98, 108, 101, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_mul", args}, [F64(-5734160003788981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I32(2)] }, [I32(30)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(6.283185307179586)] }, [F64(12.566370614359172)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I32(2147483647)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-0.00000000000000001161813037330394), F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018737038135583668)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021768935186877886)])
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(18446744073709551615), I64(9223372036854775807)] }, [I64(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ctz", args: [I32(4294967295)] }, [I32(0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 147, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 6, 109, 101, 109, 111, 114, 121, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "shr_u", args: [I64(18446744073709551615), I64(9223372036854775808)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "ctz", args: [I32(0)] }, [I32(32)])
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_shr_s_shl", args: [I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I64(1), I64(1)] }, [I64(2)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I64(1), I64(0)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I64(18446744073709551615), I64(1)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021752326768352433), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006631210068072052)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014424424827029184)])
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_shr_u_shl", args: [I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ctz", args: [I32(32768)] }, [I32(15)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I64(1), I64(64)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_shr_s_shl", args: [I64(1)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ctz", args: [I32(65536)] }, [I32(16)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I64(12379718583323101902), I64(1)] }, [I64(6312693092936652189)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_shr_u_shl", args: [I64(1)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ctz", args: [I32(2147483648)] }, [I32(31)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div2_mul2", args: [F32(0.000000000000000000000000000000000000023509886)] }, [F32(0.000000000000000000000000000000000000023509887)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I64(18302628889324683264), I64(4)] }, [I64(16140901123551657999)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ctz", args: [I32(2147483647)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007149518157441743), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000022770445062365393)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001627977104264113)])
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I32(4294967295)] }, [I32(32)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I64(12379570969274382345), I64(53)] }, [I64(87109505680009935)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I64(12380715672649826460), I64(63)] }, [I64(6190357836324913230)])
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I32(32768)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I32(2147516416)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I64(12379570969274382345), I64(245)] }, [I64(87109505680009935)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I32(2147483647)] }, [I32(31)])
run assertion Return(Invoke { mod_ref: None, func: "get-0", args: [] }, [I32(666)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I32(2863311530)] }, [I32(16)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004817739302150786), F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025375023049719763)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012225024583961697)])
run assertion Return(Invoke { mod_ref: None, func: "get-1", args: [] }, [I32(666)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I32(1431655765)] }, [I32(16)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I64(12379676934707509257), I64(18446744073709551597)] }, [I64(14916262237559758314)])
run assertion Return(Invoke { mod_ref: None, func: "get-x", args: [] }, [I32(666)])
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I32(3735928559)] }, [I32(24)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eqz", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "get-y", args: [] }, [I32(666)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I64(12380715672649826460), I64(9223372036854775871)] }, [I64(6190357836324913230)])
run assertion Return(Invoke { mod_ref: None, func: "eqz", args: [I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_div_s_mul", args: [I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div2_mul2", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044501477170144023)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403)])
run assertion Return(Invoke { mod_ref: None, func: "eqz", args: [I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I64(1), I64(63)] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_div_u_mul", args: [I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args}, [F64(0.000000003270292605938992)])
run assertion Return(Invoke { mod_ref: None, func: "eqz", args: [I32(2147483647)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_div_s_mul", args: [I64(1)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "rotl", args: [I64(9223372036854775808), I64(1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eqz", args: [I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_div_u_mul", args: [I64(1)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(0.012451716278313712), F64(0.000000000000000000000000000000000000000000001945309177849331)] }, [F64(0.00000000000000000000000000000000000000000000002422243795617958)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I64(1), I64(1)] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I32(0), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I64(1), I64(0)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-value", args: [] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-3.8312314777598586), F64(0.0000000000009039887741742674)] }, [F64(-0.0000000000034633902471580017)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I64(18446744073709551615), I64(1)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I32(1), I32(1)] }, [I32(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 145, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 7, 117, 110, 107, 110, 111, 119, 110, 3, 127, 0]), "unknown import")
run assertion Return(Invoke { mod_ref: None, func: "as-drop-operand", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I64(1), I64(64)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I32(4294967295), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009843582638849689), F64(0.00000000000000000000000000000000000000000000000000000000000003375405654777583)] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033226084502443684)])
run assertion Return(Invoke { mod_ref: None, func: "no_fold_demote_promote", args: [F64(-0.00000000000000000000000000000000000000017176297220569481)] }, [F64(-0.00000000000000000000000000000000000000017176275796615013)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 149, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 7, 117, 110, 107, 110, 111, 119, 110, 3, 127, 0]), "unknown import")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I32(2147483648), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I64(12379718583323101902), I64(1)] }, [I64(6189859291661550951)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [I32(1)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "no_fold_demote_promote", args: [F64(-0.000000000000000000000000028464775573304055)] }, [F64(-0.00000000000000000000000002846477619188087)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I32(2147483647), I32(2147483647)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(-260544537094514460000000.0), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000032887528185809035)] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000008568665807354412)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 142, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 4, 102, 117, 110, 99, 3, 127, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I64(18302628889324683264), I64(4)] }, [I64(1143914305582792704)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [I32(1)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "no_fold_demote_promote", args: [F64(208970699699909230000000000000000.0)] }, [F64(208970700445326000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I32(4294967295), I32(4294967295)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(0.00000000000000000000002646978), F32(0.00000000000000000000002646978)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I64(12379570969274382345), I64(53)] }, [I64(7534987797011123550)])
run assertion Return(Invoke { mod_ref: None, func: "no_fold_demote_promote", args: [F64(-0.0000000000000000000000000047074160416121775)] }, [F64(-0.0000000000000000000000000047074161331556024)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 150, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 12, 116, 97, 98, 108, 101, 45, 49, 48, 45, 105, 110, 102, 3, 127, 0]), "incompatible import type")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I64(12380715672649826460), I64(63)] }, [I64(6314687271590101305)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I32(1), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.no_fold_div_s_self", args: [I32(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "as-binary-operand", args: [] }, [I32(36)])
run assertion Return(Invoke { mod_ref: None, func: "no_fold_demote_promote", args: [F64(23359451497950880000000000000000.0)] }, [F64(23359452224542198000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(0.000000000000000000000026469783), F32(0.000000000000000000000026469783)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I32(0), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I64(12379570969274382345), I64(245)] }, [I64(7534987797011123550)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 150, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 12, 109, 101, 109, 111, 114, 121, 45, 50, 45, 105, 110, 102, 3, 127, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-operand", args: [] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.no_fold_div_u_self", args: [I32(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015717277847026285), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015717277847026285)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I64(12379676934707509257), I64(18446744073709551597)] }, [I64(10711665151168044651)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.no_fold_div_s_self", args: [I64(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 151, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 9, 112, 114, 105, 110, 116, 95, 105, 51, 50, 3, 127, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(0.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 137, 128, 128, 128, 0, 1, 125, 0, 67, 0, 0, 0, 0, 11, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 67, 0, 0, 128, 63, 36, 0, 11]), "global is immutable")
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I64(12380715672649826460), I64(9223372036854775871)] }, [I64(6314687271590101305)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.no_fold_div_u_self", args: [I64(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "no_fold_promote_demote", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I64(1), I64(63)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 147, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 5, 116, 97, 98, 108, 101, 3, 127, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015717277847026288), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015717277847026288)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "no_fold_promote_demote", args: [F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "rotr", args: [I64(9223372036854775808), I64(63)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 148, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 6, 109, 101, 109, 111, 114, 121, 3, 127, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "no_fold_promote_demote", args: [F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I64(18446744073709551615)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(18446743000000000000.0), F32(18446743000000000000.0)] }, [F32(340282330000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I64(0)] }, [I64(64)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000011754942)])
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I64(32768)] }, [I64(48)])
run assertion Return(Invoke { mod_ref: None, func: "no_fold_promote_demote", args: [F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(18446744000000000000.0), F32(18446744000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I64(255)] }, [I64(56)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 138, 128, 128, 128, 0, 1, 125, 0, 67, 0, 0, 0, 0, 140, 11]), "constant expression required")
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I64(9223372036854775808)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000011754945)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "no_fold_promote_demote", args: [F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I64(1)] }, [I64(63)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 134, 128, 128, 128, 0, 1, 125, 0, 32, 0, 11]), "constant expression required")
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.no_fold_rem_s_self", args: [I32(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I32(2147483648), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000011754945)])
run assertion Return(Invoke { mod_ref: None, func: "no_fold_promote_demote", args: [F32(0.000000000000000000000000000000000000011754942)] }, [F32(0.000000000000000000000000000000000000011754942)])
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I64(2)] }, [I64(62)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.no_fold_rem_u_self", args: [I32(0)] }, "integer divide by zero")
run assertion TrapAction(Invoke { mod_ref: None, func: "call", args: [I32(0)] }, "uninitialized element")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I32(0), I32(2147483648)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 138, 128, 128, 128, 0, 1, 125, 0, 67, 0, 0, 128, 63, 140, 11]), "constant expression required")
run assertion Return(Invoke { mod_ref: None, func: "clz", args: [I64(9223372036854775807)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "no_fold_promote_demote", args: [F32(-0.000000000000000000000000000000000000011754942)] }, [F32(-0.000000000000000000000000000000000000011754942)])
run assertion Return(Invoke { mod_ref: None, func: "call", args: [I32(1)] }, [I32(11)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.no_fold_rem_s_self", args: [I64(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I32(2147483648), I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000011754942)])
run assertion Return(Invoke { mod_ref: None, func: "call", args: [I32(2)] }, [I32(22)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.no_fold_rem_u_self", args: [I64(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I32(4294967295), I32(2147483648)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "call", args: [I32(3)] }, "uninitialized element")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 135, 128, 128, 128, 0, 1, 127, 0, 65, 0, 1, 11]), "constant expression required")
run assertion Return(Invoke { mod_ref: None, func: "no_fold_promote_demote", args: [F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ctz", args: [I64(18446744073709551615)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(13407807929942596000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(13407807929942596000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "call", args: [I32(100)] }, "undefined element")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 133, 128, 128, 128, 0, 1, 127, 0, 1, 11]), "constant expression required")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I32(2147483648), I32(2147483647)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ctz", args: [I64(0)] }, [I64(64)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 137, 128, 128, 128, 0, 1, 127, 0, 67, 0, 0, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I32(2147483647), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ctz", args: [I64(32768)] }, [I64(15)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(13407807929942597000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(13407807929942597000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I32(0), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "no_fold_promote_demote", args: [F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ctz", args: [I64(65536)] }, [I64(16)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 136, 128, 128, 128, 0, 1, 127, 0, 65, 0, 65, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(1.0000001), F32(1.0000001)] }, [F32(1.0000002)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I32(1), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002409919865102885)])
run assertion Return(Invoke { mod_ref: None, func: "ctz", args: [I64(9223372036854775808)] }, [I64(63)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(0.99999994), F32(0.99999994)] }, [F32(0.9999999)])
run assertion Return(Invoke { mod_ref: None, func: "no_fold_promote_demote", args: [F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I32(4294967295), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ctz", args: [I64(9223372036854775807)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 132, 128, 128, 128, 0, 1, 127, 0, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "call", args: [I32(0)] }, "uninitialized element")
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(1.0000000000000002), F64(1.0000000000000002)] }, [F64(1.0000000000000004)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000023509887)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I32(2147483648), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "call", args: [I32(1)] }, [I32(11)])
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I64(18446744073709551615)] }, [I64(64)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "no_fold_promote_demote", args: [F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "call", args: [I32(2)] }, [I32(22)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028857)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I32(2147483647), I32(2147483647)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_mul_div_s", args: [I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I64(0)] }, [I64(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "call", args: [I32(3)] }, "uninitialized element")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I32(4294967295), I32(4294967295)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(0.9999999999999999), F64(0.9999999999999999)] }, [F64(0.9999999999999998)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I32(1), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000023509887)])
run assertion Return(Invoke { mod_ref: None, func: "no_fold_promote_demote", args: [F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I64(32768)] }, [I64(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "call", args: [I32(100)] }, "undefined element")
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_mul_div_u", args: [I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(1.0000001), F32(0.99999994)] }, [F32(1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 134, 128, 128, 128, 0, 1, 127, 0, 35, 0, 11]), "unknown global")
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I64(9223512776490647552)] }, [I64(4)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 141, 128, 128, 128, 0, 2, 0, 0, 1, 112, 0, 10, 0, 0, 1, 112, 0, 10]), "multiple tables")
run assertion Return(Invoke { mod_ref: None, func: "no_fold_promote_demote", args: [F32(-inf)] }, [F32(-inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I64(9223372036854775807)] }, [I64(63)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_mul_div_s", args: [I64(9223372036854775808)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-value", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(1.0000002), F32(0.9999999)] }, [F32(1.0000001)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(-0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 139, 128, 128, 128, 0, 2, 127, 0, 35, 1, 11, 127, 0, 65, 0, 11]), "unknown global")
run assertion Return(Invoke { mod_ref: None, func: "as-call-value", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args}, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 135, 128, 128, 128, 0, 1, 0, 0, 1, 112, 0, 10, 4, 132, 128, 128, 128, 0, 1, 112, 0, 10]), "multiple tables")
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I64(12297829381041378645)] }, [I64(32)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024099198651028857)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [I32(1)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 135, 128, 128, 128, 0, 2, 112, 0, 10, 112, 0, 10]), "multiple tables")
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I64(11068046444512062122)] }, [I64(32)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(1.0000000000000002), F64(0.9999999999999999)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I32(0), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_mul_div_u", args: [I64(9223372036854775808)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(1.0000000000000004), F64(0.9999999999999998)] }, [F64(1.0000000000000002)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 152, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 10, 103, 108, 111, 98, 97, 108, 95, 105, 51, 50, 3, 127, 2]), "invalid mutability")
run assertion Return(Invoke { mod_ref: None, func: "as-drop-operand", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I32(2147483648), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(5357543035931337000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [F32(0.5)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 152, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 10, 103, 108, 111, 98, 97, 108, 95, 105, 51, 50, 3, 127, 255]), "invalid mutability")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I32(0), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-drop-operand", args: [I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "popcnt", args: [I64(16045690984833335023)] }, [I64(48)])
run assertion Return(Invoke { mod_ref: None, func: "no_demote_mixed_add", args: [F64(0.00000000000000000000000000004941266527909197), F32(0.0000000000000000000000000000000000018767183)] }, [F32(0.000000000000000000000000000049412667)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I32(2147483648), I32(4294967295)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.00000011920929)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eqz", args: [I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I32(4294967295), I32(2147483648)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "no_demote_mixed_add", args: [F64(140851523637.69385), F32(401096440000.0)] }, [F32(541947950000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 134, 128, 128, 128, 0, 1, 127, 2, 65, 0, 11]), "invalid mutability")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [F32(1.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 6, 134, 128, 128, 128, 0, 1, 127, 255, 65, 0, 11]), "invalid mutability")
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_div_s_2", args: [I32(4294967285)] }, [I32(4294967291)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I32(2147483648), I32(2147483647)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-5357543035931337000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eqz", args: [I64(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_div_s_2", args: [I64(18446744073709551605)] }, [I64(18446744073709551611)])
run assertion Return(Invoke { mod_ref: None, func: "no_demote_mixed_add", args: [F64(0.0000000000000000000000000000000000020831160914192852), F32(-0.0000000000000000000000000000000000006050095)] }, [F32(0.0000000000000000000000000000000000014781066)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I32(2147483647), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eqz", args: [I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0000000000000002220446049250313)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(-6.2831855)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 36, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.mul", args: [F32(-16.001465), F32(0.000000000000000000000000000000000000000298465)] }, [F32(-0.000000000000000000000000000000000000004775883)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eqz", args: [I64(9223372036854775807)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "no_demote_mixed_add", args: [F64(-0.0000010032827553674626), F32(0.0000000019312918)] }, [F32(-0.0000010013515)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I32(0), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(5357543035931338000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eqz", args: [I64(18446744073709551615)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(6.2831855)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 2, 64, 36, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(1.1234568), F32(100.0)] }, [F32(0.011234568)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I32(1), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "no_demote_mixed_add", args: [F64(-0.0000013840207035752711), F32(-0.0000000000005202814)] }, [F32(-0.0000013840212)])
run assertion Return(Invoke { mod_ref: None, func: "i32.no_fold_rem_s_2", args: [I32(4294967285)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I64(0), I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(8391667.0), F32(12582905.0)] }, [F32(0.6669102)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 3, 64, 36, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I64(1), I64(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I32(4294967295), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(65536.0), F32(0.000000000007275958)] }, [F32(9007199000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.no_fold_rem_s_2", args: [I64(18446744073709551605)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "no_demote_mixed_add_commuted", args: [F32(0.0000000000000000000000000000000000018767183), F64(0.00000000000000000000000000004941266527909197)] }, [F32(0.000000000000000000000000000049412667)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-5357543035931338000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I64(18446744073709551615), I64(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "no_demote_mixed_add_commuted", args: [F32(401096440000.0), F64(140851523637.69385)] }, [F32(541947950000.0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 146, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 7, 117, 110, 107, 110, 111, 119, 110, 1, 112, 0, 10]), "unknown import")
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(1.8622957), F32(340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000005472795)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [I32(0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 36, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I64(9223372036854775808), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I32(2147483648), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "no_demote_mixed_add_commuted", args: [F32(-0.0000000000000000000000000000000000006050095), F64(0.0000000000000000000000000000000000020831160914192852)] }, [F32(0.0000000000000000000000000000000000014781066)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(4.0), F32(3.0)] }, [F32(1.3333334)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 150, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 7, 117, 110, 107, 110, 111, 119, 110, 1, 112, 0, 10]), "unknown import")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I64(9223372036854775807), I64(9223372036854775807)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I32(2147483647), I32(2147483647)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [I32(1)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 127, 65, 0, 5, 36, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(1.123456789), F64(100.0)] }, [F64(0.01123456789)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 151, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 12, 116, 97, 98, 108, 101, 45, 49, 48, 45, 105, 110, 102, 1, 112, 0, 12]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "no_demote_mixed_add_commuted", args: [F32(0.0000000019312918), F64(-0.0000010032827553674626)] }, [F32(-0.0000010013515)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I32(4294967295), I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I64(1), I64(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(6.283185307179586)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 152, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 12, 116, 97, 98, 108, 101, 45, 49, 48, 45, 105, 110, 102, 1, 112, 1, 10, 20]), "incompatible import type")
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.div_s_0", args: [I32(71)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(5357543035931338000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I32(1), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "no_demote_mixed_add_commuted", args: [F32(-0.0000000000005202814), F64(-0.0000013840207035752711)] }, [F32(-0.0000013840212)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(inf)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.div_u_0", args: [I32(71)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(8391667.0), F64(12582905.0)] }, [F64(0.6669101451532854)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I64(0), I64(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 2, 64, 36, 0, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [I32(0)] }, [I32(0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 148, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 5, 116, 97, 98, 108, 101, 1, 112, 0, 12]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.div_s_0", args: [I64(71)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I32(0), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(65536.0), F64(0.000000000007275957614183426)] }, [F64(9007199254740992.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.div_u_0", args: [I64(71)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [I32(1)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 2, 64, 36, 0, 13, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-5357543035931338000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 149, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 5, 116, 97, 98, 108, 101, 1, 112, 1, 10, 15]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I32(2147483648), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-load-operand", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I32(0), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "no_demote_mixed_sub", args: [F64(7869935327202668000000000.0), F32(4086347000000000000.0)] }, [F32(7869931000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-load-operand", args: [I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I32(2147483648), I32(4294967295)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 2, 64, 36, 0, 14, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-6.283185307179586)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 143, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 4, 102, 117, 110, 99, 1, 112, 0, 10]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I32(4294967295), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "no_demote_mixed_sub", args: [F64(-1535841968.9056544), F32(239897.28)] }, [F32(-1536081900.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(5357543035931339000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I32(2147483648), I32(2147483647)] }, [I32(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 149, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 10, 103, 108, 111, 98, 97, 108, 45, 105, 51, 50, 1, 112, 0, 10]), "incompatible import type")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 36, 0, 15, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-0.5), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "no_demote_mixed_sub", args: [F64(-102.19459272722602), F32(0.00039426138)] }, [F32(-102.194984)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(1.8622957468032837), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001035936395755283)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I32(2147483647), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-operand", args: [I32(0), I32(0)] }, [I32(15)])
run assertion Return(Invoke { mod_ref: None, func: "i32.div_s_3", args: [I32(71)] }, [I32(23)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [I32(0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 151, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 12, 109, 101, 109, 111, 114, 121, 45, 50, 45, 105, 110, 102, 1, 112, 0, 10]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "no_demote_mixed_sub", args: [F64(0.00000000000000005645470375565188), F32(0.0000000000000000000005851077)] }, [F32(0.00000000000000005645412)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-5357543035931339000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I32(0), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(4.0), F64(3.0)] }, [F64(1.3333333333333333)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I64(9223372036854775808), I64(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 36, 0, 65, 1, 65, 2, 27, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(4195835.0), F32(3145727.0)] }, [F32(1.3338205)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "i32.div_s_3", args: [I32(1610612736)] }, [I32(536870912)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I32(1), I32(1)] }, [I32(0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 152, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 9, 112, 114, 105, 110, 116, 95, 105, 51, 50, 1, 112, 0, 10]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(-inf)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(4195835.0), F64(3145727.0)] }, [F64(1.333820449136241)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-operand", args: [I32(0), I32(1)] }, [I32(4294967284)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "no_demote_mixed_sub", args: [F64(27090.388466832894), F32(63120.89)] }, [F32(-36030.504)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "i32.div_u_3", args: [I32(71)] }, [I32(23)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-operand", args: [I32(1), I32(0)] }, [I32(4294967281)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(0.000000000000005029633), F32(336324380000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 0, 0, 96, 1, 127, 1, 127, 3, 131, 128, 128, 128, 0, 2, 0, 1, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 149, 128, 128, 128, 0, 2, 134, 128, 128, 128, 0, 0, 36, 0, 16, 1, 11, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(inf)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(4149515568880993000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I32(4294967295), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(0.5), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(0.000000000000000000000000008921987), F32(354097530000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-operand", args: [I32(1), I32(1)] }, [I32(12)])
run assertion Return(Invoke { mod_ref: None, func: "i32.div_u_3", args: [I32(3221225472)] }, [I32(1073741824)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I32(2147483648), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(-inf)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I64(0), I64(9223372036854775808)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-test-operand", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(-104167.47), F32(0.0000000000000000000000015866623)] }, [F32(-65651950000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.div_s_3", args: [I64(71)] }, [I64(23)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 1, 127, 1, 127, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 155, 128, 128, 128, 0, 2, 132, 128, 128, 128, 0, 0, 32, 0, 11, 140, 128, 128, 128, 0, 0, 2, 127, 36, 0, 65, 0, 17, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "load", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I32(2147483647), I32(2147483647)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I64(9223372036854775808), I64(18446744073709551615)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.div_s_3", args: [I64(3458764513820540928)] }, [I64(1152921504606846976)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(-0.000000000000000000000024938657), F32(-0.00000000000000000000000000000000000036230088)] }, [F32(68834107000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I64(18446744073709551615), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(inf)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "as-test-operand", args: [I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "load", args: [I32(10)] }, [I32(16)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I32(4294967295), I32(4294967295)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I64(9223372036854775808), I64(9223372036854775807)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(NaN)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(-4142204200000.0), F32(0.0000000000000000000000011954948)] }, [F32(-3464845000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-4149515568880993000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
test run_globals ... run assertion Return(Invoke { mod_ref: None, func: "load", args: [I32(8)] }, [I32(1048576)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I32(1), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.div_u_3", args: [I64(71)] }, [I64(23)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [I64(9223372036854775807), I64(9223372036854775808)] }, [I32(0)])
ok
run assertion TrapAction(Invoke { mod_ref: None, func: "load", args: [I32(1000000)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(193901163824483840000000000000000000000000000.0), F64(25290742357348314000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000007666883046955921)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-operand", args: [I32(0), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I32(0), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-6.283185307179586), F64(NaN)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.div_u_3", args: [I64(13835058055282163712)] }, [I64(4611686018427387904)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I64(0), I64(0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-compare-operand", args: [I32(0), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(4149515568880994000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I32(2147483648), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(NaN)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args}, [F64(219432125342399270000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I64(1), I64(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-operand", args: [I32(1), I32(0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I32(0), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I64(18446744073709551615), I64(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(6.283185307179586), F64(NaN)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-934827517366190300000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(4809309529035847000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019437873809582001)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-operand", args: [I32(1), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(-0.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I64(9223372036854775808), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "break-bare", args: [] }, [I32(19)])
run assertion Return(Invoke { mod_ref: None, func: "load", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I32(2147483648), I32(4294967295)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(0.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "break-value", args: [I32(1)] }, [I32(18)])
run assertion Return(Invoke { mod_ref: None, func: "load", args: [I32(10)] }, [I32(16)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-4149515568880994000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I32(4294967295), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-17598339088417535000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(199386072580682850000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-88262629684409150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I64(9223372036854775807), I64(9223372036854775807)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "break-value", args: [I32(0)] }, [I32(21)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "load", args: [I32(8)] }, [I32(1048576)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I32(2147483648), I32(2147483647)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "effects", args: [I32(1)] }, [I32(4294967282)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-4566268877844991000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(31282495822334530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-145968816036246260000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(-0.0)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I64(1), I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "effects", args: [I32(0)] }, [I32(4294967290)])
run assertion TrapAction(Invoke { mod_ref: None, func: "load", args: [I32(1000000)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I32(2147483647), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(0.0)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I64(0), I64(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32.div_s_5", args: [I32(71)] }, [I32(14)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 4, 64, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 139, 128, 128, 128, 0, 2, 0, 0, 2, 0, 1, 0, 0, 2, 0, 1]), "multiple memories")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I64(9223372036854775808), I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(4149515568880994000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "i32.div_s_5", args: [I32(1342177280)] }, [I32(268435456)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I32(0), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(-1039406400000000000000.0), F32(-0.000000000000000000000000012965966)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "i32.div_u_5", args: [I32(71)] }, [I32(14)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 134, 128, 128, 128, 0, 1, 0, 0, 2, 0, 1, 5, 131, 128, 128, 128, 0, 1, 0, 0]), "multiple memories")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I64(0), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 4, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I32(1), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I64(9223372036854775808), I64(18446744073709551615)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(0.000000000000026831563), F32(31241038000000.0)] }, [F32(0.0000000000000000000000000008588563)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 133, 128, 128, 128, 0, 2, 0, 0, 0, 0]), "multiple memories")
run assertion Return(Invoke { mod_ref: None, func: "i32.div_u_5", args: [I32(2684354560)] }, [I32(536870912)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I32(4294967295), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-4149515568880994000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 4, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I32(2147483648), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.div_s_5", args: [I64(71)] }, [I64(14)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(1.2734247), F32(-692783700000000000000000000.0)] }, [F32(-0.0000000000000000000000000018381274)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.div_s_5", args: [I64(5764607523034234880)] }, [I64(1152921504606846976)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 4, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I32(2147483647), I32(2147483647)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(0.00000000000000068988827), F32(0.000000000000000000000000000000000000003762676)] }, [F32(183350460000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I32(4294967295), I32(4294967295)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.div_u_5", args: [I64(71)] }, [I64(14)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.i32.no_fold_trunc_s_convert_s", args: [F32(1.5)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(4149515568880994000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 4, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64.div_u_5", args: [I64(11529215046068469760)] }, [I64(2305843009213693952)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(1819916200000000000000000000.0), F32(205067030000000000000000000.0)] }, [F32(8.874739)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.i32.no_fold_trunc_s_convert_s", args: [F32(-1.5)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(-0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 4, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.i32.no_fold_trunc_u_convert_s", args: [F32(1.5)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.i32.no_fold_trunc_u_convert_s", args: [F32(-0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I32(1), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.i32.no_fold_trunc_s_convert_u", args: [F32(1.5)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021137715924428077), F64(-16733261612910253000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(1.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 4, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I32(0), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.i32.no_fold_trunc_s_convert_u", args: [F32(-1.5)] }, [F32(4294967300.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I32(2147483648), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(-0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.i32.no_fold_trunc_u_convert_u", args: [F32(1.5)] }, [F32(1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 4, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I32(0), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(0.5)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.i32.no_fold_trunc_u_convert_u", args: [F32(-0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args}, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012453480772801648)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I64(18446744073709551615), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-4149515568880994000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I32(2147483648), I32(4294967295)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(-0.5)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I64(9223372036854775808), I64(9223372036854775807)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I32(4294967295), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i32.no_fold_trunc_s_convert_s", args: [F64(1.5)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I32(2147483648), I32(2147483647)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [I64(9223372036854775807), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(-1.0)] }, [F32(0.5)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 145, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 7, 117, 110, 107, 110, 111, 119, 110, 2, 0, 1]), "unknown import")
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I64(0), I64(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i32.no_fold_trunc_s_convert_s", args: [F64(-1.5)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(1.0)] }, [F32(-1.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009335476912259029), F64(-39099281466396.5)] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023876338802497726)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I32(2147483647), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I64(1), I64(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(4149515568880994000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(-1.0)] }, [F32(1.5)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I32(0), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32.test", args: [] }, [I32(195940365)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I64(18446744073709551615), I64(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i32.no_fold_trunc_u_convert_s", args: [F64(1.5)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.umax", args: [] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 149, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 7, 117, 110, 107, 110, 111, 119, 110, 2, 0, 1]), "unknown import")
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-1686856985488590200000000.0), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013535993861076857)] }, [F64(-12462010568276012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(1.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "i32.div_s_7", args: [I32(71)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I64(9223372036854775808), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.smax", args: [] }, [I32(2147483647)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I32(1), I32(1)] }, [I32(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 150, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 12, 109, 101, 109, 111, 114, 121, 45, 50, 45, 105, 110, 102, 2, 0, 3]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-173388773324941200000000000000000000000000000000000000000000000000000000.0), F64(-70026160475217470.0)] }, [F64(2476057121342590000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32.div_s_7", args: [I32(1879048192)] }, [I32(268435456)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(93506190.0), F32(0.0000000000000000000000000000000000028760885)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "i32.div_u_7", args: [I32(71)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(-6.2831855)] }, [F32(5.7831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(-200575400000000000000000.0), F32(246697220.0)] }, [F32(-813042800000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I64(9223372036854775807), I64(9223372036854775807)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i32.no_fold_trunc_u_convert_s", args: [F64(-0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I32(4294967295), I32(1)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 1, 4, 64, 65, 1, 11, 11]), "type mismatch")
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 151, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 12, 109, 101, 109, 111, 114, 121, 45, 50, 45, 105, 110, 102, 2, 1, 2, 3]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "i32.neg_smax", args: [] }, [I32(2147483649)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(384712200000.0), F32(-107037850000000000000000000000.0)] }, [F32(-0.00000000000000000359417)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-4149515568880994000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(6.2831855)] }, [F32(-6.7831855)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i32.no_fold_trunc_s_convert_u", args: [F64(1.5)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.div_u_7", args: [I32(3758096384)] }, [I32(536870912)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(-4156665000000000000000000000000000.0), F32(-901.4192)] }, [F32(4611245300000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.div_s_7", args: [I64(71)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(-6.2831855)] }, [F32(6.7831855)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 148, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 6, 109, 101, 109, 111, 114, 121, 2, 0, 2]), "incompatible import type")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 1, 4, 64, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I32(2147483648), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(-6702387000000000000000000000.0), F32(-14000.255)] }, [F32(478733200000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.smin", args: [] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i32.no_fold_trunc_s_convert_u", args: [F64(-1.5)] }, [F64(4294967295.0)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I32(2147483647), I32(2147483647)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.div_s_7", args: [I64(8070450532247928832)] }, [I64(1152921504606846976)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(6.2831855)] }, [F32(-5.7831855)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I32(4294967295), I32(4294967295)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 1, 4, 64, 5, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i32.alt_smin", args: [] }, [I32(2147483648)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(4149515568880994000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I32(1), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010085269598907525), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018780374032850215)] }, [F64(-53701111496.85621)])
run assertion Return(Invoke { mod_ref: None, func: "i32.inc_smin", args: [] }, [I32(2147483649)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i32.no_fold_trunc_u_convert_u", args: [F64(1.5)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I64(1), I64(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.neg_zero", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(-inf)] }, [I32(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 149, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 6, 109, 101, 109, 111, 114, 121, 2, 1, 1, 1]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-32571664562951100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005885738519211168)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I64(0), I64(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.div_u_7", args: [I64(71)] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(inf)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 1, 4, 64, 65, 1, 5, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I32(0), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i32.no_fold_trunc_u_convert_u", args: [F64(-0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000031640946861233317), F64(0.000000000000000000045854510556516254)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006900291046010721)])
run assertion Return(Invoke { mod_ref: None, func: "i32.not_octal", args: [] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I64(9223372036854775808), I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.div_u_7", args: [I64(16140901064495857664)] }, [I64(2305843009213693952)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I32(2147483648), I32(0)] }, [I32(0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 146, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 8, 102, 117, 110, 99, 45, 105, 51, 50, 2, 0, 1]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "f32.i64.no_fold_trunc_s_convert_s", args: [F32(1.5)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.unsigned_decimal", args: [] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-4149515568880994000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 1, 4, 127, 5, 65, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-526842242946656600000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014816907071451201)] }, [F64(355568298030134360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I64(0), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I32(0), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32.plus_sign", args: [] }, [I32(42)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I64(9223372036854775808), I64(18446744073709551615)] }, [I32(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 148, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 10, 103, 108, 111, 98, 97, 108, 45, 105, 51, 50, 2, 0, 1]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-1.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(4039956270017490000000000000000000000000000000000000000.0), F64(-47097881971884274000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0000000000857778757955442)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I32(2147483648), I32(4294967295)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 1, 4, 127, 65, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.i64.no_fold_trunc_s_convert_s", args: [F32(-1.5)] }, [F32(-1.0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 150, 128, 128, 128, 0, 1, 4, 116, 101, 115, 116, 12, 116, 97, 98, 108, 101, 45, 49, 48, 45, 105, 110, 102, 2, 0, 1]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I64(18446744073709551615), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(4149515568880995000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.test", args: [] }, [I64(913028331277281902)])
run assertion Return(Invoke { mod_ref: None, func: "f32.i64.no_fold_trunc_u_convert_s", args: [F32(1.5)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I64(9223372036854775808), I64(9223372036854775807)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 1, 4, 127, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-203959560468347600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-74740887394612260000000000000000000000000000000000000000000.0)] }, [F64(2728888665604071000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I32(4294967295), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.umax", args: [] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.i64.no_fold_trunc_u_convert_s", args: [F32(-0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 1, 4, 127, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(1.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.i64.no_fold_trunc_s_convert_u", args: [F32(1.5)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I32(2147483648), I32(2147483647)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt_s", args: [I64(9223372036854775807), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.rem_s_3", args: [I32(71)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-4149515568880995000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 151, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 9, 112, 114, 105, 110, 116, 95, 105, 51, 50, 2, 0, 1]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-304261712294687660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-2655679232658824300000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(114570204320220420000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(inf)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 1, 4, 127, 1, 5, 65, 0, 11, 11]), "type mismatch")
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 152, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 10, 103, 108, 111, 98, 97, 108, 95, 105, 51, 50, 2, 0, 1]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I64(0), I64(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.smax", args: [] }, [I64(9223372036854775807)])
run assertion Return(Invoke { mod_ref: None, func: "i32.rem_s_3", args: [I32(1610612736)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I64(1), I64(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I32(2147483647), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32.rem_u_3", args: [I32(71)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(49235240512480730000000000000000000000000000000000000000.0), F64(-366340828310036700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013439736089369927)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(4149515568880995000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "i64.neg_smax", args: [] }, [I64(9223372036854775809)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I64(18446744073709551615), I64(1)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 1, 4, 127, 65, 0, 5, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64.smin", args: [] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.i64.no_fold_trunc_s_convert_u", args: [F32(-1.5)] }, [F32(18446744000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.rem_u_3", args: [I32(3221225472)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(289260843556341600000000000000000000000000000000000000000000000000.0), F64(517194875837335500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000005592879146144478)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 147, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 5, 116, 97, 98, 108, 101, 2, 0, 1]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "f32.i64.no_fold_trunc_u_convert_u", args: [F32(1.5)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.alt_smin", args: [] }, [I64(9223372036854775808)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I64(9223372036854775808), I64(9223372036854775808)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 1, 4, 127, 1, 5, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.i64.no_fold_trunc_u_convert_u", args: [F32(-0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I64(9223372036854775807), I64(9223372036854775807)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.inc_smin", args: [] }, [I64(9223372036854775809)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-4149515568880995000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 148, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 6, 109, 101, 109, 111, 114, 121, 2, 0, 2]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "i64.rem_s_3", args: [I64(71)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i64.no_fold_trunc_s_convert_s", args: [F64(1.5)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-421542582344268600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1428505854670649100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-295093352936560340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I32(0), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.neg_zero", args: [] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 1, 4, 127, 66, 1, 5, 65, 1, 11, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I64(1), I64(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.rem_s_3", args: [I64(3458764513820540928)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i64.no_fold_trunc_s_convert_s", args: [F64(-1.5)] }, [F64(-1.0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 149, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 6, 109, 101, 109, 111, 114, 121, 2, 1, 1, 1]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "i64.not_octal", args: [] }, [I64(10)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I32(1), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(4149515568880995000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.rem_u_3", args: [I64(71)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i64.no_fold_trunc_u_convert_s", args: [F64(1.5)] }, [F64(1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 1, 4, 127, 65, 1, 5, 66, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64.unsigned_decimal", args: [] }, [I64(18446744073709551615)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I64(0), I64(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.rem_u_3", args: [I64(13835058055282163712)] }, [I64(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I64(9223372036854775808), I64(0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 1, 4, 127, 66, 1, 5, 66, 1, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I64(0), I64(9223372036854775808)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-4149515568880995000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.plus_sign", args: [] }, [I64(42)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I64(9223372036854775808), I64(18446744073709551615)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32-dec-sep1", args: [] }, [I32(1000000)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I32(4294967295), I32(1)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 153, 128, 128, 128, 0, 1, 147, 128, 128, 128, 0, 0, 65, 1, 4, 127, 66, 1, 5, 68, 0, 0, 0, 0, 0, 0, 240, 63, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i32-dec-sep2", args: [] }, [I32(1000)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(1.8622957433108482), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010359363938125513)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I64(18446744073709551615), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i64.no_fold_trunc_u_convert_s", args: [F64(-0.5)] }, [F64(0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(-0.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i64.no_fold_trunc_s_convert_u", args: [F64(1.5)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(4149515568880995000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(0.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I64(9223372036854775808), I64(9223372036854775807)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32-hex-sep1", args: [] }, [I32(168755353)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i64.no_fold_trunc_s_convert_u", args: [F64(-1.5)] }, [F64(18446744073709552000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.rem_s_5", args: [I32(71)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(-0.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I32(2147483648), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 4, 126, 0, 0, 0, 27, 5, 66, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt_u", args: [I64(9223372036854775807), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32-hex-sep2", args: [] }, [I32(109071)])
run assertion Return(Invoke { mod_ref: None, func: "i32.rem_s_5", args: [I32(1342177280)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I64(0), I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64-dec-sep1", args: [] }, [I64(1000000)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i64.no_fold_trunc_u_convert_u", args: [F64(1.5)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I64(1), I64(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32.rem_u_5", args: [I32(71)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(0.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008566632480779937), F64(5381.2699796556235)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001591935084685746)])
run assertion Return(Invoke { mod_ref: None, func: "f64.i64.no_fold_trunc_u_convert_u", args: [F64(-0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.rem_u_5", args: [I32(2684354560)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64-dec-sep2", args: [] }, [I64(1000)])
run assertion Return(Invoke { mod_ref: None, func: "add", args}, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I64(18446744073709551615), I64(1)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 1, 4, 126, 66, 0, 5, 0, 0, 0, 27, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.rem_s_5", args: [I64(71)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64-hex-sep1", args: [] }, [I64(3078696982321561)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-4149515568880995000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I64(9223372036854775808), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64-hex-sep2", args: [] }, [I64(109071)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.rem_s_5", args: [I64(5764607523034234880)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 1, 4, 126, 0, 0, 0, 27, 5, 0, 0, 0, 27, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-0.00000000000000000000000000000000000000000008196220919495565), F64(-10406557086484777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007876015911295176)])
run assertion Return(Invoke { mod_ref: None, func: "i64.rem_u_5", args: [I64(71)] }, [I64(1)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 51, 50, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I64(9223372036854775807), I64(9223372036854775807)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(1.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 51, 50, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 43, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "i64.rem_u_5", args: [I64(11529215046068469760)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(-6.2831855)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 51, 50, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 45, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 1, 4, 127, 12, 0, 5, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I64(1), I64(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(4149515568880995000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(6.2831855)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 51, 50, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 57, 57, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007052801866447111), F64(-13767429405781133000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005122816800851397)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I64(0), I64(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-1.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 51, 50, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 49, 95, 95, 48, 48, 48, 41, 41]), "unknown operator")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 1, 4, 127, 65, 1, 5, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I64(9223372036854775808), I64(0)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 51, 50, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 95, 48, 120, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-1.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 51, 50, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 95, 120, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I64(0), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 51, 50, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 1, 4, 127, 12, 0, 65, 1, 5, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I64(9223372036854775808), I64(18446744073709551615)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-4149515568880995000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 51, 50, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 48, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(0)] }, [F32(15.1)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I64(18446744073709551615), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args}, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 51, 50, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 120, 102, 102, 95, 95, 102, 102, 102, 102, 41, 41]), "unknown operator")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 1, 4, 127, 65, 1, 5, 12, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022655621734165475), F64(133219932963494700000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017006180103974106)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 54, 52, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I32(2147483647), I32(2147483647)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32.rem_s_7", args: [I32(71)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I64(9223372036854775808), I64(9223372036854775807)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "i32.rem_s_7", args: [I32(1879048192)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(4)] }, [F32(15.2)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 54, 52, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 43, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "i32.rem_u_7", args: [I32(71)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(4149515568880995000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I32(4294967295), I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(0.5)] }, [F32(-1.5)])
run assertion Return(Invoke { mod_ref: None, func: "le_s", args: [I64(9223372036854775807), I64(9223372036854775808)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 65, 1, 4, 127, 1, 12, 0, 65, 1, 5, 65, 1, 11, 11]), "type mismatch")
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 54, 52, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 45, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(8)] }, [F32(15.3)])
run assertion Return(Invoke { mod_ref: None, func: "i32.rem_u_7", args: [I32(3758096384)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 54, 52, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 57, 57, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I64(0), I64(0)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 54, 52, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 49, 95, 95, 48, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I32(1), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.rem_s_7", args: [I64(71)] }, [I64(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 65, 1, 4, 127, 65, 1, 5, 1, 12, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(-0.5)] }, [F32(1.5)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I64(1), I64(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(12)] }, [F32(15.4)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 54, 52, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 95, 48, 120, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-4149515568880995000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 54, 52, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 95, 120, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I64(18446744073709551615), I64(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I32(0), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004196304106554003), F64(-9789327.297653636)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042866113053139)])
run assertion Return(Invoke { mod_ref: None, func: "i64.rem_s_7", args: [I64(8070450532247928832)] }, [I64(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 1, 4, 127, 66, 1, 12, 0, 65, 1, 5, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I64(9223372036854775808), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(0)] }, [F32(5.0333333)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(-1.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I32(2147483648), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.rem_u_7", args: [I64(71)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(1038860800000000000000000000.0), F32(6211079500000.0)] }, [F32(167259300000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(1.0)] }, [F32(-2.0)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I64(9223372036854775807), I64(9223372036854775807)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 1, 4, 127, 65, 1, 5, 66, 1, 12, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(4)] }, [F32(5.0666666)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64.rem_u_7", args: [I64(16140901064495857664)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(1869033000000000000000000000.0), F32(-112355730000000000000000000000000.0)] }, [F32(-0.00001663496)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(-1.0)] }, [F32(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I32(0), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(4149515568880995000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 4, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I64(1), I64(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(8)] }, [F32(5.1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(1.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I32(2147483648), I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(3290747200000000000000000.0), F32(0.9064788)] }, [F32(3630252700000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I64(0), I64(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(12)] }, [F32(5.133333)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 2, 64, 4, 64, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(-6.2831855)] }, [F32(5.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I32(4294967295), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I64(9223372036854775808), I64(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-6.2831855), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(-908946.56), F32(-17034289000.0)] }, [F32(0.000053359818)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 54, 52, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 95, 49, 48, 48, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I32(2147483648), I32(2147483647)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I64(0), I64(9223372036854775808)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 54, 52, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 48, 48, 95, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I32(2147483647), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 3, 64, 4, 64, 11, 11, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.no_fold_div_neg1", args: [I32(2147483648)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I64(9223372036854775808), I64(18446744073709551615)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(6.2831855)] }, [F32(-7.2831855)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 54, 52, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 120, 102, 102, 95, 95, 102, 102, 102, 102, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(-0.00000000000024092477), F32(-89840810000000000.0)] }, [F32(0.0000000000000000000000000000026816852)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I32(0), I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I64(18446744073709551615), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(NaN)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.no_fold_div_neg1", args: [I64(9223372036854775808)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-4149515568880995000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 4, 64, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(-6.2831855)] }, [F32(7.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I32(1), I32(1)] }, [I32(0)])
test run_int_literals ... ok
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I64(9223372036854775808), I64(9223372036854775807)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I32(4294967295), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(6.2831855)] }, [F32(-5.2831855)])
test run_int_exprs ... ok
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 152, 128, 128, 128, 0, 1, 146, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 127, 65, 0, 5, 4, 64, 11, 65, 0, 11, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I32(2147483648), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(3910973045785834000.0), F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008392730733897136)] }, [F64(-46599529638070336000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(6.2831855), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le_u", args: [I64(9223372036854775807), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(4149515568880996000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I32(2147483647), I32(2147483647)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 2, 64, 4, 64, 11, 12, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(0.0000000000000000000000000000000000000008379351966732404), F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021077277802048832)] }, [F64(-3975538039318286000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I32(4294967295), I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I64(0), I64(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(0)] }, [F64(15.1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(0.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 65, 0, 2, 64, 4, 64, 11, 65, 1, 13, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I64(1), I64(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I32(1), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(4561142017854715000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1500578067736849100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(3039589952.6465592)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(8)] }, [F64(15.2)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I32(0), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 2, 64, 4, 64, 11, 14, 0, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I32(2147483648), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-4149515568880996000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(16)] }, [F64(15.3)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I64(18446744073709551615), I64(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(-6236072401827852000000000000000000000000000000000000000.0), F64(83170632504609900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007497925907299316)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(-inf)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 4, 64, 11, 15, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I32(0), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(24)] }, [F64(15.4)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I64(9223372036854775808), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I32(2147483648), I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(-inf)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 4, 64, 11, 65, 1, 65, 2, 27, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I64(9223372036854775807), I64(9223372036854775807)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I32(4294967295), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(0)] }, [F64(5.033333333333333)])
run assertion Return(Invoke { mod_ref: None, func: "add", args}, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(158456325028528680000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 0, 0, 96, 1, 127, 1, 127, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 151, 128, 128, 128, 0, 2, 136, 128, 128, 128, 0, 0, 4, 64, 11, 16, 1, 26, 11, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args}, [F64(0.00000000000000000000000000000000000000000000000000000000000000000002739743575824061)])
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(8)] }, [F64(5.066666666666666)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I32(2147483648), I32(2147483647)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(0.00000000000000001046256872449641), F64(1.8150892711657447)] }, [F64(0.000000000000000005764217160391678)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I32(2147483647), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(16)] }, [F64(5.1000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 1, 127, 1, 127, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 157, 128, 128, 128, 0, 2, 132, 128, 128, 128, 0, 0, 32, 0, 11, 142, 128, 128, 128, 0, 0, 2, 127, 4, 64, 11, 65, 0, 17, 0, 0, 26, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(0.00000000000000000000000000000022038268106596436), F64(-0.0000000000002859803943943555)] }, [F64(-0.0000000000000000007706216418530616)])
run assertion Return(Invoke { mod_ref: None, func: "fib-i32", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I64(1), I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I32(0), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "fib-i32", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-158456325028528680000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "check", args: [I32(24)] }, [F64(5.133333333333334)])
run assertion Return(Invoke { mod_ref: None, func: "fib-i32", args: [I32(2)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I64(0), I64(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(0.0000000000007596539988437179), F64(0.00000000000000000000000000000000021055358831337124)] }, [F64(3607889112357986600000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 1, 1, 127, 4, 64, 11, 33, 0, 32, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "fib-i32", args: [I32(5)] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(1120696114500866900000000000.0), F64(159713233802866500000000000000.0)] }, [F64(0.007016927074960728)])
run assertion Return(Invoke { mod_ref: None, func: "fib-i32", args: [I32(20)] }, [I32(10946)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 1, 1, 127, 4, 64, 11, 34, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(158456325028528700000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(0.0006342142502301953), F64(-6391950865520085.0)] }, [F64(-0.00000000000000000009922076429769178)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(-0.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 4, 64, 11, 36, 0, 35, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754942)] }, [F32(1.0000001)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(0.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(-0.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(0.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-158456325028528700000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 4, 64, 11, 64, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(0.000000000000000000000000000000000000011754942), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.9999999)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-6.2831855)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 4, 64, 11, 40, 2, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(158456325028528700000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 102, 117, 110, 99, 41, 41]), "import after function")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 4, 64, 11, 65, 1, 54, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(1.0)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 103, 108, 111, 98, 97, 108, 32, 105, 54, 52, 41, 41]), "import after function")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I32(1), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.ult", args: [F32(3.0), F32(2.0)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 41]), "import after function")
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args}, [F64(1.0000000000000002)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 105, 102, 32, 101, 110, 100, 32, 36, 108, 41]), "mismatching label")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.ult", args: [F32(2.0), F32(2.0)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 41]), "import after function")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-158456325028528700000000000000.0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 105, 102, 32, 36, 97, 32, 101, 110, 100, 32, 36, 108, 41]), "mismatching label")
run assertion Return(Invoke { mod_ref: None, func: "f32.ult", args: [F32(2.0), F32(3.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I32(4294967295), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(6.2831855)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 54, 52, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 102, 117, 110, 99, 41, 41]), "import after global")
run assertion Return(Invoke { mod_ref: None, func: "f32.ult", args: [F32(2.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I32(2147483648), I32(2147483648)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 105, 102, 32, 101, 108, 115, 101, 32, 36, 108, 32, 101, 110, 100, 41]), "mismatching label")
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 54, 52, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 103, 108, 111, 98, 97, 108, 32, 102, 51, 50, 41, 41]), "import after global")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 105, 102, 32, 36, 97, 32, 101, 108, 115, 101, 32, 36, 108, 32, 101, 110, 100, 41]), "mismatching label")
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 54, 52, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 41]), "import after global")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [F32(6.2831855)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 105, 102, 32, 101, 108, 115, 101, 32, 101, 110, 100, 32, 36, 108, 41]), "mismatching label")
run assertion Return(Invoke { mod_ref: None, func: "f32.ule", args: [F32(3.0), F32(2.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I32(2147483647), I32(2147483647)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 103, 108, 111, 98, 97, 108, 32, 105, 54, 52, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 41]), "import after global")
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args}, [F64(0.9999999999999998)])
run assertion Return(Invoke { mod_ref: None, func: "f32.ule", args: [F32(2.0), F32(2.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(6.2831855)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 102, 117, 110, 99, 41, 41]), "import after table")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(-0.5)] }, [F32(-5.7831855)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 105, 102, 32, 101, 108, 115, 101, 32, 36, 108, 32, 101, 110, 100, 32, 36, 108, 41]), "mismatching label")
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I32(4294967295), I32(4294967295)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(158456325028528700000000000000.0)])
run assertion Malformed(Quoted(None, [40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 103, 108, 111, 98, 97, 108, 32, 105, 51, 50, 41, 41]), "import after table")
run assertion Return(Invoke { mod_ref: None, func: "f32.ule", args: [F32(2.0), F32(3.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I32(1), I32(0)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 105, 102, 32, 101, 108, 115, 101, 32, 36, 108, 49, 32, 101, 110, 100, 32, 36, 108, 50, 41]), "mismatching label")
run assertion Malformed(Quoted(None, [40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 41]), "import after table")
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(0.00000023841856), F32(340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.ule", args: [F32(2.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args}, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 105, 102, 32, 36, 97, 32, 101, 108, 115, 101, 32, 101, 110, 100, 32, 36, 108, 41]), "mismatching label")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(0.5)] }, [F32(-6.7831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I32(0), I32(1)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 41]), "import after table")
run assertion Return(Invoke { mod_ref: None, func: "f32.ugt", args: [F32(3.0), F32(2.0)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 105, 102, 32, 36, 97, 32, 101, 108, 115, 101, 32, 36, 97, 32, 101, 110, 100, 32, 36, 108, 41]), "mismatching label")
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(0.00000023841858), F32(340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I32(2147483648), I32(0)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 102, 117, 110, 99, 41, 41]), "import after memory")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-158456325028528700000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(6.2831855)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 105, 102, 32, 36, 97, 32, 101, 108, 115, 101, 32, 36, 108, 32, 101, 110, 100, 32, 36, 108, 41]), "mismatching label")
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I32(0), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.ugt", args: [F32(2.0), F32(2.0)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 103, 108, 111, 98, 97, 108, 32, 105, 51, 50, 41, 41]), "import after memory")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(-0.5)] }, [F32(6.7831855)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.ugt", args: [F32(2.0), F32(3.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I32(2147483648), I32(4294967295)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 116, 97, 98, 108, 101, 32, 49, 32, 51, 32, 102, 117, 110, 99, 114, 101, 102, 41, 41]), "import after memory")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
test run_if ... ok
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 48, 41, 32, 40, 105, 109, 112, 111, 114, 116, 32, 34, 34, 32, 34, 34, 32, 40, 109, 101, 109, 111, 114, 121, 32, 49, 32, 50, 41, 41]), "import after memory")
run assertion Return(Invoke { mod_ref: None, func: "f32.ugt", args: [F32(2.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(0.5)] }, [F32(5.7831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I32(4294967295), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I32(2147483648), I32(2147483647)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(-1.0)] }, [F32(-5.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(0.00000000000000044408920985006257), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I32(2147483647), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(1.0)] }, [F32(-7.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.uge", args: [F32(3.0), F32(2.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.uge", args: [F32(2.0), F32(2.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(-1.0)] }, [F32(7.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(158456325028528700000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.uge", args: [F32(2.0), F32(3.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I64(9223372036854775808), I64(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(1.0)] }, [F32(5.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32.uge", args: [F32(2.0), F32(NaN)] }, [I32(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 169, 128, 128, 128, 0, 10, 96, 0, 0, 96, 1, 127, 0, 96, 2, 127, 127, 0, 96, 1, 126, 0, 96, 1, 125, 0, 96, 1, 124, 0, 96, 0, 1, 127, 96, 0, 1, 126, 96, 0, 1, 125, 96, 0, 1, 124, 2, 232, 130, 128, 128, 0, 16, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 0, 0, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 0, 1, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 0, 2, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 0, 3, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 0, 4, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 0, 5, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 0, 6, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 0, 7, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 0, 8, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 0, 9, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 3, 127, 0, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 3, 126, 0, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 3, 125, 0, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 3, 124, 0, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 1, 112, 0, 0, 8, 110, 111, 116, 32, 119, 97, 115, 109, 10, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 2, 0, 0]), "unknown import")
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I64(0), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(0.0000000000000004440892098500626), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "f64.ult", args: [F64(3.0), F64(2.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-158456325028528700000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I32(0), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "block", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(-6.2831855)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.ult", args: [F64(2.0), F64(2.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I32(1), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(1.0), F32(0.000000000000000000000000000000000000002938736)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "loop1", args: [] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.ult", args: [F64(2.0), F64(3.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I32(4294967295), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I64(9223372036854775808), I64(18446744073709551615)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.ult", args: [F64(2.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(6.2831855)] }, [F32(-12.566371)])
test run_imports ... ok
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(1.0), F32(0.000000000000000000000000000000000000002938737)] }, [F32(340282200000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(158456325028528700000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I64(18446744073709551615), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "loop2", args: [] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: Some("Mf"), func: "call", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "f64.ule", args: [F64(3.0), F64(2.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(-6.2831855)] }, [F32(12.566371)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I64(9223372036854775808), I64(9223372036854775807)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "loop3", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: Some("Nf"), func: "Mf.call", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "f64.ule", args: [F64(2.0), F64(2.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(6.2831855)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005562684646268003)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt_s", args: [I64(9223372036854775807), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "loop4", args: [I32(8)] }, [I32(16)])
run assertion Return(Invoke { mod_ref: None, func: "f64.ule", args: [F64(2.0), F64(3.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-158456325028528700000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "loop5", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: Some("Nf"), func: "call", args: [] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: Some("Nf"), func: "call Mf.call", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I64(0), I64(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "loop6", args: [] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "f64.ule", args: [F64(2.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "if", args: [] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I64(1), I64(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.ugt", args: [F64(3.0), F64(2.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "if2", args: [] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I64(18446744073709551615), I64(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(158456325028528750000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.ugt", args: [F64(2.0), F64(2.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "switch", args: [I32(0)] }, [I32(50)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I64(9223372036854775808), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.ugt", args: [F64(2.0), F64(3.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "switch", args: [I32(1)] }, [I32(20)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I64(9223372036854775807), I64(9223372036854775807)] }, [I32(0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 126, 0, 2, 148, 128, 128, 128, 0, 1, 10, 114, 101, 101, 120, 112, 111, 114, 116, 95, 102, 5, 112, 114, 105, 110, 116, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "f64.ugt", args: [F64(2.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "switch", args: [I32(2)] }, [I32(20)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.uge", args: [F64(3.0), F64(2.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I64(1), I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(1.0), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000556268464626801)] }, [F64(179769313486231430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "switch", args: [I32(3)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-158456325028528750000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.uge", args: [F64(2.0), F64(2.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I64(0), I64(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 127, 2, 148, 128, 128, 128, 0, 1, 10, 114, 101, 101, 120, 112, 111, 114, 116, 95, 102, 5, 112, 114, 105, 110, 116, 0, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "switch", args: [I32(4)] }, [I32(50)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(1.0), F32(85070600000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000011754942)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.uge", args: [F64(2.0), F64(3.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I64(9223372036854775808), I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "switch", args: [I32(5)] }, [I32(50)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(1.0), F32(85070590000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "f64.uge", args: [F64(2.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "return", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(158456325028528750000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "return", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "return", args: [I32(2)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "br_if0", args: [] }, [I32(29)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "br_if1", args: [] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I64(0), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "br_if2", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-158456325028528750000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I64(9223372036854775808), I64(18446744073709551615)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "br_if3", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "br", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I64(18446744073709551615), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "shadowing", args: [] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I32(2147483648), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "redefinition", args: [] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I64(9223372036854775808), I64(9223372036854775807)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(158456325028528750000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I32(2147483647), I32(2147483647)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 64, 65, 1, 13, 0, 140, 1, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I32(4294967295), I32(4294967295)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt_u", args: [I64(9223372036854775807), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I32(1), I32(0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I64(0), I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I32(0), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I64(1), I64(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 64, 67, 0, 0, 0, 0, 65, 1, 13, 0, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I32(2147483648), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I32(0), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-158456325028528750000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(-0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 64, 67, 0, 0, 0, 0, 65, 1, 13, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I32(2147483648), I32(4294967295)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I64(18446744073709551615), I64(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(1.0), F64(44942328371557910000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_select", args: [F32(0.0), F32(NaN)] }, [F32(NaN)])
run assertion Return(Get { mod_ref: Some("Mg"), global: "glob" }, [I32(42)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I32(4294967295), I32(2147483648)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Get { mod_ref: Some("Ng"), global: "Mg.glob" }, [I32(42)])
test run_labels ... ok
run assertion Return(Get { mod_ref: Some("Ng"), global: "glob" }, [I32(43)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_select", args: [F32(NaN), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: Some("Mg"), func: "get", args: [] }, [I32(42)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I32(2147483648), I32(2147483647)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I64(9223372036854775808), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(158456325028528750000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(0.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I64(9223372036854775807), I64(9223372036854775807)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_select", args: [F32(0.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I32(2147483647), I32(2147483648)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_select", args: [F32(-0.0), F32(0.0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: Some("Ng"), func: "Mg.get", args: [] }, [I32(42)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(-0.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I64(1), I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: Some("Ng"), func: "get", args: [] }, [I32(43)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 2, 64, 69, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-158456325028528750000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(0.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_select", args: [F32(0.0), F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I64(0), I64(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Get { mod_ref: Some("Mg"), global: "mut_glob" }, [I32(142)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 3, 64, 69, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I64(9223372036854775808), I64(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_select", args: [F32(NaN), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Get { mod_ref: Some("Ng"), global: "Mg.mut_glob" }, [I32(142)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I64(0), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: Some("Mg"), func: "get_mut", args: [] }, [I32(142)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_select", args: [F32(0.0), F32(-0.0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 69, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(1.0), F64(44942328371557900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: Some("Ng"), func: "Mg.get_mut", args: [] }, [I32(142)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(158456325028528750000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: Some("Mg"), func: "set_mut", args: [I32(241)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(1.0), F32(3.0)] }, [F32(0.33333334)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Get { mod_ref: Some("Mg"), global: "mut_glob" }, [I32(241)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 127, 65, 0, 5, 69, 11, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_select", args: [F32(-0.0), F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(3.0), F32(9.0)] }, [F32(0.33333334)])
run assertion Return(Get { mod_ref: Some("Ng"), global: "Mg.mut_glob" }, [I32(241)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: Some("Mg"), func: "get_mut", args: [] }, [I32(241)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_select", args: [F32(0.0), F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 2, 64, 69, 12, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I64(9223372036854775808), I64(18446744073709551615)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-158456325028528750000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_select", args: [F32(NaN), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I64(18446744073709551615), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_select", args: [F32(0.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 2, 64, 69, 65, 1, 13, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_select", args: [F32(-0.0), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: Some("Ng"), func: "Mg.get_mut", args: [] }, [I32(241)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I64(9223372036854775808), I64(9223372036854775807)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(158456325028528750000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_select", args: [F32(0.0), F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 2, 64, 69, 14, 0, 0, 26, 11, 11]), "type mismatch")
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 144, 128, 128, 128, 0, 1, 2, 77, 103, 8, 109, 117, 116, 95, 103, 108, 111, 98, 3, 127, 0]), "incompatible import type")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_select", args: [F32(NaN), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(9.0), F32(27.0)] }, [F32(0.33333334)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-cond", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_select", args: [F32(0.0), F32(-0.0)] }, [F32(0.0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 140, 128, 128, 128, 0, 1, 2, 77, 103, 4, 103, 108, 111, 98, 3, 127, 1]), "incompatible import type")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 69, 15, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-158456325028528750000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_s", args: [I64(9223372036854775807), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_select", args: [F32(-0.0), F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value-cond", args: [] }, [I32(7)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 69, 65, 1, 65, 2, 27, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I64(0), I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-index", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_select", args: [F64(0.0), F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(1.0), F64(3.0)] }, [F64(0.3333333333333333)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I64(1), I64(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I64(18446744073709551615), I64(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value-index", args: [] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(158456325028528750000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(3.0), F64(9.0)] }, [F64(0.3333333333333333)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 0, 0, 96, 1, 127, 1, 127, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 149, 128, 128, 128, 0, 2, 134, 128, 128, 128, 0, 0, 69, 16, 1, 26, 11, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I64(9223372036854775808), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_select", args: [F64(NaN), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-cond", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.5)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(9.0), F64(27.0)] }, [F64(0.3333333333333333)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-i32", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-158456325028528750000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-i64", args: [] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_select", args: [F64(0.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 1, 127, 1, 127, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 155, 128, 128, 128, 0, 2, 132, 128, 128, 128, 0, 0, 32, 0, 11, 140, 128, 128, 128, 0, 0, 2, 127, 69, 65, 0, 17, 0, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(1.0000001), F32(0.99999994)] }, [F32(1.0000002)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(0.5)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-f32", args: [] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I64(9223372036854775807), I64(9223372036854775807)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_select", args: [F64(-0.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I64(18446744073709551615), I64(18446744073709551615)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(-inf), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-f64", args: [] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(0.99999994), F32(1.0000001)] }, [F32(0.9999998)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 1, 1, 127, 69, 33, 0, 32, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(-0.5)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I64(1), I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_select", args: [F64(0.0), F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(0), I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(158456325028528780000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-i32", args: [I32(2)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: Some("Mt"), func: "call", args: [I32(2)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_select", args: [F64(NaN), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-second", args: [I32(0), I32(0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 1, 1, 127, 69, 34, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(1.0), F32(0.99999994)] }, [F32(1.0000001)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(0.5)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I64(0), I64(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-i64", args: [I64(3)] }, [I64(3)])
run assertion Return(Invoke { mod_ref: Some("Nt"), func: "Mt.call", args: [I32(2)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-cond", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.div", args: [F32(1.0), F32(1.0000001)] }, [F32(0.9999999)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(-1.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-f32", args: [F32(4.4)] }, [F32(4.4)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I64(9223372036854775808), I64(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: Some("Nt"), func: "call", args: [I32(2)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-first", args: [] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_select", args: [F64(0.0), F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(1.0000000000000002), F64(0.9999999999999999)] }, [F64(1.0000000000000004)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-mid", args: [] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-f64", args: [F64(5.5)] }, [F64(5.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I64(0), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(1.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: Some("Nt"), func: "call Mt.call", args: [I32(2)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 69, 36, 0, 35, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-158456325028528780000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(inf), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_select", args: [F64(-0.0), F64(0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-value", args: [I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(-1.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I64(9223372036854775808), I64(18446744073709551615)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion TrapAction(Invoke { mod_ref: Some("Mt"), func: "call", args: [I32(1)] }, "uninitialized")
run assertion Return(Invoke { mod_ref: None, func: "as-call-last", args: [] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I64(18446744073709551615), I64(9223372036854775808)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-value", args: [I32(7)] }, [I32(7)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_select", args: [F64(0.0), F64(NaN)] }, [F64(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 69, 64, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [I32(8)] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(1152921504606847000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(1.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_select", args: [F64(NaN), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I64(9223372036854775808), I64(9223372036854775807)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(0.9999999999999999), F64(1.0000000000000002)] }, [F64(0.9999999999999997)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(-1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 69, 40, 2, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.0)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: Some("Nt"), func: "Mt.call", args: [I32(1)] }, "uninitialized")
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value", args: [I32(9)] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(1.0), F64(0.9999999999999999)] }, [F64(1.0000000000000002)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: Some("Nt"), func: "call", args: [I32(1)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value-cond", args: [I32(10)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_select", args: [F64(0.0), F64(-0.0)] }, [F64(-0.0)])
run assertion TrapAction(Invoke { mod_ref: Some("Nt"), func: "call Mt.call", args: [I32(1)] }, "uninitialized")
run assertion Return(Invoke { mod_ref: None, func: "ge_u", args: [I64(9223372036854775807), I64(9223372036854775808)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 69, 65, 1, 54, 2, 0, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: Some("Mt"), func: "call", args: [I32(0)] }, "uninitialized")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-1152921504606847000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(-1.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: Some("Nt"), func: "Mt.call", args: [I32(0)] }, "uninitialized")
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-index", args: [] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_select", args: [F64(-0.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(6.2831855)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 124, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: Some("Nt"), func: "call", args: [I32(0)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(-6.283185307179586)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 106, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_select", args: [F64(0.0), F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.div", args: [F64(1.0), F64(1.0000000000000002)] }, [F64(0.9999999999999998)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 131, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [] }, [])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 65, 0, 106, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(171.0)] }, [F32(13.076696)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(1152921504606847200.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 127, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_select", args: [F64(NaN), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_add", args: [] }, [I32(258)])
run assertion TrapAction(Invoke { mod_ref: Some("Nt"), func: "call Mt.call", args: [I32(0)] }, "uninitialized")
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(0.000000160795)] }, [F32(0.00040099252)])
run assertion Return(Invoke { mod_ref: None, func: "i64_add", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_select", args: [F64(0.0), F64(-0.0)] }, [F64(0.0)])
run assertion TrapAction(Invoke { mod_ref: Some("Mt"), func: "call", args: [I32(20)] }, "undefined")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 65, 0, 2, 64, 106, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_select", args: [F64(-0.0), F64(0.0)] }, [F64(-0.0)])
run assertion TrapAction(Invoke { mod_ref: Some("Nt"), func: "Mt.call", args: [I32(20)] }, "undefined")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(6.2831855)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_sub", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(171.0)] }, [F64(13.076696830622021)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-1152921504606847200.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 128, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "type-mixed", args: [I64(1), F32(2.2), F64(3.3), I32(4), I32(5)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-load-address", args: [] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: Some("Nt"), func: "call", args: [I32(7)] }, "undefined")
run assertion Return(Invoke { mod_ref: None, func: "i64_sub", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 2, 64, 65, 0, 106, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.000000160795)] }, [F64(0.00040099251863345283)])
run assertion Return(Invoke { mod_ref: None, func: "read", args: [I64(1), F32(2.0), F64(3.3), I32(4), I32(5)] }, [F64(34.8)])
run assertion TrapAction(Invoke { mod_ref: Some("Nt"), func: "call Mt.call", args: [I32(20)] }, "undefined")
run assertion Return(Invoke { mod_ref: None, func: "i32_mul", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "as-loadN-address", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 126, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: Some("Nt"), func: "call", args: [I32(3)] }, [I32(4294967292)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(1152921504606847200.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.00000000000000000000000000000000000000000000000004316357580352844)] }, [F64(0.00000000000000000000000020775845543209175)])
run assertion Return(Invoke { mod_ref: None, func: "i64_mul", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-address", args: [] }, [])
run assertion TrapAction(Invoke { mod_ref: Some("Nt"), func: "call", args: [I32(4)] }, "indirect call")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 1, 1, 127, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-store-value", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-storeN-address", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "i32_div_s", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 65, 0, 3, 64, 106, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(676253300479648500000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(822346216918183800000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-storeN-value", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "i64_div_s", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [] }, [I32(32)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32_div_u", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(17485296624861996000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(4181542373916829400000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-1152921504606847200.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 3, 64, 65, 0, 106, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64_div_u", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-left", args: [] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 1, 1, 125, 32, 0, 69, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i32_rem_s", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.000000000009593720960603523)] }, [F64(0.0000030973732355987585)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-right", args: [] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "i64_rem_s", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 65, 0, 65, 0, 106, 4, 64, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: Some("Mt"), func: "call", args: [I32(3)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006348452898717835)] }, [F64(0.00000000000000000000000000000000000000000000000000000002519613640762773)])
run assertion Return(Invoke { mod_ref: None, func: "as-test-operand", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-left", args: [] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 2, 1, 124, 1, 126, 32, 1, 154, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_if", args: [F32(0.0), F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(1152921504606847500.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 132, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-compare-right", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.9999999999999999)] }, [F64(0.9999999999999999)])
run assertion Return(Invoke { mod_ref: Some("Nt"), func: "Mt.call", args: [I32(3)] }, [I32(4)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 65, 0, 65, 0, 4, 64, 106, 5, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_if", args: [F32(NaN), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-size", args: [] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i32_rem_u", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: Some("Nt"), func: "call Mt.call", args: [I32(3)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(0.12963942)] }, [F32(0.36005473)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 129, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_if", args: [F32(0.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(2345875800000000000000000000000.0)] }, [F32(1531625200000000.0)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 51, 50, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-1152921504606847500.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_if", args: [F32(-0.0), F32(0.0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 153, 128, 128, 128, 0, 1, 147, 128, 128, 128, 0, 0, 65, 0, 65, 0, 65, 0, 4, 127, 65, 0, 5, 106, 65, 0, 11, 26, 26, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 125, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 32, 0, 69, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_rem_u", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: Some("Ot"), func: "call", args: [I32(3)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(0.078786574)] }, [F32(0.28068945)])
run assertion Return(Invoke { mod_ref: None, func: "i32_and", args: [] }, [I32(258)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 51, 50, 95, 117, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: Some("Mt"), func: "call", args: [I32(2)] }, [I32(4294967292)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 130, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_if", args: [F32(0.0), F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_and", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 127, 65, 0, 5, 106, 11, 26, 11]), "type mismatch")
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 51, 50, 95, 115, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 137, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(0.00000000000000000000051371026)] }, [F32(0.000000000022665177)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 135, 128, 128, 128, 0, 1, 96, 2, 124, 126, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 32, 1, 154, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_if", args: [F32(NaN), F32(0.0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 65, 0, 2, 64, 106, 12, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(0.00090167153)] }, [F32(0.030027846)])
run assertion Return(Invoke { mod_ref: Some("Nt"), func: "Mt.call", args: [I32(2)] }, [I32(4294967292)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 138, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_if", args: [F32(0.0), F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 54, 52, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_if", args: [F32(-0.0), F32(0.0)] }, [F32(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 2, 64, 65, 0, 106, 12, 0, 26, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 1, 1, 127, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: Some("Nt"), func: "call", args: [I32(2)] }, [I32(5)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 54, 52, 95, 117, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 134, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: Some("Nt"), func: "call Mt.call", args: [I32(2)] }, [I32(4294967292)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009591922760825561)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009793836204892116)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "i32_or", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(935787535216400500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(30590644570136150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_if", args: [F32(0.0), F32(NaN)] }, [F32(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 65, 0, 65, 0, 2, 64, 106, 65, 1, 13, 0, 26, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: Some("Ot"), func: "call", args: [I32(2)] }, [I32(4294967292)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_if", args: [F32(NaN), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 54, 52, 95, 115, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "i64_or", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 1, 1, 126, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(147706699783365580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(12153464517715332000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: Some("Mt"), func: "call", args: [I32(1)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_if", args: [F32(0.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 54, 52, 41, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 54, 52, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: Some("Nt"), func: "Mt.call", args: [I32(1)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(48800457180027890000000000000000.0)] }, [F64(6985732401117859.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_xor", args: [] }, [I32(258)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(-inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 135, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 65, 0, 2, 64, 65, 0, 106, 65, 1, 13, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64_xor", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_if", args: [F32(-0.0), F32(0.0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 1, 1, 125, 32, 0, 11]), "type mismatch")
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 54, 52, 41, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 54, 52, 95, 117, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: Some("Nt"), func: "call", args: [I32(1)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_if", args: [F32(0.0), F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 136, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_if", args: [F32(NaN), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 65, 0, 2, 64, 106, 14, 0, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(7618977687174540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(2760249569726357000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: Some("Nt"), func: "call Mt.call", args: [I32(1)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32_shl", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 1, 1, 124, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_if", args: [F32(0.0), F32(-0.0)] }, [F32(0.0)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 54, 52, 41, 32, 40, 105, 54, 52, 46, 108, 111, 97, 100, 54, 52, 95, 115, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 125, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_if", args: [F32(-0.0), F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64_shl", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 3, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(154481010.0)] }, [F32(12429.039)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 102, 51, 50, 41, 32, 40, 102, 51, 50, 46, 108, 111, 97, 100, 51, 50, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: Some("Ot"), func: "call", args: [I32(1)] }, [I32(6)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_if", args: [F64(0.0), F64(NaN)] }, [F64(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 2, 64, 65, 0, 106, 14, 0, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(0.00000000000000000000000000000000010471305)] }, [F32(0.00000000000000001023294)])
run assertion Return(Invoke { mod_ref: None, func: "i32_shr_u", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 247, 164, 234, 6, 11]), "unknown local")
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 102, 51, 50, 41, 32, 40, 102, 51, 50, 46, 108, 111, 97, 100, 54, 52, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion TrapAction(Invoke { mod_ref: Some("Mt"), func: "call", args: [I32(0)] }, "uninitialized")
run assertion Return(Invoke { mod_ref: None, func: "i64_shr_u", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 102, 54, 52, 41, 32, 40, 102, 54, 52, 46, 108, 111, 97, 100, 51, 50, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 133, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_if", args: [F64(NaN), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(0.00003790637)] }, [F32(0.006156815)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 127, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 32, 2, 11]), "unknown local")
run assertion TrapAction(Invoke { mod_ref: Some("Nt"), func: "Mt.call", args: [I32(0)] }, "uninitialized")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 106, 15, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i32_shr_s", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: Some("Nt"), func: "call", args: [I32(0)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(0.00000000000000000000000000000000000089607535)] }, [F32(0.0000000000000000009466126)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_if", args: [F64(0.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.5)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 102, 54, 52, 41, 32, 40, 102, 54, 52, 46, 108, 111, 97, 100, 54, 52, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 80, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(-0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: Some("Nt"), func: "call Mt.call", args: [I32(0)] }, "uninitialized")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 127, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 32, 247, 242, 206, 212, 2, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(0.0000000000000000000000000000000000001687712)] }, [F32(0.00000000000000000041081773)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_if", args: [F64(-0.0), F64(0.0)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 121, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 40, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 106, 15, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: Some("Ot"), func: "call", args: [I32(0)] }, "uninitialized")
run assertion Return(Invoke { mod_ref: None, func: "i64_shr_s", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(-0.0)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 122, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: Some("Ot"), func: "call", args: [I32(20)] }, "undefined")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 3, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 106, 65, 1, 65, 2, 27, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_if", args: [F64(0.0), F64(NaN)] }, [F64(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 44, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "i32_eq", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 247, 168, 153, 102, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(316996264378909500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(563024212959717700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_eq", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(0.0)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 45, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i32_ne", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 106, 65, 1, 65, 2, 27, 26, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 123, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args}, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_if", args: [F64(NaN), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040573669271847993)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020142906759414837)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
test run_local_get ... run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 46, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-1.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 138, 128, 128, 128, 0, 2, 96, 0, 0, 96, 2, 127, 127, 1, 127, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 149, 128, 128, 128, 0, 2, 134, 128, 128, 128, 0, 0, 106, 16, 1, 26, 11, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64_ne", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_if", args: [F64(0.0), F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(1.0)] }, [I32(1)])
ok
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_lt_s", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 81, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.0000000015299861660588838)] }, [F64(0.00003911503759500793)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_if", args: [F64(-0.0), F64(0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 47, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_if", args: [F64(0.0), F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Return(Get { mod_ref: Some("G2"), global: "g" }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64_lt_s", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 138, 128, 128, 128, 0, 2, 96, 0, 0, 96, 2, 127, 127, 1, 127, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 151, 128, 128, 128, 0, 2, 136, 128, 128, 128, 0, 0, 65, 0, 106, 16, 1, 26, 11, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 89, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000002822766928951239)] }, [F64(0.0000000000000000000000000000000000005312971794533864)])
run assertion Return(Invoke { mod_ref: None, func: "i32_le_s", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_if", args: [F64(NaN), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 41, 3, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_if", args: [F64(0.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 140, 128, 128, 128, 0, 1, 2, 77, 116, 3, 116, 97, 98, 1, 112, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 9, 135, 128, 128, 128, 0, 1, 0, 65, 10, 11, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "elements segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "i64_le_s", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(14375957727045067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(119899782014168260000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_if", args: [F64(-0.0), F64(0.0)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 90, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 1, 127, 1, 127, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 155, 128, 128, 128, 0, 2, 132, 128, 128, 128, 0, 0, 32, 0, 11, 140, 128, 128, 128, 0, 0, 2, 127, 106, 65, 0, 17, 0, 0, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 48, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(464023420000000000000000000000000000.0)] }, [F32(681192700000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_lt_u", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_if", args: [F64(0.0), F64(NaN)] }, [F64(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 85, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 49, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 2, 150, 128, 128, 128, 0, 2, 2, 77, 116, 3, 116, 97, 98, 1, 112, 0, 10, 2, 77, 116, 3, 109, 101, 109, 2, 0, 1, 3, 130, 128, 128, 128, 0, 1, 0, 9, 141, 128, 128, 128, 0, 2, 0, 65, 7, 11, 1, 0, 0, 65, 9, 11, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 0, 11]), "unknown import")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(47536.133)] }, [F32(218.02783)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 86, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64_lt_u", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 1, 127, 1, 127, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 157, 128, 128, 128, 0, 2, 132, 128, 128, 128, 0, 0, 32, 0, 11, 142, 128, 128, 128, 0, 0, 2, 127, 65, 0, 106, 65, 0, 17, 0, 0, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 50, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_if", args: [F64(NaN), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(0.812613)] }, [F32(0.9014505)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 87, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: Some("Mt"), func: "call", args: [I32(7)] }, "uninitialized")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_if", args: [F64(0.0), F64(-0.0)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 1, 1, 127, 106, 33, 0, 32, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(0.000000000000000000000000009549605)] }, [F32(0.00000000000009772208)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 51, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 88, 11]), "type mismatch")
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 2, 140, 128, 128, 128, 0, 1, 2, 77, 116, 3, 116, 97, 98, 1, 112, 0, 10, 3, 130, 128, 128, 128, 0, 1, 0, 9, 141, 128, 128, 128, 0, 2, 0, 65, 7, 11, 1, 0, 0, 65, 12, 11, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 0, 11]), "elements segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_if", args: [F64(-0.0), F64(0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_le_u", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(6.2831855)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 52, 2, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 83, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(-0.5)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 1, 1, 127, 65, 0, 106, 33, 0, 32, 0, 26, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: Some("Mt"), func: "call", args: [I32(7)] }, "uninitialized")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(0.5)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [F64(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 53, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64_le_u", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-6.2831855)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 84, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(0.000000000000000000000000000068856485)] }, [F32(0.000000000000008297981)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_gt_s", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(-0.5)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-6.2831855)] }, [I32(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 2, 140, 128, 128, 128, 0, 1, 2, 77, 116, 3, 116, 97, 98, 1, 112, 0, 10, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 7, 11, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 0, 11, 11, 137, 128, 128, 128, 0, 1, 0, 65, 128, 128, 4, 11, 1, 100]), "data segment does not fit")
run assertion Return(Invoke { mod_ref: None, func: "i64_gt_s", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(0.5)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 82, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 1, 1, 127, 106, 34, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(-1.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(2349768917495332200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(1532895599020146000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32_ge_s", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 42, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(1.0)] }, [F32(-inf)])
run assertion TrapAction(Invoke { mod_ref: Some("Mt"), func: "call", args: [I32(7)] }, "uninitialized")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
test run_i64 ... ok
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 1, 1, 127, 65, 0, 106, 34, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000029262574743429683)] }, [F64(0.0000000000000000000000000000000000000000000000000000000005409489323718985)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 43, 3, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(-1.0)] }, [F32(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args}, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(1.0)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 106, 36, 0, 35, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(377335087484490800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(19425114864126050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 40, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(-6.2831855)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-i32", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "i64_ge_s", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.000000000000035498432023945234)] }, [F64(0.00000018841027579180822)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-i64", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(6.2831855)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 106, 36, 0, 35, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013747419336166767)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000011724938949165905)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-f32", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(-6.2831855)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-f64", args: [] }, [])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 44, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-i32", args: [I32(2)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "i32_gt_u", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(6.2831855)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-i64", args: [I64(3)] }, [])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 106, 64, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64_gt_u", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_select_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(-340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 45, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "type-param-f32", args: [F32(4.4)] }, [])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015535152663257847)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32_ge_u", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-f64", args: [F64(5.5)] }, [])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 106, 64, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(18763296348029700000000000000000.0)] }, [F64(4331662076851067.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_select_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 46, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-value", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_select_to_abs", args: [F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_ge_u", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-value", args: [I32(0)] }, [])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 106, 40, 2, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i32_store", args: [] }, [I32(258)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_select_to_abs", args: [F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000274405777036165)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000523837548325972)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(-340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: Some("Mm"), func: "load", args: [I32(12)] }, [I32(2)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 47, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64_store", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_select_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000015613859952920445)] }, [F64(0.0000000000000000000000000000000000000000039514377070783294)])
run assertion Return(Invoke { mod_ref: None, func: "i32_store8", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: Some("Nm"), func: "Mm.load", args: [I32(12)] }, [I32(2)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 41, 3, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value-cond", args: [I32(0)] }, [])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 106, 40, 2, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_select_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(619303768945071200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(24885814612848646000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: Some("Nm"), func: "load", args: [I32(12)] }, [I32(242)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(1.0000001)] }, [F32(1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 48, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(inf)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 106, 65, 1, 54, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_select_to_abs", args: [F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(1.0000002)] }, [F32(1.0000001)])
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [I32(0)] }, [])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(1.0000000000000002)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_select_to_abs", args: [F32(-0.0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 49, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(inf)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 1, 106, 65, 0, 54, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(1.0000000000000004)] }, [F64(1.0000000000000002)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_select_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "type-mixed", args: [I64(1), F32(2.2), F64(3.3), I32(4), I32(5)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: Some("Mm"), func: "load", args: [I32(12)] }, [I32(167)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_select_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(0.9999999)] }, [F32(0.99999994)])
run assertion Return(Invoke { mod_ref: None, func: "write", args: [I64(1), F32(2.0), F64(3.3), I32(4), I32(5)] }, [I64(56)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 50, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i64_store8", args: [] }, [I32(258)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(inf)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 106, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: Some("Nm"), func: "Mm.load", args: [I32(12)] }, [I32(167)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_select_to_abs", args: [F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(0.9999998)] }, [F32(0.9999999)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 1, 1, 127, 1, 33, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i32_store16", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(inf)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 51, 1, 0, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "i64_store16", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 113, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.9999999999999998)] }, [F64(0.9999999999999999)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 1, 1, 127, 67, 0, 0, 0, 0, 33, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_select_to_abs", args: [F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 52, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_select_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: Some("Nm"), func: "load", args: [I32(12)] }, [I32(242)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(0.9999999999999997)] }, [F64(0.9999999999999998)])
run assertion Return(Invoke { mod_ref: None, func: "i64_store32", args: [] }, [I32(258)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(-inf), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 109, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_select_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 53, 2, 0, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: Some("Om"), func: "load", args: [I32(12)] }, [I32(167)])
run assertion Return(Invoke { mod_ref: None, func: "f32.abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 1, 1, 125, 68, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 110, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_call", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_select_to_abs", args: [F32(0.0)] }, [F32(0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "i64_call", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 151, 128, 128, 128, 0, 1, 145, 128, 128, 128, 0, 2, 1, 124, 1, 126, 68, 0, 0, 0, 0, 0, 0, 0, 0, 33, 1, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 42, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 139, 128, 128, 128, 0, 1, 2, 77, 109, 3, 109, 101, 109, 2, 0, 0, 11, 137, 128, 128, 128, 0, 1, 0, 65, 128, 128, 4, 11, 1, 97]), "data segment does not fit")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_select_to_abs", args: [F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "i32_call_indirect", args: [] }, [I32(66052)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 108, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_select_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 43, 3, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 1, 33, 0, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "i64_call_indirect", args: [] }, [I32(66052)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_select_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.0)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 114, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 40, 2, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "i32_select", args: [] }, [I32(66053)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_select_to_abs", args: [F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.neg", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: Some("Pm"), func: "grow", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.0)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 33, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 111, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: Some("Pm"), func: "grow", args: [I32(2)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.0)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 2, 64, 40, 2, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 112, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.0)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 125, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64_select", args: [] }, [I32(66053)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_select_to_abs", args: [F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.0)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 119, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 3, 64, 40, 2, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_select_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f32.neg", args: [F32(NaN)] }, [F32(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 124, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 33, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_select_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64.neg", args: [F64(NaN)] }, [F64(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 120, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_select_to_abs", args: [F64(0.0)] }, [F64(-0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.neg", args: [F64(NaN)] }, [F64(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 40, 2, 0, 26, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 33, 0, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "f32_add", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_select_to_abs", args: [F64(-0.0)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 116, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.copysign", args: [F32(NaN), F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(-0.0)] }, [F64(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 2, 64, 33, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64_add", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 127, 65, 0, 5, 40, 2, 0, 11, 26, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.copysign", args: [F32(NaN), F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(0.0)] }, [F64(-inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f32_sub", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 117, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(-0.0)] }, [F64(inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "f64_sub", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 3, 64, 33, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 2, 64, 40, 2, 0, 12, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 118, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32_mul", args: [] }, [I32(258)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.copysign", args: [F32(NaN), F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F32(NaN), F32(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 65, 1, 4, 64, 33, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64_mul", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "f32.copysign", args: [F32(NaN), F32(NaN)] }, [F32(NaN)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 107, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32_div", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(-0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 65, 0, 2, 64, 40, 2, 0, 65, 1, 13, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.copysign", args: [F64(NaN), F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64_div", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 127, 65, 0, 5, 33, 0, 11, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.copysign", args: [F64(NaN), F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 115, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 2, 64, 40, 2, 0, 14, 0, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.copysign", args: [F64(NaN), F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32_copysign", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 2, 64, 33, 0, 12, 0, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.copysign", args: [F64(NaN), F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64_copysign", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 40, 2, 0, 15, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 69, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.ceil", args: [F32(0.99999994)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_select_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f32_eq", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 2, 64, 33, 0, 13, 0, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 40, 2, 0, 65, 1, 65, 2, 27, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.ceil", args: [F32(1.0000001)] }, [F32(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 103, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64_eq", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_select_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.ceil", args: [F64(0.9999999999999999)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32_ne", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 104, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64_ne", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 0, 0, 96, 1, 127, 1, 127, 3, 131, 128, 128, 128, 0, 2, 0, 1, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 151, 128, 128, 128, 0, 2, 136, 128, 128, 128, 0, 0, 40, 2, 0, 16, 1, 26, 11, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_select_to_abs", args: [F64(0.0)] }, [F64(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 2, 64, 33, 0, 14, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32_lt", args: [] }, [I32(258)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 105, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.ceil", args: [F64(1.0000000000000002)] }, [F64(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64_lt", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_select_to_abs", args: [F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 33, 0, 15, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 70, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 1, 127, 1, 127, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 5, 131, 128, 128, 128, 0, 1, 0, 0, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 157, 128, 128, 128, 0, 2, 132, 128, 128, 128, 0, 0, 32, 0, 11, 142, 128, 128, 128, 0, 0, 2, 127, 40, 2, 0, 65, 0, 17, 0, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f32_le", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 33, 0, 65, 1, 65, 2, 27, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_select_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 78, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64_le", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 1, 1, 127, 40, 2, 0, 33, 0, 32, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_select_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 79, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.ceil", args: [F32(8388607.5)] }, [F32(8388608.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 138, 128, 128, 128, 0, 2, 96, 1, 127, 0, 96, 1, 127, 1, 127, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 149, 128, 128, 128, 0, 2, 134, 128, 128, 128, 0, 0, 33, 0, 16, 1, 11, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32_gt", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 74, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64_gt", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f32_ge", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 1, 1, 127, 40, 2, 0, 34, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 138, 128, 128, 128, 0, 2, 96, 1, 127, 1, 127, 96, 1, 127, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 155, 128, 128, 128, 0, 2, 132, 128, 128, 128, 0, 0, 32, 0, 11, 140, 128, 128, 128, 0, 0, 2, 127, 33, 0, 65, 0, 17, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.ceil", args: [F32(-8388607.5)] }, [F32(-8388607.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64_ge", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_select_to_abs", args: [F64(0.0)] }, [F64(0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.ceil", args: [F64(4503599627370495.5)] }, [F64(4503599627370496.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32_min", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "f64.ceil", args: [F64(-4503599627370495.5)] }, [F64(-4503599627370495.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 40, 2, 0, 36, 0, 35, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 125, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 1, 1, 127, 67, 0, 0, 0, 0, 33, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "type-local-i32", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_select_to_abs", args: [F64(-0.0)] }, [F64(-0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-i64", args: [] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64_min", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "f32.ceil", args: [F32(16777215.0)] }, [F32(16777215.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 40, 2, 0, 64, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32_max", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 126, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 1, 1, 125, 67, 0, 0, 0, 0, 33, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64_max", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.ceil", args: [F32(-16777215.0)] }, [F32(-16777215.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32_store", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-f32", args: [] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(-0.0)] }, [F64(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 75, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64_store", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(-0.5)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(-1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "type-local-f64", args: [] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32_call", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 2, 1, 124, 1, 126, 66, 0, 33, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(0.0)] }, [F64(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 40, 2, 0, 40, 2, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.ceil", args: [F64(9007199254740991.0)] }, [F64(9007199254740991.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(-0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(0.5)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 65, 1, 33, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64_call", args: [] }, [I32(258)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 76, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.ceil", args: [F64(-9007199254740991.0)] }, [F64(-9007199254740991.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f32_call_indirect", args: [] }, [I32(66052)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 126, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 66, 1, 33, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(-0.5)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-i32", args: [I32(2)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "f64_call_indirect", args: [] }, [I32(66052)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 40, 2, 0, 65, 1, 54, 2, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 77, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(0.5)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.floor", args: [F32(-0.99999994)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-i64", args: [I64(3)] }, [I64(11)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 125, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 67, 0, 0, 128, 63, 33, 0, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f32_select", args: [] }, [I32(66053)])
test run_load ... ok
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f32.floor", args: [F32(-1.0000001)] }, [F32(-2.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(-1.0)] }, [F64(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 72, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.floor", args: [F64(-0.9999999999999999)] }, [F64(-1.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f64_select", args: [] }, [I32(66053)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(1.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-f32", args: [F32(4.4)] }, [F32(11.1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 124, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 33, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(-6.2831855)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 73, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "type-param-f64", args: [F64(5.5)] }, [F64(12.2)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(-1.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.floor", args: [F64(-1.0000000000000002)] }, [F64(-2.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(1.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_if_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 2, 1, 127, 1, 126, 65, 0, 33, 3, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(-6.283185307179586)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_if_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 71, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.floor", args: [F32(-8388607.5)] }, [F32(-8388608.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "br_if", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-first", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_if_to_abs", args: [F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(6.283185307179586)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 2, 1, 127, 1, 126, 65, 0, 33, 247, 164, 234, 6, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "f32.floor", args: [F32(8388607.5)] }, [F32(8388607.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "as-block-mid", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "br_table", args: [] }, [I32(258)])
test run_i32 ... ok
run assertion Return(Invoke { mod_ref: None, func: "f64.floor", args: [F64(-4503599627370495.5)] }, [F64(-4503599627370496.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_lt_if_to_abs", args: [F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-last", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.floor", args: [F64(4503599627370495.5)] }, [F64(4503599627370495.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(-6.283185307179586)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507203)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(inf)])
test run_left_to_right ... ok
run assertion Return(Invoke { mod_ref: None, func: "f32.floor", args: [F32(88607.0)] }, [F32(88607.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(6.283185307179586)] }, [F64(inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_if_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-first", args: [I32(0)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "f64.floor", args: [F64(88607.0)] }, [F64(88607.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 127, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 65, 0, 33, 2, 11]), "unknown local")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_if_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-mid", args: [I32(0)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "f32.trunc", args: [F32(-8388607.5)] }, [F32(-8388607.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "as-loop-last", args: [I32(0)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_if_to_abs", args: [F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.trunc", args: [F32(8388607.5)] }, [F32(8388607.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [I32(0)] }, [I32(9)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_le_if_to_abs", args: [F32(-0.0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 127, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 33, 247, 242, 206, 212, 2, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-cond", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.trunc", args: [F64(-4503599627370495.5)] }, [F64(-4503599627370495.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_if_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value", args: [I32(0)] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 133, 128, 128, 128, 0, 2, 0, 0, 0, 0]), "multiple memories")
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507203)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_if_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 2, 1, 127, 1, 126, 65, 0, 33, 3, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value-cond", args: [I32(0)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(-0.5)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_if_to_abs", args: [F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.trunc", args: [F64(4503599627370495.5)] }, [F64(4503599627370495.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 148, 128, 128, 128, 0, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 6, 109, 101, 109, 111, 114, 121, 2, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0]), "multiple memories")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-index", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(0.5)] }, [F64(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 2, 1, 127, 1, 126, 65, 0, 33, 247, 168, 153, 102, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "f32.nearest", args: [F32(8388609.0)] }, [F32(8388609.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_gt_if_to_abs", args: [F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(-0.5)] }, [F64(-inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value", args: [I32(0)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_if_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.nearest", args: [F32(8388610.0)] }, [F32(8388610.0)])
test run_local_set ... run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value-index", args: [I32(0)] }, [I32(6)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
ok
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(0.5)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.nearest", args: [F32(0.49999997)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_if_to_abs", args: [F32(NaN)] }, [F32(NaN)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "store_at_zero", args: [] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [I32(0)] }, [I32(7)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_if_to_abs", args: [F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(-1.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "memsize", args: [] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "load_at_zero", args: [] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-cond", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_ge_if_to_abs", args: [F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.nearest", args: [F32(281474960000000.0)] }, [F32(281474960000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "store_at_page_size", args: [] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(1)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(1.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_if_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64.nearest", args: [F64(4503599627370497.0)] }, [F64(4503599627370497.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "load_at_page_size", args: [] }, "out of bounds memory access")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(0)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(-1.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_if_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.nearest", args: [F64(4503599627370498.0)] }, [F64(4503599627370498.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(0), I32(1)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(1.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "memsize", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_if_to_abs", args: [F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.nearest", args: [F64(0.49999999999999994)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "as-select-second", args: [I32(0), I32(0)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(-6.283185307179586)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-cond", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.nearest", args: [F64(81129638414606670000000000000000.0)] }, [F64(81129638414606670000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_lt_if_to_abs", args: [F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(6.283185307179586)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.nearest", args: [F32(4.5)] }, [F32(4.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-first", args: [I32(0)] }, [I32(4294967295)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.nearest", args: [F32(-4.5)] }, [F32(-4.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_if_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(-6.283185307179586)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-mid", args: [I32(0)] }, [I32(4294967295)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.nearest", args: [F32(-3.5)] }, [F32(-4.0)])
run assertion Return(Invoke { mod_ref: None, func: "memsize", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_if_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-last", args: [I32(0)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.nearest", args: [F64(4.5)] }, [F64(4.0)])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_if_to_abs", args: [F64(0.0)] }, [F64(-0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-inf)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 11, 134, 128, 128, 128, 0, 1, 0, 65, 0, 11, 0]), "unknown memory")
run assertion Return(Invoke { mod_ref: None, func: "f64.nearest", args: [F64(-4.5)] }, [F64(-4.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(6.283185307179586)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [I32(0)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_le_if_to_abs", args: [F64(-0.0)] }, [F64(0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.nearest", args: [F64(-3.5)] }, [F64(-4.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 11, 134, 128, 128, 128, 0, 1, 0, 65, 0, 11, 0]), "unknown memory")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_if_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "test_store_to_load", args: [] }, [I32(128)])
run assertion Return(Invoke { mod_ref: None, func: "f32.nearest", args: [F32(-8388607.5)] }, [F32(-8388608.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [I32(0)] }, [I32(4294967295)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 11, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 120]), "unknown memory")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_if_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f32.nearest", args: [F32(8388607.5)] }, [F32(8388608.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [I32(0)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "test_redundant_load", args: [] }, [I32(128)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 42, 2, 0, 26, 11]), "unknown memory")
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-index", args: [I32(0)] }, [I32(4294967295)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_if_to_abs", args: [F64(0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.nearest", args: [F64(-4503599627370495.5)] }, [F64(-4503599627370496.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "test_dead_store", args: [] }, [F32(0.000000000000000000000000000000000000000000049)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_gt_if_to_abs", args: [F64(-0.0)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 56, 2, 0, 11]), "unknown memory")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [] }, [])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "malloc_aliasing", args: [] }, [I32(43)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_if_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64.nearest", args: [F64(4503599627370495.5)] }, [F64(4503599627370496.0)])
run assertion Return(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [I32(0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
test run_memory_redundancy ... ok
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [] }, [])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_if_to_abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 44, 0, 0, 26, 11]), "unknown memory")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-load-address", args: [I32(0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
test run_float_misc ... ok
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 65, 0, 58, 0, 0, 11]), "unknown memory")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_if_to_abs", args: [F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-loadN-address", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-address", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_ge_if_to_abs", args: [F64(-0.0)] }, [F64(-0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-store-value", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 63, 0, 26, 11]), "unknown memory")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(-inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-storeN-address", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-storeN-value", args: [I32(0)] }, [])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 64, 0, 26, 11]), "unknown memory")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [F32(0.0)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 132, 128, 128, 128, 0, 1, 1, 1, 0]), "size minimum must not be greater than maximum")
run assertion Return(Invoke { mod_ref: None, func: "as-binary-left", args: [I32(0)] }, [I32(13)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-binary-right", args: [I32(0)] }, [I32(6)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 133, 128, 128, 128, 0, 1, 0, 129, 128, 4]), "memory size must be at most 65536 pages (4GiB)")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.0)] })
run assertion Return(Invoke { mod_ref: Some("Pm"), func: "grow", args: [I32(0)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "as-test-operand", args: [I32(0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.0)] })
run assertion Return(Invoke { mod_ref: Some("Pm"), func: "grow", args: [I32(1)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.5)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.incorrect_correction", args: [] }, [F32(0.00000011920929)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "as-compare-left", args: [I32(0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.incorrect_correction", args: [] }, [F64(-0.0000000000000002220446049250313)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-compare-right", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-convert-operand", args: [I64(0)] }, [I32(41)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f", args: [] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 135, 128, 128, 128, 0, 1, 0, 128, 128, 128, 128, 8]), "memory size must be at most 65536 pages (4GiB)")
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-size", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "store", args: [I32(4294967292), I32(42)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(0.0)] }, [F32(0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "load", args: [I32(4294967292)] }, [I32(42)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "store", args: [I32(4294967293), I32(13)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(-inf)] }, [F64(-inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "load", args: [I32(4294967293)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "calculate", args: [] }, [F32(-466.92685)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "store", args: [I32(4294967294), I32(13)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(NaN)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "load", args: [I32(4294967294)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(-inf), F64(NaN)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "store", args: [I32(4294967295), I32(13)] }, "out of bounds memory access")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(NaN)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "load", args: [I32(4294967295)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(inf), F64(NaN)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "store", args: [I32(0), I32(13)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
test run_const ... run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-0.0)] }, [F64(NaN)])
ok
run assertion TrapAction(Invoke { mod_ref: None, func: "load", args: [I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "calculate", args: [] }, [F64(-466.926956301738)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "store", args: [I32(2147483648), I32(13)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(0.0)] }, [F64(NaN)])
run assertion TrapAction(Invoke { mod_ref: None, func: "load", args: [I32(2147483648)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-0.0)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "memory.grow", args: [I32(65537)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(-0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(0.0)] }, [F64(NaN)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(0.5)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(-0.5)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "llvm_pr26746", args: [F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(-1.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(NaN)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(1.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(-1.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(1.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(-6.2831855)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "llvm_pr27153", args: [I32(33554434)] }, [F32(25165824.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(6.2831855)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(-6.2831855)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(6.2831855)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "load_at_zero", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(340282350000000000000000000000000000000.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "store_at_zero", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "llvm_pr27036", args: [I32(4269932491), I32(14942208)] }, [F32(-10092596.0)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "load_at_zero", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "store_at_page_size", args: [] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "load_at_page_size", args: [] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(4)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "eq", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(-0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(NaN)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(-0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(NaN)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(NaN)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.0)] }, [F32(-0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.store", args: [I32(65536), I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "thepast0", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403), F64(0.9999999999999999), F64(2.0), F64(0.5)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044501477170144023)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.store", args: [I32(65535), I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.store", args: [I32(65534), I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(NaN)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "thepast1", args: [F64(0.00000000000000005551115123125783), F64(0.9999999999999999), F64(0.00000000000000005551115123125783)] }, [F64(-0.000000000000000000000000000000006162975822039155)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.store", args: [I32(65533), I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-0.5)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.store", args: [I32(4294967295), I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(0.5)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "thepast2", args: [F32(0.000000000000000000000000000000000000023509887), F32(0.5), F32(1.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.store", args: [I32(4294967294), I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-0.5)] }, [F64(NaN)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.store", args: [I32(4294967293), I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(0.5)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.store", args: [I32(4294967292), I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-1.0)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(65536), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(1.0)] }, [F64(NaN)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(65535), I64(0)] }, "out of bounds memory access")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "inverse", args: [F32(96.0)] }, [F32(0.010416667)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(65534), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-1.0)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(65533), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(1.0)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(65532), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-6.283185307179586)] }, [F64(NaN)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(65531), I64(0)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(6.283185307179586)] }, [F64(NaN)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(65530), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(65529), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-6.283185307179586)] }, [F64(NaN)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(4294967295), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32_sqrt_minus_2", args: [F32(4.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(6.283185307179586)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [F32(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(4294967294), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "f64_sqrt_minus_2", args: [F64(4.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(4294967293), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(4)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.5)] }, [F32(-0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(4294967292), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [F32(-0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(4294967291), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(4294967290), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(4294967289), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(-0.5)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store", args: [I32(4294967288), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(0.5)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.5)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.store", args: [I32(65536), F32(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(1.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.5)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.store", args: [I32(65535), F32(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_recip_recip", args: [F32(-70435790000000000000.0)] }, [F32(-70435784000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(-1.0)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.store", args: [I32(65534), F32(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: Some("Pm"), func: "grow", args: [I32(1)] }, [I32(4)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_recip_recip", args: [F32(0.000000000000000000000012466101)] }, [F32(0.0000000000000000000000124661)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.store", args: [I32(65533), F32(0.0)] }, "out of bounds memory access")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(1.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(-1.0)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.store", args: [I32(4294967295), F32(0.0)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_recip_recip", args: [F32(0.000000000000000000097184545)] }, [F32(0.00000000000000000009718455)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.store", args: [I32(4294967294), F32(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [F32(0.000000000000000000000000000000000000000000008)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_recip_recip", args: [F32(-30.400759)] }, [F32(-30.40076)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.store", args: [I32(4294967293), F32(0.0)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [F32(-0.000000000000000000000000000000000000000000008)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_recip_recip", args: [F32(2331659200000000000000.0)] }, [F32(2331659000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-1.0)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.store", args: [I32(4294967292), F32(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_recip_recip", args: [F32(-0.0)] }, [F32(-0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [F32(-0.000000000000000000000000000000000000000000008)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(65536), F64(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_recip_recip", args: [F32(0.0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 135, 128, 128, 128, 0, 1, 0, 255, 255, 255, 255, 15]), "memory size must be at most 65536 pages (4GiB)")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-inf)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(65535), F64(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_recip_recip", args: [F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [F32(0.000000000000000000000000000000000000000000008)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(1.0)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 134, 128, 128, 128, 0, 1, 1, 0, 129, 128, 4]), "memory size must be at most 65536 pages (4GiB)")
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(65534), F64(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_recip_recip", args: [F32(inf)] }, [F32(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-1.0)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(65533), F64(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [F32(0.00000047683713)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 136, 128, 128, 128, 0, 1, 1, 0, 128, 128, 128, 128, 8]), "memory size must be at most 65536 pages (4GiB)")
run assertion Return(Invoke { mod_ref: None, func: "empty", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_recip_recip", args: [F64(-657971534362886860000000000000000000000000000.0)] }, [F64(-657971534362886900000000000000000000000000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-1.0)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(65532), F64(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "singular", args: [] }, [I32(7)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 5, 136, 128, 128, 128, 0, 1, 1, 0, 255, 255, 255, 255, 15]), "memory size must be at most 65536 pages (4GiB)")
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(65531), F64(0.0)] }, "out of bounds memory access")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_recip_recip", args: [F64(-144246931868576430000.0)] }, [F64(-144246931868576420000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [F32(-0.00000047683713)])
run assertion Return(Invoke { mod_ref: None, func: "multi", args: [] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(65530), F64(0.0)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "nested", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_recip_recip", args: [F64(184994689206231350000000000000000000000000000000000.0)] }, [F64(184994689206231330000000000000000000000000000000000.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(65529), F64(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.00000047683713)])
run assertion Return(Invoke { mod_ref: None, func: "deep", args: [] }, [I32(150)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(4294967295), F64(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_recip_recip", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005779584288006583)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005779584288006582)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(4294967294), F64(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [F32(0.00000047683713)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-mid", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_recip_recip", args: [F64(51501178696141640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(51501178696141634000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "as-select-last", args: [] }, [I32(2)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(4294967293), F64(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_recip_recip", args: [F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-condition", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(4294967292), F64(0.0)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_recip_recip", args: [F64(0.0)] }, [F64(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(4294967291), F64(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(inf)] }, [F32(-inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_recip_recip", args: [F64(-inf)] }, [F64(-inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(4294967290), F64(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-inf)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-first", args: [] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(4294967289), F64(0.0)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_recip_recip", args: [F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-last", args: [] }, [I32(2)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.store", args: [I32(4294967288), F64(0.0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(inf)] }, [F64(NaN)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-first", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(inf)] }, [F32(inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.store8", args: [I32(65536), I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(-inf)] }, [F64(NaN)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-last", args: [] }, [I32(2)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.store8", args: [I32(4294967295), I32(0)] }, "out of bounds memory access")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(inf)] }, [F64(NaN)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.store16", args: [I32(65536), I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [] }, [I32(2)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(NaN)] }, [F64(NaN)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.store16", args: [I32(65535), I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-store-first", args: [] }, [])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.store16", args: [I32(4294967295), I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-last", args: [] }, [])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.store16", args: [I32(4294967294), I32(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store8", args: [I32(65536), I64(0)] }, "out of bounds memory access")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "copysign", args: [F64(NaN), F64(NaN)] }, [F64(NaN)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store8", args: [I32(4294967295), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(0.0)] }, [F64(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store16", args: [I32(65536), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store16", args: [I32(65535), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store16", args: [I32(4294967295), I64(0)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store16", args: [I32(4294967294), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "foo", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "data", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [F32(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store32", args: [I32(65536), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "cast", args: [] }, [F64(42.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.0)] }, [F32(-0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store32", args: [I32(65535), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load8_s", args: [I32(4294967295)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store32", args: [I32(65534), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(-inf)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "i32_load8_u", args: [I32(4294967295)] }, [I32(255)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store32", args: [I32(65533), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "foo", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_algebraic_factoring", args: [F32(-0.000000000000000053711865), F32(0.00000000000000009744328)] }, [F32(-0.000000000000000000000000000000006610229)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_s", args: [I32(4294967295)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(-0.5)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store32", args: [I32(4294967295), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_u", args: [I32(4294967295)] }, [I32(65535)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_algebraic_factoring", args: [F32(-19756732.0), F32(32770204.0)] }, [F32(-683557800000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(NaN)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store32", args: [I32(4294967294), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "i32_load8_s", args: [I32(100)] }, [I32(100)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_algebraic_factoring", args: [F32(52314150000000.0), F32(-145309980000000.0)] }, [F32(-18378221000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(0.5)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store32", args: [I32(4294967293), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load8_u", args: [I32(200)] }, [I32(200)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(-1.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.store32", args: [I32(4294967292), I64(0)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_algebraic_factoring", args: [F32(195260.38), F32(-227.75723)] }, [F32(38126563000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_s", args: [I32(20000)] }, [I32(20000)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(NaN)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load", args: [I32(65536)] }, "out of bounds memory access")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_u", args: [I32(40000)] }, [I32(40000)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_algebraic_factoring", args: [F32(-237.48706), F32(-972341.5)] }, [F32(-945447960000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load", args: [I32(65535)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load8_s", args: [I32(4275856707)] }, [I32(67)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(1.0)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load", args: [I32(65534)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load8_s", args: [I32(878104047)] }, [I32(4294967279)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load", args: [I32(65533)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load8_u", args: [I32(4275856707)] }, [I32(67)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load", args: [I32(4294967295)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load8_u", args: [I32(878104047)] }, [I32(239)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load", args: [I32(4294967294)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_s", args: [I32(4275856707)] }, [I32(25923)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load", args: [I32(4294967293)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_algebraic_factoring", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009639720335949767), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008019175443606207)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006430717386609473)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_s", args: [I32(878104047)] }, [I32(4294954479)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load", args: [I32(4294967292)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_u", args: [I32(4275856707)] }, [I32(25923)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "i32_load16_u", args: [I32(878104047)] }, [I32(52719)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(65535)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [F32(0.000000000000000000000000000000000000005877472)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load8_s", args: [I64(18446744073709551615)] }, [I64(18446744073709551615)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(65534)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "i64_load8_u", args: [I64(18446744073709551615)] }, [I64(255)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_s", args: [I64(18446744073709551615)] }, [I64(18446744073709551615)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(65533)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.5)] }, [F32(-0.000000000000000000000000000000000000005877472)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(-0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_u", args: [I64(18446744073709551615)] }, [I64(65535)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(65532)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_s", args: [I64(18446744073709551615)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [F32(-0.000000000000000000000000000000000000005877472)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(-inf)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(65531)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_u", args: [I64(18446744073709551615)] }, [I64(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(-1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.5)] }, [F32(0.000000000000000000000000000000000000005877472)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load8_s", args: [I64(100)] }, [I64(100)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(65530)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load8_u", args: [I64(200)] }, [I64(200)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(65529)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(-6.283185307179586)] }, [F64(6.283185307179586)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(4294967295)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_s", args: [I64(20000)] }, [I64(20000)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(-inf)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(4294967294)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_u", args: [I64(40000)] }, [I64(40000)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(1.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(4294967293)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_s", args: [I64(20000)] }, [I64(20000)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(4294967292)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_u", args: [I64(40000)] }, [I64(40000)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(4294967291)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "i64_load8_s", args: [I64(18364758543954109763)] }, [I64(67)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(4294967290)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(1.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "i64_load8_s", args: [I64(3771275841602506223)] }, [I64(18446744073709551599)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(4294967289)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load8_u", args: [I64(18364758543954109763)] }, [I64(67)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load", args: [I32(4294967288)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [F32(0.00000000000000000000000000000000000007385849)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load8_u", args: [I64(3771275841602506223)] }, [I64(239)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.load", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_s", args: [I64(18364758543954109763)] }, [I64(25923)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.load", args: [I32(65535)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [F32(-0.00000000000000000000000000000000000007385849)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_s", args: [I64(3771275841602506223)] }, [I64(18446744073709538799)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.load", args: [I32(65534)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_u", args: [I64(18364758543954109763)] }, [I64(25923)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.load", args: [I32(65533)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [F32(-0.00000000000000000000000000000000000007385849)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load16_u", args: [I64(3771275841602506223)] }, [I64(52719)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.load", args: [I32(4294967295)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(0.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_s", args: [I64(18364758543954109763)] }, [I64(1446274371)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.load", args: [I32(4294967294)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [F32(0.00000000000000000000000000000000000007385849)])
run assertion Return(Invoke { mod_ref: Some("Pm"), func: "grow", args: [I32(0)] }, [I32(5)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.load", args: [I32(4294967293)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_s", args: [I64(3771275841602506223)] }, [I64(18446744071976963567)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: Some("Pm"), func: "grow", args: [I32(1)] }, [I32(4294967295)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f32.load", args: [I32(4294967292)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_u", args: [I64(18364758543954109763)] }, [I64(1446274371)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [F32(3.9999998)])
run assertion Return(Invoke { mod_ref: Some("Pm"), func: "grow", args: [I32(0)] }, [I32(5)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "ne", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "i64_load32_u", args: [I64(3771275841602506223)] }, [I64(2562379247)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(65535)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [F32(-3.9999998)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 167, 128, 128, 128, 0, 3, 8, 115, 112, 101, 99, 116, 101, 115, 116, 5, 112, 114, 105, 110, 116, 0, 0, 2, 77, 109, 3, 109, 101, 109, 2, 0, 1, 2, 77, 109, 3, 116, 97, 98, 1, 112, 0, 0, 11, 137, 128, 128, 128, 0, 1, 0, 65, 0, 11, 3, 97, 98, 99]), "unknown import")
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(65534)] }, "out of bounds memory access")
test run_memory ... ok
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(65533)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [F32(-3.9999998)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: Some("Mm"), func: "load", args: [I32(0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(65532)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-inf)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(65531)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [F32(3.9999998)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 139, 128, 128, 128, 0, 1, 2, 77, 109, 3, 109, 101, 109, 2, 0, 1, 11, 145, 128, 128, 128, 0, 2, 0, 65, 0, 11, 3, 97, 98, 99, 0, 65, 128, 128, 20, 11, 1, 100]), "data segment does not fit")
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(65530)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args}, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(65529)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-inf)] }, [F32(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(inf)] })
run assertion Return(Invoke { mod_ref: Some("Mm"), func: "load", args: [I32(0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(4294967295)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(inf)] }, [F32(-inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(4294967294)] }, "out of bounds memory access")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(4294967293)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(-inf)] }, [F32(-inf)])
run assertion Unlinkable(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 2, 139, 128, 128, 128, 0, 1, 2, 77, 109, 3, 109, 101, 109, 2, 0, 1, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11, 11, 137, 128, 128, 128, 0, 1, 0, 65, 0, 11, 3, 97, 98, 99]), "elements segment does not fit")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(-inf)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(4294967292)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(inf)] }, [F32(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(inf)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(4294967291)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(-0.5)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: Some("Mm"), func: "load", args: [I32(0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(4294967290)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "ne", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(-0.5)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(4294967289)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(-inf)] }, [F64(inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "f64.load", args: [I32(4294967288)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(0.5)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(inf)] }, [F64(inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load8_s", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load8_s", args: [I32(4294967295)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "abs", args: [F64(NaN)] }, [F64(NaN)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load8_u", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(-1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(0.0)] }, [F64(-0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load8_u", args: [I32(4294967295)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(1.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args}, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load16_s", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load16_s", args: [I32(65535)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(6.2831855)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load16_s", args: [I32(4294967295)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion TrapInstantiate(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 136, 128, 128, 128, 0, 2, 96, 0, 1, 127, 96, 0, 0, 2, 155, 128, 128, 128, 0, 2, 2, 77, 115, 6, 109, 101, 109, 111, 114, 121, 2, 0, 1, 2, 77, 115, 5, 116, 97, 98, 108, 101, 1, 112, 0, 1, 3, 131, 128, 128, 128, 0, 2, 0, 1, 8, 129, 128, 128, 128, 0, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 148, 128, 128, 128, 0, 2, 134, 128, 128, 128, 0, 0, 65, 173, 189, 3, 11, 131, 128, 128, 128, 0, 0, 0, 11, 11, 139, 128, 128, 128, 0, 1, 0, 65, 0, 11, 5, 104, 101, 108, 108, 111]), "unreachable")
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load16_s", args: [I32(4294967294)] }, "out of bounds memory access")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(-0.0)] }, [F32(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load16_u", args: [I32(65536)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(6.2831855)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load16_u", args: [I32(65535)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load16_u", args: [I32(4294967295)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: Some("Ms"), func: "get memory[0]", args: [] }, [I32(104)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(0.0)] }, [F32(0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args}, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i32.load16_u", args: [I32(4294967294)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: Some("Ms"), func: "get table[0]", args: [] }, [I32(57005)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load8_s", args: [I32(65536)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load8_s", args: [I32(4294967295)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
test run_linking ... run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
ok
run assertion Return(Invoke { mod_ref: None, func: "as-call-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load8_u", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "add", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(-inf)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load8_u", args: [I32(4294967295)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "as-drop-operand", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(inf)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load16_s", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000005877472)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(-0.0)] }, [F64(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load16_s", args: [I32(65535)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000005877472)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load16_s", args: [I32(4294967295)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-load-operand", args: [] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load16_s", args: [I32(4294967294)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000005877472)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load16_u", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "as-binary-operand", args: [] }, [I32(12)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load16_u", args: [I32(65535)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000005877472)])
run assertion Return(Invoke { mod_ref: None, func: "as-test-operand", args: [] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load16_u", args: [I32(4294967295)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "as-compare-operand", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(-0.5)] }, [F32(0.25)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "break-bare", args: [] }, [I32(19)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load16_u", args: [I32(4294967294)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(0.5)] }, [F32(-0.25)])
run assertion Return(Invoke { mod_ref: None, func: "break-value", args: [] }, [I32(18)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_s", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(-0.5)] }, [F32(-0.25)])
run assertion Return(Invoke { mod_ref: None, func: "break-repeated", args: [] }, [I32(18)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_s", args: [I32(65535)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(0.5)] }, [F32(0.25)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "break-inner", args: [] }, [I32(31)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_s", args: [I32(65534)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(-1.0)] }, [F32(0.5)])
run assertion TrapAction(Invoke { mod_ref: None, func: "store_at_zero", args: [] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_s", args: [I32(65533)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "effects", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(1.0)] }, [F32(-0.5)])
run assertion TrapAction(Invoke { mod_ref: None, func: "load_at_zero", args: [] }, "out of bounds memory access")
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_s", args: [I32(4294967295)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "while", args: [I64(0)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(-1.0)] }, [F32(-0.5)])
run assertion TrapAction(Invoke { mod_ref: None, func: "store_at_page_size", args: [] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_s", args: [I32(4294967294)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "while", args: [I64(1)] }, [I64(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "load_at_page_size", args: [] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(1.0)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(-0.5)] }, [F64(0.5)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_s", args: [I32(4294967293)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "while", args: [I64(2)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(-6.2831855)] }, [F32(3.1415927)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_s", args: [I32(4294967292)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(-1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "while", args: [I64(3)] }, [I64(6)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_u", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(6.2831855)] }, [F32(-3.1415927)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "while", args: [I64(5)] }, [I64(120)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_u", args: [I32(65535)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(-6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(-6.2831855)] }, [F32(-3.1415927)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_u", args: [I32(65534)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "while", args: [I64(20)] }, [I64(2432902008176640000)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_u", args: [I32(65533)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(6.2831855)] }, [F32(3.1415927)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "for", args: [I64(0)] }, [I64(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_u", args: [I32(4294967295)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "for", args: [I64(1)] }, [I64(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_u", args: [I32(4294967294)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(-340282350000000000000000000000000000000.0)] }, [F32(170141170000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "for", args: [I64(2)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(0.0)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_u", args: [I32(4294967293)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "for", args: [I64(3)] }, [I64(6)])
run assertion TrapAction(Invoke { mod_ref: None, func: "i64.load32_u", args: [I32(4294967292)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "for", args: [I64(5)] }, [I64(120)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(340282350000000000000000000000000000000.0)] }, [F32(-170141170000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [I32(65528)] }, [I64(7523094288207667809)])
run assertion Return(Invoke { mod_ref: None, func: "for", args: [I64(20)] }, [I64(2432902008176640000)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "i64.load", args: [I32(0)] }, [I64(7523094288207667809)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(-340282350000000000000000000000000000000.0)] }, [F32(-170141170000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(0.0), F32(7.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
test run_memory_trap ... ok
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(7.0), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(340282350000000000000000000000000000000.0)] }, [F32(170141170000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(1.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(1.0), F32(2.0)] }, [F32(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(1.0), F32(3.0)] }, [F32(4.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(1.0), F32(4.0)] }, [F32(6.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(1.0), F32(100.0)] }, [F32(2550.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(-0.5)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(0.5)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(1.0), F32(101.0)] }, [F32(2601.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(-0.5)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(2.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(3.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(10.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(2.0), F32(2.0)] }, [F32(3.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(2.0), F32(3.0)] }, [F32(4.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(7.0), F32(4.0)] }, [F32(10.309524)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(7.0), F32(100.0)] }, [F32(4381.548)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "neg", args: [F64(NaN)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 166, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 153, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(-0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(-inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 154, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(-0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(-0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(0.5)] }, [F32(-0.5)])
test run_f64_bitwise ... ok
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(-1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(-1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(-1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(-6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(-6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "nesting", args: [F32(7.0), F32(101.0)] }, [F32(2601.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(-6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(0.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 3, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 3, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 3, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 3, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(inf)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 3, 64, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 3, 127, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-1.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 3, 127, 1, 11, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 3, 127, 67, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-func-first", args: [] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-func-mid", args: [] }, [I32(2)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 3, 126, 0, 0, 0, 27, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-func-last", args: [] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-func-everywhere", args: [] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "load_at_zero", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-drop-first", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "store_at_zero", args: [] }, [])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 2, 64, 3, 127, 11, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-drop-last", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "ne", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "load_at_zero", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-drop-everywhere", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(0.0)] }, [F32(0.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "store_at_page_size", args: [] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(3)] }, [I32(3)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 3, 64, 3, 127, 11, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(-1.0)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "load_at_page_size", args: [] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "as-select-mid1", args: [I32(3)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000008)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(4)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-mid2", args: [I32(3)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-last", args: [I32(3)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 3, 127, 11, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000008)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-everywhere", args: [I32(3)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-first", args: [] }, [I32(2)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 108, 111, 111, 112, 32, 101, 110, 100, 32, 36, 108, 41]), "mismatching label")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-mid", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000008)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 108, 111, 111, 112, 32, 36, 97, 32, 101, 110, 100, 32, 36, 108, 41]), "mismatching label")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-last", args: [] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-everywhere", args: [] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000008)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-first", args: [] }, [I32(2)])
test run_loop ... ok
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-mid", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-last", args: [] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.00000000000000000000000000000000000007385849)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-everywhere", args: [] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-condition", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-if-condition", args: [I32(4294967295)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.00000000000000000000000000000000000007385849)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(4)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.00000000000000000000000000000000000007385849)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(3)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br-first", args: [I32(5)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.00000000000000000000000000000000000007385849)])
run assertion Return(Invoke { mod_ref: None, func: "as-br-last", args: [I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br-everywhere", args: [I32(7)] }, [I32(7)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(-0.5)] }, [F32(3.1415927)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-first", args: [I32(4)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-mid", args: [I32(5)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(0.5)] }, [F32(-3.1415927)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-last", args: [I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(-0.5)] }, [F32(-3.1415927)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-everywhere", args: [I32(7)] }, [I32(7)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-first", args: [I32(4)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(0.5)] }, [F32(3.1415927)])
run assertion Return(Invoke { mod_ref: None, func: "load_at_zero", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "store_at_zero", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-mid", args: [I32(5)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(-1.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "load_at_zero", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-last", args: [I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "load_at_page_size", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(1.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-everywhere", args: [I32(7)] }, [I32(7)])
run assertion Return(Invoke { mod_ref: None, func: "store_at_page_size", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "load_at_page_size", args: [] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "as-return-first", args: [I32(5)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(-1.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-return-last", args: [I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(1.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "as-return-everywhere", args: [I32(7)] }, [I32(7)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-first", args: [I32(3), I32(1), I32(2)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(-6.2831855)] }, [F32(39.47842)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-mid1", args: [I32(3), I32(1), I32(2)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(6.2831855)] }, [F32(-39.47842)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-mid2", args: [I32(0), I32(3), I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-i32", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-i64", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(-6.2831855)] }, [F32(-39.47842)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-last", args: [I32(10), I32(9), I32(4294967295)] }, [I32(20)])
run assertion Return(Invoke { mod_ref: None, func: "type-i32", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-f32", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "type-i64", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-call-everywhere", args: [I32(2), I32(1), I32(5)] }, [I32(4294967294)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(6.2831855)] }, [F32(39.47842)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-f64", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "type-f32", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-unary-first", args: [I32(30)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-i32", args: [I32(2)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "type-f64", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-unary-last", args: [I32(30)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "type-i32-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-i64", args: [I64(3)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "type-i64-value", args: [] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-f32", args: [F32(4.4)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-unary-everywhere", args: [I32(12)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-f64", args: [F64(5.5)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "type-f32-value", args: [] }, [F32(3.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-binary-first", args: [I32(3)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "type-f64-value", args: [] }, [F64(4.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "type-mixed", args: [I64(1), F32(2.2), F64(3.3), I32(4), I32(5)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "nullary", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-mid", args: [I32(3)] }, [I32(6)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "unary", args: [] }, [F64(3.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-last", args: [I32(3)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-func-first", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "write", args: [I64(1), F32(2.0), F64(3.3), I32(4), I32(5)] }, [I64(56)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-everywhere", args: [I32(3)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-func-mid", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(-inf)] }, [F32(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-test-first", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-func-last", args: [] }, [])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 1, 1, 127, 65, 0, 33, 0, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-test-last", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-func-value", args: [] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-test-everywhere", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-first", args: [] }, [])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-mid", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-first", args: [I32(3)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.0), F64(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 1, 1, 125, 67, 0, 0, 0, 0, 33, 0, 69, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-last", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-mid", args: [I32(3)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-value", args: [] }, [I32(2)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-compare-last", args: [I32(3)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-first", args: [] }, [I32(3)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 2, 1, 124, 1, 126, 66, 0, 33, 1, 154, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-everywhere", args: [I32(3)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-mid", args: [] }, [I32(4)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-first", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-last", args: [] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 1, 1, 127, 1, 33, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-last", args: [I32(2)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-cond", args: [] }, [])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value", args: [] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value-cond", args: [] }, [I32(9)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 1, 1, 127, 67, 0, 0, 0, 0, 33, 0, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-index", args: [] }, [I64(9)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value", args: [] }, [I32(10)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value-index", args: [] }, [I32(11)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 1, 1, 125, 68, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [] }, [I64(7)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-cond", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(1), I32(6)] }, [I32(3)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 151, 128, 128, 128, 0, 1, 145, 128, 128, 128, 0, 2, 1, 124, 1, 126, 68, 0, 0, 0, 0, 0, 0, 0, 0, 33, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "select_i32", args: [I32(1), I32(2), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(0), I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(0), I32(6)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "select_i64", args: [I64(2), I64(1), I32(1)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(0.0)] }, [F32(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(1), I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "select_f32", args: [F32(1.0), F32(2.0), I32(1)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(0), I32(6)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "select_f64", args: [F64(1.0), F64(2.0), I32(1)] }, [F64(1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 125, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 32, 0, 69, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(1), I32(6)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "select_i32", args: [I32(1), I32(2), I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-second", args: [I32(0), I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "select_i32", args: [I32(2), I32(1), I32(0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 124, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 32, 1, 154, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-select-second", args: [I32(1), I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_algebraic_factoring", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005166066590392027), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001494333315888213)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026688244016362468)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-cond", args: [] }, [I32(7)])
run assertion Return(Invoke { mod_ref: None, func: "select_i64", args: [I64(2), I64(1), I32(4294967295)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.00000047683713)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-first", args: [] }, [I32(12)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(-6.2831855)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 1, 33, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_algebraic_factoring", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002866135870517635), F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012114355254268516)] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014675678175314036)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-mid", args: [] }, [I32(13)])
run assertion Return(Invoke { mod_ref: None, func: "select_i64", args: [I64(2), I64(1), I32(4042322160)] }, [I64(2)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.00000047683713)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-last", args: [] }, [I32(14)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_algebraic_factoring", args: [F64(-1292099281007814900000000000000000000000000000000000000.0), F64(662717187728034000000000000000000000000000000000000000000.0)] }, [F64(-439192401389602300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-func", args: [] }, [I32(20)])
run assertion Return(Invoke { mod_ref: None, func: "select_f32", args: [F32(NaN), F32(1.0), I32(1)] }, [F32(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 33, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [] }, [I32(21)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.00000047683713)])
run assertion Return(Invoke { mod_ref: None, func: "select_f32", args: [F32(NaN), F32(1.0), I32(1)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [] }, [I32(22)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_algebraic_factoring", args: [F64(26242795689010570000000000000000000.0), F64(-1625023398605080200000000000.0)] }, [F64(688684325575149100000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [] }, [I32(23)])
run assertion Return(Invoke { mod_ref: None, func: "select_f32", args: [F32(NaN), F32(1.0), I32(0)] }, [F32(1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 125, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [] }, [I32(17)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.00000047683713)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "select_f32", args: [F32(NaN), F32(1.0), I32(0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "select_f32", args: [F32(2.0), F32(NaN), I32(1)] }, [F32(2.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 124, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 33, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(3.9999998)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "select_f32", args: [F32(2.0), F32(NaN), I32(1)] }, [F32(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-load-address", args: [] }, [F32(1.7)])
run assertion Return(Invoke { mod_ref: None, func: "select_f32", args: [F32(2.0), F32(NaN), I32(0)] }, [F32(NaN)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 3, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-3.9999998)])
run assertion Return(Invoke { mod_ref: None, func: "as-loadN-address", args: [] }, [I64(30)])
run assertion Return(Invoke { mod_ref: None, func: "select_f32", args: [F32(2.0), F32(NaN), I32(0)] }, [F32(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-address", args: [] }, [I32(30)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 247, 164, 234, 6, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "select_f64", args: [F64(NaN), F64(1.0), I32(1)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-3.9999998)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-value", args: [] }, [I32(31)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args}, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 127, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 32, 2, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "select_f64", args: [F64(NaN), F64(1.0), I32(1)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-storeN-address", args: [] }, [I32(32)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(3.9999998)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_algebraic_factoring", args: [F32(0.000000000000022102996), F32(0.0000000000031465275)] }, [F32(-0.0000000000000000000000099001476)])
run assertion Return(Invoke { mod_ref: None, func: "as-storeN-value", args: [] }, [I32(33)])
run assertion Return(Invoke { mod_ref: None, func: "select_f64", args: [F64(NaN), F64(1.0), I32(0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 247, 242, 206, 212, 2, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [] }, [F32(3.4)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.5)] }, [F32(170141170000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_algebraic_factoring", args: [F32(-3289460800000.0), F32(-15941539000.0)] }, [F32(10820299000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "select_f64", args: [F64(NaN), F64(1.0), I32(0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-left", args: [] }, [I32(3)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 3, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-right", args: [] }, [I64(45)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(0.5)] }, [F32(-170141170000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "select_f64", args: [F64(2.0), F64(NaN), I32(1)] }, [F64(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_algebraic_factoring", args: [F32(0.00036497542), F32(-0.00016153714)] }, [F32(0.000000107112804)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-test-operand", args: [] }, [I32(44)])
run assertion Return(Invoke { mod_ref: None, func: "select_f64", args: [F64(2.0), F64(NaN), I32(1)] }, [F64(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 247, 168, 153, 102, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(-0.5)] }, [F32(-170141170000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_algebraic_factoring", args: [F32(0.000000000000065383266), F32(-0.000000000000027412773)] }, [F32(0.000000000000000000000000003523511)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-left", args: [] }, [I32(43)])
run assertion Return(Invoke { mod_ref: None, func: "select_f64", args: [F64(2.0), F64(NaN), I32(0)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-right", args: [] }, [I32(42)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 125, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 1, 1, 127, 67, 0, 0, 0, 0, 33, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_algebraic_factoring", args: [F32(3609682000000000.0), F32(-5260104400000000.0)] }, [F32(-14638896000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(0.5)] }, [F32(170141170000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "select_f64", args: [F64(2.0), F64(NaN), I32(0)] }, [F64(NaN)])
run assertion Return(Invoke { mod_ref: None, func: "as-convert-operand", args: [] }, [I32(41)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "select_trap_l", args: [I32(1)] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-size", args: [] }, [I32(40)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_algebraic_factoring", args: [F64(213640454349895100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-292858755839442800000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(45642243734743850000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 126, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 1, 1, 125, 67, 0, 0, 0, 0, 33, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(-1.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "select_trap_l", args: [I32(0)] }, "unreachable")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 137, 128, 128, 128, 0, 1, 131, 128, 128, 128, 0, 0, 15, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_algebraic_factoring", args: [F64(-1229017115924435800000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-8222158919016600000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-67603897289562710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "select_trap_r", args: [I32(1)] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 2, 1, 124, 1, 126, 66, 0, 33, 1, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "select_trap_r", args: [I32(0)] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(1.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 2, 64, 15, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_algebraic_factoring", args: [F64(5477733829752.252), F64(-970738900948.5906)] }, [F64(29063233895797397000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args}, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
test run_set_local ... ok
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(-1.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_algebraic_factoring", args: [F64(-10689141744923551000000000000000000000000000000000000000.0), F64(-173378393593738040000000000000000000000000000000000.0)] }, [F64(114257751213007240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 3, 64, 15, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-mid", args: [I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(1.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-mid", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_algebraic_factoring", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000010295699877022106), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000008952274637805908)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025858214767010105)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 15, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-select-last", args: [I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-last", args: [I32(1)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-first", args: [I32(0)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(6.2831855)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 127, 65, 0, 5, 15, 11, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-loop-first", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-mid", args: [I32(0)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-mid", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 2, 64, 15, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-loop-last", args: [I32(0)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(6.2831855)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-last", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args}, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-condition", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-condition", args: [I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 2, 64, 15, 65, 1, 13, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(0)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(0)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 2, 64, 15, 14, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "f32.simple_x4_sum", args: [I32(0), I32(16), I32(32)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-first", args: [I32(0)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-first", args: [I32(1)] }, [I32(2)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 15, 15, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [I32(32)] }, [F32(0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-last", args: [I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [I32(36)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-last", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args}, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(-inf)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 15, 65, 1, 65, 2, 27, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-first", args: [I32(0)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [I32(40)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-first", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(2)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.load", args: [I32(44)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-last", args: [I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(-inf)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 138, 128, 128, 128, 0, 2, 96, 0, 1, 127, 96, 1, 127, 1, 127, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 148, 128, 128, 128, 0, 2, 133, 128, 128, 128, 0, 0, 15, 16, 1, 11, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-last", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [I32(0)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [I32(1)] }, [I32(2)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 138, 128, 128, 128, 0, 2, 96, 1, 127, 1, 127, 96, 0, 1, 127, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 154, 128, 128, 128, 0, 2, 132, 128, 128, 128, 0, 0, 32, 0, 11, 139, 128, 128, 128, 0, 0, 2, 127, 15, 65, 0, 17, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [I32(0)] }, "undefined element")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 1, 1, 127, 15, 33, 0, 32, 0, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args}, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [I32(1)] }, "undefined element")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-store-first", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 1, 1, 127, 15, 34, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-store-first", args: [I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-store-last", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-last", args: [I32(1)] }, [])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 15, 36, 0, 35, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-value", args: [I32(0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.simple_x4_sum", args: [I32(0), I32(32), I32(64)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 15, 64, 0, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(-0.0)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 15, 40, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [I32(64)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args}, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [I32(72)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 15, 65, 1, 54, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [I32(80)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 1, 15, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 1, 15, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.load", args: [I32(88)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
test run_return ... ok
run assertion Return(Invoke { mod_ref: None, func: "sub", args}, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(-0.5)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(0.5)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(-0.5)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(0.5)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(-1.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(1.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(-1.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(1.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args}, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(-6.2831855)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(6.2831855)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(-6.2831855)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(6.2831855)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(-340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(-340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(4)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(inf)] }, [F32(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(-inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [F64(-0.5)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [F64(1.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [F64(-1.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(-0.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(0.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [F64(-1.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [F64(6.283185307179586)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "fac-expr", args: [I64(25)] }, [I64(7034535277573963776)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "fac-stack", args: [I64(25)] }, [I64(7034535277573963776)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(-0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(0.5)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "fac-mixed", args: [I64(25)] }, [I64(7034535277573963776)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(0.5)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(-1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(-1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(6.2831855)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.5)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.kahan_sum", args: [I32(0), I32(256)] }, [F32(-21558138000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(1.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(-inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(inf)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(inf)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
test run_stack ... ok
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 8, 129, 128, 128, 128, 0, 1, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "unknown function")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-everywhere", args: [I32(12)] }, [I32(3)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 8, 129, 128, 128, 128, 0, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 15, 11]), "start function")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 8, 129, 128, 128, 128, 0, 0, 10, 136, 128, 128, 128, 0, 1, 130, 128, 128, 128, 0, 0, 11]), "start function")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.plain_sum", args: [I32(0), I32(256)] }, [F32(-16487540000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "get", args: [] }, [I32(68)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "get", args: [] }, [I32(69)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "get", args: [] }, [I32(70)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(-0.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "get", args: [] }, [I32(68)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "get", args: [] }, [I32(69)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(0.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "get", args: [] }, [I32(70)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.5)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
I32(1)
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [I32(0)])
I32(2)
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(-0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [I32(1)])
run assertion TrapInstantiate(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 8, 129, 128, 128, 128, 0, 0, 10, 137, 128, 128, 128, 0, 1, 131, 128, 128, 128, 0, 0, 0, 11]), "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion Malformed(Quoted(None, [40, 109, 111, 100, 117, 108, 101, 32, 40, 102, 117, 110, 99, 32, 36, 97, 32, 40, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 41, 41, 32, 40, 102, 117, 110, 99, 32, 36, 98, 32, 40, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 41, 41, 32, 40, 115, 116, 97, 114, 116, 32, 36, 97, 41, 32, 40, 115, 116, 97, 114, 116, 32, 36, 98, 41, 41]), "multiple start sections")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
test run_start ... ok
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-value", args: [I32(1)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(-0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(0.5)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(-0.5)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(-1.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(1.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args}, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(-1.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(1.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(-6.2831855)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(6.2831855)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(-6.2831855)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(6.2831855)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-value", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(340282350000000000000000000000000000000.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-loop-value", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value-cond", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(-inf)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 115, 116, 111, 114, 101, 51, 50, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(-inf)] }, [F32(-0.0)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 115, 116, 111, 114, 101, 54, 52, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(inf)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [F64(-inf)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 105, 54, 52, 46, 115, 116, 111, 114, 101, 54, 52, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 32, 40, 105, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(NaN)] })
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 102, 51, 50, 46, 115, 116, 111, 114, 101, 51, 50, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(NaN)] })
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 102, 51, 50, 46, 115, 116, 111, 114, 101, 54, 52, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 102, 54, 52, 46, 115, 116, 111, 114, 101, 51, 50, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 32, 40, 102, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.kahan_sum", args: [I32(0), I32(256)] }, [F64(4996401743142033000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 102, 54, 52, 46, 115, 116, 111, 114, 101, 54, 52, 32, 40, 108, 111, 99, 97, 108, 46, 103, 101, 116, 32, 48, 41, 32, 40, 102, 54, 52, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41]), "unknown operator")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 65, 1, 54, 2, 0, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 126, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 66, 1, 55, 3, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "load_at_zero", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "store_at_zero", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "load_at_zero", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "load_at_page_size", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 125, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 128, 63, 56, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "store_at_page_size", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "load_at_page_size", args: [] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 124, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 57, 3, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 65, 1, 58, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [F32(1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 65, 1, 59, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.00000011920929)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 126, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 66, 1, 60, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.plain_sum", args: [I32(0), I32(256)] }, [F64(4996401743297957600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.00000011920929)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 126, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 66, 1, 61, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.00000011920929)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.00000011920929)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 126, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 66, 1, 62, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [F32(0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 54, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.5)] }, [F32(-0.000000000000000000000000000000000000000000003)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [F32(-0.000000000000000000000000000000000000000000003)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 54, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.5)] }, [F32(0.000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 65, 0, 2, 64, 54, 2, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(1.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 2, 64, 65, 0, 54, 2, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(-inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 65, 0, 3, 64, 54, 2, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(1.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_neg_sub", args: [F32(-0.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 3, 64, 65, 0, 54, 2, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_neg_sub", args: [F32(0.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_neg_sub", args: [F32(-0.0), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [F32(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 54, 2, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 4, 64, 65, 0, 54, 2, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-value", args: [I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-value", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [I32(0)] }, [I32(2)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 127, 65, 0, 5, 54, 2, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-drop-operand", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-drop-operand", args: [I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 65, 0, 4, 127, 65, 0, 5, 65, 0, 54, 2, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-inf)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [I32(1)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 65, 0, 2, 64, 54, 2, 0, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(-inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [I32(0)] }, [I32(2)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 2, 64, 65, 0, 54, 2, 0, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(inf)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 0, 65, 0, 2, 64, 54, 2, 0, 65, 1, 13, 0, 11, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [I32(0)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-load-operand", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-load-operand", args: [I32(1)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [I32(1)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 0, 2, 64, 65, 0, 54, 2, 0, 65, 1, 13, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-binary-operand", args: [I32(0)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-operand", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(-0.5)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 65, 0, 65, 0, 2, 64, 54, 2, 0, 14, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-test-operand", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(0.5)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-test-operand", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-left", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(0.5)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-compare-left", args: [I32(1)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 65, 0, 2, 64, 65, 0, 54, 2, 0, 14, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-right", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-right", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 54, 2, 0, 15, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-convert-operand", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-convert-operand", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(-6.2831855)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 54, 2, 0, 15, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(800)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(6.2831855)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 1, 1, 65, 1, 27, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(-6.2831855)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 54, 2, 0, 65, 1, 65, 2, 27, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(6.2831855)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 1, 66, 1, 65, 1, 27, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(8388608.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(1.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 54, 2, 0, 65, 1, 65, 2, 27, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-8388608.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(-1.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 1, 67, 0, 0, 128, 63, 65, 1, 27, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-8388608.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 0, 0, 96, 1, 127, 1, 127, 3, 131, 128, 128, 128, 0, 2, 0, 1, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 150, 128, 128, 128, 0, 2, 135, 128, 128, 128, 0, 0, 54, 2, 0, 16, 1, 11, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 1, 68, 0, 0, 0, 0, 0, 0, 240, 63, 65, 1, 27, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [F32(8388608.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(-inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 0, 0, 96, 1, 127, 1, 127, 3, 131, 128, 128, 128, 0, 2, 0, 1, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 152, 128, 128, 128, 0, 2, 137, 128, 128, 128, 0, 0, 65, 0, 54, 2, 0, 16, 1, 11, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 27, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 65, 0, 27, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(inf)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 1, 127, 1, 127, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 5, 131, 128, 128, 128, 0, 1, 0, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 156, 128, 128, 128, 0, 2, 132, 128, 128, 128, 0, 0, 32, 0, 11, 141, 128, 128, 128, 0, 0, 2, 127, 54, 2, 0, 65, 0, 17, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 65, 0, 27, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args}, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(2)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 1, 127, 1, 127, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 5, 131, 128, 128, 128, 0, 1, 0, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 158, 128, 128, 128, 0, 2, 132, 128, 128, 128, 0, 0, 32, 0, 11, 143, 128, 128, 128, 0, 0, 2, 127, 65, 0, 54, 2, 0, 65, 0, 17, 0, 0, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 65, 0, 65, 0, 2, 64, 27, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [F32(0.000000000000000000000000000000000000023509887)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.5)] }, [F32(-0.000000000000000000000000000000000000023509887)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 65, 0, 2, 64, 65, 0, 27, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 65, 0, 54, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [F32(-0.000000000000000000000000000000000000023509887)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 2, 64, 65, 0, 65, 0, 27, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.5)] }, [F32(0.000000000000000000000000000000000000023509887)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 65, 0, 58, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(-0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 65, 0, 65, 0, 3, 64, 27, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 65, 0, 59, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(1.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 65, 0, 3, 64, 65, 0, 27, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 65, 0, 55, 3, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 3, 64, 65, 0, 65, 0, 27, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(1.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 66, 0, 60, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 65, 0, 65, 0, 4, 64, 27, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [F32(0.000000000000000000000000000000000000001870857)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 66, 0, 61, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [F32(-0.000000000000000000000000000000000000001870857)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 65, 0, 27, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 66, 0, 62, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [F32(-0.000000000000000000000000000000000000001870857)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(-0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 4, 64, 65, 0, 65, 0, 27, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 67, 0, 0, 0, 0, 56, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [F32(0.000000000000000000000000000000000000001870857)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(0.5)] }, [I32(0)])
test run_select ... ok
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(-1.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 153, 128, 128, 128, 0, 1, 147, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 57, 3, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 54, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(6.2831855)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 58, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-inf)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 59, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args}, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(-inf)] }, [F32(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 55, 3, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(inf)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 65, 1, 33, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [F64(0.5)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-0.5), F64(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 126, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 66, 1, 33, 0, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 61, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(-inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [F64(-0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 125, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 67, 0, 0, 128, 63, 33, 0, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 62, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(-inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(0.5), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(inf)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 124, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 33, 0, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 65, 0, 56, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(0.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 65, 1, 54, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(-0.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 66, 0, 57, 3, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(-0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 126, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 66, 1, 55, 3, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(NaN)] }, [I32(0)])
test run_store ... ok
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(-0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 125, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 128, 63, 56, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(0.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 124, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 57, 3, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 65, 1, 58, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 65, 1, 59, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(42535296000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-42535296000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 126, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 66, 1, 60, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-42535296000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 126, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 66, 1, 61, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(0.000000000000000000000000000000000000011754944)] }, [F32(42535296000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(-0.5)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "stmt", args: [I32(0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 126, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 66, 1, 62, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(0.5)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "stmt", args: [I32(1)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(-0.5)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "stmt", args: [I32(2)] }, [I32(4294967294)])
test run_store_retval ... ok
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "stmt", args: [I32(3)] }, [I32(4294967293)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(0.5)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "stmt", args: [I32(4)] }, [I32(100)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(-1.0)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "stmt", args: [I32(5)] }, [I32(101)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(1.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "stmt", args: [I32(6)] }, [I32(102)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "stmt", args: [I32(7)] }, [I32(100)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(-1.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "stmt", args: [I32(4294967286)] }, [I32(102)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(1.0)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "expr", args: [I64(0)] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "expr", args: [I64(1)] }, [I64(18446744073709551615)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(-6.2831855)] }, [F32(0.07957747)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "expr", args: [I64(2)] }, [I64(18446744073709551614)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(6.2831855)] }, [F32(-0.07957747)])
run assertion Return(Invoke { mod_ref: None, func: "expr", args: [I64(3)] }, [I64(18446744073709551613)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "expr", args: [I64(6)] }, [I64(101)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(-6.2831855)] }, [F32(-0.07957747)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "expr", args: [I64(7)] }, [I64(18446744073709551611)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(6.2831855)] }, [F32(0.07957747)])
run assertion Return(Invoke { mod_ref: None, func: "expr", args: [I64(18446744073709551606)] }, [I64(100)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "arg", args: [I32(0)] }, [I32(110)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(-340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000001469368)])
run assertion Return(Invoke { mod_ref: None, func: "arg", args: [I32(1)] }, [I32(12)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "arg", args: [I32(2)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(340282350000000000000000000000000000000.0)] }, [F32(-0.000000000000000000000000000000000000001469368)])
run assertion Return(Invoke { mod_ref: None, func: "arg", args: [I32(3)] }, [I32(1116)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "arg", args: [I32(4)] }, [I32(118)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.000000000000000000000000000000000000001469368)])
run assertion Return(Invoke { mod_ref: None, func: "arg", args: [I32(5)] }, [I32(20)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "arg", args: [I32(6)] }, [I32(12)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000001469368)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "arg", args: [I32(7)] }, [I32(1124)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(-inf)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "arg", args: [I32(8)] }, [I32(126)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "corner", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(-inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 14, 0, 3, 11]), "unknown label")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(inf)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(-inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(inf)] }, [I32(1)])
test run_switch ... ok
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(-inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(inf)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-0.5), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "type-local-i32", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "type-local-i64", args: [] }, [I64(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(-0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-f32", args: [] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "type-local-f64", args: [] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(-0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "type-param-i32", args: [I32(2)] }, [I32(10)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 48, 41, 41, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(0.0)] }, [F32(inf)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 98, 114, 32, 48, 100, 114, 111, 112, 41]), "unknown operator")
run assertion Return(Invoke { mod_ref: None, func: "type-param-i64", args: [I64(3)] }, [I64(11)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
test run_token ... ok
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(85070590000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-85070590000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-85070590000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(85070590000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(-0.5)] }, [F32(2.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i32.div_s", args: [I32(1), I32(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(0.5)] }, [F32(-2.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i32.div_u", args: [I32(1), I32(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(-0.5)] }, [F32(-2.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.div_s", args: [I64(1), I64(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(0.5)] }, [F32(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.div_u", args: [I64(1), I64(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(-1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(-inf)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i32.div_s", args: [I32(2147483648), I32(4294967295)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "type-param-f32", args: [F32(4.4)] }, [F32(11.1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.div_s", args: [I64(9223372036854775808), I64(18446744073709551615)] }, "integer overflow")
run assertion Return(Invoke { mod_ref: None, func: "type-param-f64", args: [F64(5.5)] }, [F64(12.2)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-mixed", args: [I64(1), F32(2.2), F64(3.3), I32(4), I32(5)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(-6.2831855)] }, [F32(0.15915494)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "write", args: [I64(1), F32(2.0), F64(3.3), I32(4), I32(5)] }, [I64(56)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(6.2831855)] }, [F32(-0.15915494)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "result", args: [I64(18446744073709551615), F32(-2.0), F64(-3.3), I32(4294967292), I32(4294967291)] }, [F64(34.8)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-1.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(-6.2831855)] }, [F32(-0.15915494)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 1, 1, 127, 65, 0, 34, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(6.2831855)] }, [F32(0.15915494)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(6)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i32.rem_s", args: [I32(1), I32(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000002938736)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(1.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 1, 1, 125, 67, 0, 0, 0, 0, 34, 0, 69, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i32.rem_u", args: [I32(1), I32(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(340282350000000000000000000000000000000.0)] }, [F32(-0.000000000000000000000000000000000000002938736)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.rem_s", args: [I64(1), I64(0)] }, "integer divide by zero")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(0.0)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.rem_u", args: [I64(1), I64(0)] }, "integer divide by zero")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 2, 1, 124, 1, 126, 66, 0, 34, 1, 154, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.000000000000000000000000000000000000002938736)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(-1.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 1, 1, 127, 1, 34, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000002938736)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(-inf)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(3)] }, [])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 1, 1, 127, 67, 0, 0, 0, 0, 34, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(-inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(inf)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 1, 1, 125, 68, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 151, 128, 128, 128, 0, 1, 145, 128, 128, 128, 0, 2, 1, 124, 1, 126, 68, 0, 0, 0, 0, 0, 0, 0, 0, 34, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-1.0), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(6.2831855)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 125, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 32, 0, 69, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(1.0), F32(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i32.trunc_f32_s", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args}, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(-0.0)] }, [F32(inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i32.trunc_f32_u", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 124, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 32, 1, 154, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(0.0)] }, [F32(-inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i32.trunc_f64_s", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(-0.0)] }, [F32(-inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i32.trunc_f64_u", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(800)] }, [I32(3)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 1, 34, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.trunc_f32_s", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 34, 0, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.trunc_f32_u", args: [F32(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.trunc_f64_s", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(-inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 125, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [F64(-inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.trunc_f64_u", args: [F64(NaN)] }, "invalid conversion to integer")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(inf)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 124, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 34, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 3, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 247, 164, 234, 6, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 127, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 32, 2, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(-0.5)] }, [F32(12.566371)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 247, 242, 206, 212, 2, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(-0.5)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(0.5)] }, [F32(-12.566371)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 3, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(-0.5)] }, [F32(-12.566371)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 247, 168, 153, 102, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(-1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(0.5)] }, [F32(12.566371)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(-0.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 125, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 1, 1, 127, 67, 0, 0, 0, 0, 34, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(-1.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(-0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 126, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 1, 1, 125, 67, 0, 0, 0, 0, 34, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(1.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(-1.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(6.283185307179586)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 2, 1, 124, 1, 126, 66, 0, 34, 1, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i32.load", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(1.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(-6.283185307179586)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i32.load16_s", args: [I32(65536)] }, "out of bounds memory access")
test run_tee_local ... ok
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(-6.2831855)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(6.283185307179586)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i32.load16_u", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(6.2831855)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i32.load8_s", args: [I32(65536)] }, "out of bounds memory access")
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i32.load8_u", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(-6.2831855)] }, [F32(-1.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.load", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(6.2831855)] }, [F32(1.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.load32_s", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.load32_u", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.load16_s", args: [I32(65536)] }, "out of bounds memory access")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.load16_u", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.load8_s", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(0.5)] }, [I32(1)])
run assertion Exhaustion(Invoke { mod_ref: None, func: "test-guard-page-skip", args: [I32(0)] }, "call stack exhausted")
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.i64.load8_u", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(-0.5)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 41, 41]), "result before parameter")
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.f32.load", args: [I32(65536)] }, "out of bounds memory access")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(0.5)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 36, 120, 32, 105, 51, 50, 41, 41, 41]), "unexpected token")
run assertion TrapAction(Invoke { mod_ref: None, func: "no_dce.f64.load", args: [I32(65536)] }, "out of bounds memory access")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(-1.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 0, 2, 127, 127]), "invalid result arity")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(1.0)] }, [I32(1)])
test run_traps ... ok
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 0, 2, 127, 127]), "invalid result arity")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(-1.0)] }, [I32(0)])
test run_type ... ok
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(1.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000018464624)])
run assertion Return(Invoke { mod_ref: None, func: "fib-f32", args: [F32(0.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(-0.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "fib-f32", args: [F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(340282350000000000000000000000000000000.0)] }, [F32(-0.000000000000000000000000000000000000018464624)])
run assertion Return(Invoke { mod_ref: None, func: "fib-f32", args: [F32(2.0)] }, [F32(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(0.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(-6.2831855)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(-0.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "fib-f32", args: [F32(5.0)] }, [F32(8.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.000000000000000000000000000000000000018464624)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(0.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "fib-f32", args: [F32(20.0)] }, [F32(10946.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 2, 64, 69, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000018464624)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(-inf)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 3, 64, 69, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(-inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(-inf)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 69, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(inf)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(-inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(inf)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 127, 65, 0, 5, 69, 11, 26, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 106, 26, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.5)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(-inf)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 65, 0, 106, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(-inf)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 65, 0, 2, 64, 106, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 2, 64, 65, 0, 106, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(0)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(-0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 65, 0, 3, 64, 106, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(4)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_neg_sub", args: [F32(0.0), F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_neg_sub", args: [F64(-0.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 3, 64, 65, 0, 106, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_neg_sub", args: [F64(0.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_neg_sub", args: [F64(-0.0), F64(0.0)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 65, 0, 65, 0, 106, 4, 64, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_neg_sub", args: [F64(0.0), F64(0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(6.283185307179586), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 65, 0, 65, 0, 4, 64, 106, 5, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 153, 128, 128, 128, 0, 1, 147, 128, 128, 128, 0, 0, 65, 0, 65, 0, 65, 0, 4, 127, 65, 0, 5, 106, 65, 0, 11, 26, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 127, 65, 0, 5, 106, 11, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_neg_add", args: [F32(-0.0), F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_neg_add", args: [F32(0.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(-0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 4, 64, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_neg_add", args: [F32(-0.0), F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(0.5)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_neg_add", args: [F32(0.0), F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.5)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(-0.5)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 2, 64, 4, 64, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_neg_add", args: [F64(-0.0), F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(0.5)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_neg_add", args: [F64(0.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(-0.5)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(-1.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_neg_add", args: [F64(-0.0), F64(0.0)] }, [F64(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 3, 64, 4, 64, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(0.5)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(1.0)] }, [F64(-1.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_neg_add", args: [F64(0.0), F64(0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(-1.0)] }, [F64(1.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 4, 64, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(-1.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(1.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(1.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 152, 128, 128, 128, 0, 1, 146, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 127, 65, 0, 5, 4, 64, 11, 65, 0, 11, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(-6.283185307179586)] }, [F64(5.783185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(-1.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 127, 12, 0, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(6.283185307179586)] }, [F64(-6.783185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(1.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_neg_neg", args: [F32(-0.0), F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_neg_neg", args: [F32(0.0), F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(-6.283185307179586)] }, [F64(6.783185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [F32(54157613000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 2, 127, 12, 0, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_neg_neg", args: [F32(-0.0), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(6.283185307179586)] }, [F64(-5.783185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_neg_neg", args: [F32(0.0), F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(6.2831855)] }, [F32(-54157613000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 64, 65, 0, 65, 0, 4, 127, 12, 0, 11, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_neg_neg", args: [F64(-0.0), F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [F32(-54157613000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_neg_neg", args: [F64(0.0), F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 153, 128, 128, 128, 0, 1, 147, 128, 128, 128, 0, 0, 2, 64, 65, 0, 65, 0, 4, 127, 65, 0, 5, 12, 0, 11, 11, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_neg_neg", args: [F64(-0.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(6.2831855)] }, [F32(54157613000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_neg_neg", args: [F64(0.0), F64(0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 137, 128, 128, 128, 0, 1, 131, 128, 128, 128, 0, 0, 15, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [F32(-1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 2, 64, 15, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 3, 64, 15, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_neg", args: [F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_neg", args: [F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(-inf)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 15, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_add_neg", args: [F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_add_neg", args: [F32(-inf)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 127, 65, 0, 5, 15, 11, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(-inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_neg", args: [F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_neg", args: [F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(inf)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 4, 64, 11, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_add_neg", args: [F64(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_add_neg", args: [F64(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 64, 67, 0, 0, 0, 0, 13, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 64, 67, 0, 0, 0, 0, 14, 0, 0, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 136, 128, 128, 128, 0, 2, 96, 1, 127, 0, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 150, 128, 128, 128, 0, 2, 130, 128, 128, 128, 0, 0, 11, 137, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 16, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_6x_via_add", args: [F32(-855513700000000000000000000000.0)] }, [F32(-5133083000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 136, 128, 128, 128, 0, 2, 96, 1, 127, 0, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 153, 128, 128, 128, 0, 2, 130, 128, 128, 128, 0, 0, 11, 140, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 17, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_6x_via_add", args: [F32(-0.00000000000000000000001209506)] }, [F32(-0.00000000000000000000007257036)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_6x_via_add", args: [F32(0.000000000000000000000006642689)] }, [F32(0.000000000000000000000039856134)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 151, 128, 128, 128, 0, 2, 130, 128, 128, 128, 0, 0, 11, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 17, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_6x_via_add", args: [F32(-0.0000000006147346)] }, [F32(-0.0000000036884074)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 15, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_6x_via_add", args: [F32(-1209858100000000000000000.0)] }, [F32(-7259148300000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_6x_via_add", args: [F64(-351704490602771400000.0)] }, [F64(-2110226943616628600000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 1, 1, 127, 67, 0, 0, 0, 0, 33, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_6x_via_add", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014824294109868734)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008894576465921239)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_6x_via_add", args: [F64(-7484567838781003000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-44907407032686014000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 40, 2, 0, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_6x_via_add", args: [F64(17277868192936067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(103667209157616410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_6x_via_add", args: [F64(-43116397525195610000000000000000000000000000000000000000000000000000000.0)] }, [F64(-258698385151173640000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 44, 0, 0, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(-0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(0.0)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 45, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(-0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args}, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 46, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "type-i32", args: [] }, "unreachable")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 47, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_div", args: [F32(-593847530000000000000000.0), F32(-0.000030265672), F32(-1584.8682)] }, [F32(-12380309000000000000000000.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "type-i64", args: [] }, "unreachable")
run assertion TrapAction(Invoke { mod_ref: None, func: "type-f32", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "type-f64", args: [] }, "unreachable")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-func-first", args: [] }, "unreachable")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 41, 3, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_div", args: [F32(0.0000000000000000000015438962), F32(2533429300000000000000000000000000.0), F32(-0.00000000000000000000000000000000026844783)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_div", args: [F32(13417423000000.0), F32(0.000000000000000000000000000000029339205), F32(76386374000000000000000000000000.0)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 48, 0, 0, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-func-mid", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-func-last", args: [] }, "unreachable")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-func-value", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-block-first", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_div", args: [F32(-0.00010776529), F32(-34220943000000000000000000000000000000.0), F32(-0.00000000000016562324)] }, [F32(-0.000000000000000000000000000019011327)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 49, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(-0.5)] }, [F32(inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-block-mid", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(2)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-block-last", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(0.5)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_div", args: [F32(130582500000000.0), F32(96245350000000000.0), F32(-41461545000000000000000000000000000000.0)] }, [F32(-0.000000000000000000000000000000000000000032723)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-block-value", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(-0.5)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 50, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-block-broke", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(0.5)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_div", args}, [F64(-64646730118787990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-loop-first", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(-1.0)] }, [F32(inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-loop-mid", args: [] }, "unreachable")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-loop-last", args: [] }, "unreachable")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 51, 1, 0, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "as-loop-broke", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_div", args: [F64(-21790236783875714000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0000000028324436844616576), F64(186110768259868700000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-41336068079920670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(1.0)] }, [F32(-inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-br-value", args: [] }, "unreachable")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(3)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-br_if-cond", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(-1.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-br_if-value", args: [] }, "unreachable")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 52, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(1.0)] }, [F32(inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-br_if-value-cond", args: [] }, "unreachable")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-0.5), F64(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-br_table-index", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(-6.2831855)] }, [F32(inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-br_table-value", args: [] }, "unreachable")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_div", args: [F64(-7.287619347826683), F64(-13467607316739855000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(2462719007013688000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000219725454)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-br_table-value-2", args: [] }, "unreachable")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 53, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(6.2831855)] }, [F32(-inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-br_table-value-index", args: [] }, "unreachable")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-br_table-value-and-index", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_div", args}, [F64(-inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-return-value", args: [] }, "unreachable")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-if-cond", args: [] }, "unreachable")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(-6.2831855)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 42, 2, 0, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-if-then", args: [I32(1), I32(6)] }, "unreachable")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(6.2831855)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [I32(0), I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(-0.0)] }, [F64(-1.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-if-else", args: [I32(0), I32(6)] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(-340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 43, 3, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(0.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [I32(1), I32(6)] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-if-then-no-else", args: [I32(1), I32(6)] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(-0.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_div", args}, [F64(0.00000000000000000000000000000000000000000000006699534674970116)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then-no-else", args: [I32(0), I32(6)] }, [I32(6)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 65, 0, 54, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(0.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(-340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-select-first", args: [I32(0), I32(6)] }, "unreachable")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-select-first", args: [I32(1), I32(6)] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 65, 0, 58, 0, 0, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(-inf)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-select-second", args: [I32(0), I32(6)] }, "unreachable")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(inf)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-select-second", args: [I32(1), I32(6)] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-1.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(-inf)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-select-cond", args: [] }, "unreachable")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 65, 0, 59, 1, 0, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-call-first", args: [] }, "unreachable")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(inf)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-call-mid", args: [] }, "unreachable")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-call-last", args: [] }, "unreachable")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-call_indirect-func", args: [] }, "unreachable")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 65, 0, 55, 3, 0, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-1.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_divs", args: [F32(-0.0000000000000000000000000000000027234733), F32(0.0000000000000000000000000003897843), F32(0.000000000000000000000000004847123), F32(-25.357775)] }, [F32(0.0000000000000000000000000000000013355855)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [] }, "unreachable")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(-inf), F32(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-local.set-value", args: [] }, "unreachable")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 66, 0, 60, 0, 0, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(NaN)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-local.tee-value", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "ne", args}, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-global.set-value", args: [] }, "unreachable")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(1.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-load-address", args: [] }, "unreachable")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 66, 0, 61, 1, 0, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-loadN-address", args: [] }, "unreachable")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_divs", args: [F32(-5372844000000000000000000000000.0), F32(38340910.0), F32(0.000014973162), F32(0.19213825)] }, [F32(-10920475000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.0)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-store-address", args: [] }, "unreachable")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 66, 0, 62, 2, 0, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-store-value", args: [] }, "unreachable")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-storeN-address", args: [] }, "unreachable")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.0)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-storeN-value", args: [] }, "unreachable")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-unary-operand", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 67, 0, 0, 0, 0, 56, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_divs", args: [F32(-16085042000.0), F32(-1092920200000.0), F32(-869606000.0), F32(-1201.206)] }, [F32(10654.639)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-binary-left", args: [] }, "unreachable")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.0)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 153, 128, 128, 128, 0, 1, 147, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 57, 3, 0, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-binary-right", args: [] }, "unreachable")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.0)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-test-operand", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-1.0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-compare-left", args: [] }, "unreachable")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.0)] })
run assertion TrapAction(Invoke { mod_ref: None, func: "as-compare-right", args: [] }, "unreachable")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.0)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 54, 2, 0, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "as-convert-operand", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_divs", args: [F32(-1271223140000000000000000000000000.0), F32(0.00000000010768114), F32(0.000018576271), F32(492686200000000000000000.0)] }, [F32(-inf)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-memory.grow-size", args: [] }, "unreachable")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 58, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-1.0)])
test run_unreachable ... ok
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_divs", args: [F32(0.00000000000000013783864), F32(-0.000000000000000000065046285), F32(0.00000000000000000000000000068167684), F32(0.000000000022892627)] }, [F32(-0.000000000000063100295)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 59, 1, 0, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_divs", args}, [F64(-55.12215321310017)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(1.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 55, 3, 0, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(1.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(-0.5)] }, [F64(-0.5)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 61, 1, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(0.5)] }, [F64(-1.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_divs", args: [F64(-50548839076363250000000000000000000.0), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022223781649976275), F64(-15029790371100852000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-699412375953812100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(-0.5)] }, [F64(1.5)])
run assertion Return(Invoke { mod_ref: None, func: "", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "0", args: [] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(0.5)] }, [F64(0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 62, 2, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "-0", args: [] }, [I32(2)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 0, 32, 0, 26, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_divs", args: [F64(-836111653634494700000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-10029528876067567000000000000000000000000000000000000000000.0), F64(-0.0000000000000000000000000000000000000000012867801766038772), F64(-42230277746883753000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002540178100556387)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(-1.0)] }, [F64(0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 65, 0, 56, 2, 0, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "_", args: [] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(1.0)] }, [F64(-2.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 0, 35, 0, 26, 11]), "unknown global")
run assertion Return(Invoke { mod_ref: None, func: "$", args: [] }, [I32(4)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(-1.0)] }, [F64(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "@", args: [] }, [I32(5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 66, 0, 57, 3, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "~!@#$%^&*()_+`-={}|[]\\:\";\'<>?,./ ", args: [] }, [I32(6)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(1.0)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 0, 16, 1, 11]), "unknown function")
run assertion Return(Invoke { mod_ref: None, func: "NaN", args: [] }, [I32(7)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "Infinity", args: [] }, [I32(8)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 106, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(-6.283185307179586)] }, [F64(5.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "if", args: [] }, [I32(9)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 0, 12, 1, 11]), "unknown label")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "malloc", args: [] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_divs", args}, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(6.283185307179586)] }, [F64(-7.283185307179586)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "_malloc", args: [] }, [I32(11)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 113, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "__malloc", args: [] }, [I32(12)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.5)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 0, 65, 0, 80, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(-6.283185307179586)] }, [F64(7.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "a", args: [] }, [I32(13)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_divs", args: [F64(0.000006331839568840419), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000005544474241905778), F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000027822472480359097), F64(-14419321081893022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022035374770746518)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "A", args: [] }, [I32(14)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 109, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{feff}", args: [] }, [I32(15)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(6.283185307179586)] }, [F64(-5.283185307179586)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 0, 66, 0, 65, 0, 27, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "Å", args: [] }, [I32(16)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "A\u{30a}", args: [] }, [I32(17)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 110, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "Å", args: [] }, [I32(18)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ﬃ", args: [] }, [I32(19)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 0, 66, 0, 65, 0, 27, 65, 0, 65, 0, 27, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "fﬁ", args: [] }, [I32(20)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 108, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ffi", args: [] }, [I32(21)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 0, 65, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{0}\u{1}\u{2}\u{3}\u{4}\u{5}\u{6}\u{7}\u{8}\t\n\u{b}\u{c}\r\u{e}\u{f}", args: [] }, [I32(22)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(1.0)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 114, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{10}\u{11}\u{12}\u{13}\u{14}\u{15}\u{16}\u{17}\u{18}\u{19}\u{1a}\u{1b}\u{1c}\u{1d}\u{1e}\u{1f}", args: [] }, [I32(23)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 0, 69, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: " \u{7f}", args: [] }, [I32(24)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-1.0)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 111, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{80}\u{81}\u{82}\u{83}\u{84}\u{85}\u{86}\u{87}\u{88}\u{89}\u{8a}\u{8b}\u{8c}\u{8d}\u{8e}\u{8f}", args: [] }, [I32(25)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 0, 65, 0, 106, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{90}\u{91}\u{92}\u{93}\u{94}\u{95}\u{96}\u{97}\u{98}\u{99}\u{9a}\u{9b}\u{9c}\u{9d}\u{9e}\u{9f}", args: [] }, [I32(26)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_divs", args: [F32(377.3689), F32(-0.040118184), F32(-136292990000000000000000000000000000000.0)] }, [F32(-0.0000000000000000000000000000000000027685121)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 112, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{fff0}\u{fff1}\u{fff2}\u{fff3}\u{fff4}\u{fff5}\u{fff6}\u{fff7}", args: [] }, [I32(27)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 0, 27, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{fff8}\u{fff9}\u{fffa}\u{fffb}￼�\u{fffe}\u{ffff}", args: [] }, [I32(28)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 119, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "␀␁␂␃␄␅␆␇␈␉␊␋␌␍␎␏", args: [] }, [I32(29)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 0, 65, 0, 27, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_divs", args: [F32(-0.00000000000000000018234023), F32(-0.0000000000000033970288), F32(-170996700000000.0)] }, [F32(0.000000000000000000000000000019867115)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "␐␑␒␓␔␕␖␗␘␙␚␛␜␝␞␟", args: [] }, [I32(30)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 120, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "␠␡", args: [] }, [I32(31)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 0, 65, 0, 65, 0, 27, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{fff0}\u{fff1}\u{fff2}\u{fff3}\u{fff4}\u{fff5}\u{fff6}\u{fff7}\u{fff8}\u{fff9}\u{fffa}\u{fffb}￼�", args: [] }, [I32(32)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_divs", args: [F32(-0.000000000000019672638), F32(0.00000000000000000006414099), F32(-541989070000000.0)] }, [F32(0.000000000000000000000000000036296997)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(6.2831855)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 116, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{200d}", args: [] }, [I32(33)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 64, 12, 0, 2, 64, 1, 69, 26, 11, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{200c}", args: [] }, [I32(34)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "\u{34f}", args: [] }, [I32(35)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 117, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{2060}", args: [] }, [I32(36)])
run assertion Return(Invoke { mod_ref: None, func: "\u{2d7f}", args: [] }, [I32(37)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 64, 12, 0, 67, 0, 0, 128, 63, 69, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{1107f}", args: [] }, [I32(38)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{180e}", args: [] }, [I32(39)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{ffef}\u{200b}\u{a0}\u{ad}\u{2060}\u{1680}\u{202e}\u{202d}", args: [] }, [I32(40)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(4)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 64, 12, 0, 2, 64, 65, 1, 91, 26, 11, 11, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(3)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_divs", args: [F32(-0.0000000000000000000000000000004038506), F32(0.000000000000000000000000000003848228), F32(-345237200000000000000000000.0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 118, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{200e}\u{200f}‑\u{2028}\u{2029}\u{202a}\u{202b}\u{202c}\u{202f}\u{2066}\u{2067}\u{2068}\u{2069}", args: [] }, [I32(41)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 64, 12, 0, 65, 1, 67, 0, 0, 0, 0, 91, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{206a}\u{206b}\u{206c}\u{206d}\u{206e}\u{206f}", args: [] }, [I32(42)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{2061}\u{2062}\u{2063}\u{2064}", args: [] }, [I32(43)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 107, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "𐀀\u{dffff}\u{10ffff}", args: [] }, [I32(44)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 64, 12, 0, 65, 1, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_divs", args: [F32(0.0010934415), F32(0.20703124), F32(0.00000000000000000000000000000000000013509784)] }, [F32(1540547700000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 115, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 127, 65, 1, 12, 0, 67, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_divs", args}, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024196801752520584)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 124, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-inf)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 64, 3, 64, 12, 1, 65, 1, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "Z\u{30f}\u{346}\u{306}\u{35b}\u{34c}\u{334}\u{358}\u{35e}\u{347}\u{32b}\u{325}\u{32a}\u{353}\u{348}\u{354}\u{34e}\u{317}\u{31e}\u{33a}\u{32f}\u{331}\u{31e}\u{319}\u{331}\u{31c}\u{316}\u{320}a\u{357}\u{368}\u{30e}\u{304}\u{306}\u{357}\u{33f}\u{361}\u{35f}\u{340}\u{336}\u{341}\u{325}\u{330}\u{333}\u{32d}\u{359}\u{332}\u{331}\u{339}\u{31d}\u{34e}\u{33c}l\u{344}\u{34a}\u{31a}\u{357}\u{366}\u{344}\u{36b}\u{307}\u{341}\u{336}\u{337}\u{349}\u{329}\u{339}\u{32b}\u{31d}\u{356}\u{345}\u{319}\u{332}\u{33c}\u{347}\u{35a}\u{34d}\u{32e}\u{34e}\u{325}\u{345}\u{31e}g\u{343}\u{310}\u{305}\u{36e}\u{314}\u{310}\u{30e}\u{302}\u{30f}\u{33e}\u{34a}\u{30d}\u{34b}\u{34a}\u{367}\u{301}\u{306}\u{366}\u{35e}\u{336}\u{355}\u{354}\u{35a}\u{329}o\u{34b}\u{314}\u{350}\u{36a}\u{369}\u{321}\u{34f}\u{322}\u{327}\u{341}\u{32b}\u{319}\u{324}\u{32e}\u{356}\u{359}\u{353}\u{33a}\u{31c}\u{329}\u{33c}\u{318}\u{320}", args: [] }, [I32(45)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 131, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ᅟᅠㅤﾠ", args: [] }, [I32(46)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 3, 127, 65, 1, 12, 1, 67, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{fe00}", args: [] }, [I32(47)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fe04}", args: [] }, [I32(48)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(inf)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 127, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{e0100}", args: [] }, [I32(49)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 12, 0, 65, 1, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{e01ef}", args: [] }, [I32(50)])
run assertion Return(Invoke { mod_ref: None, func: "\u{308}", args: [] }, [I32(51)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_divs", args: [F64(-10206467953224550.0), F64(63.422616671746226), F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016024747869814892)] }, [F64(6369190976445851000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 128, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\n", args: [] }, [I32(52)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(inf)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 1, 12, 0, 67, 0, 0, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "␤", args: [] }, [I32(53)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{2028}", args: [] }, [I32(54)])
run assertion Return(Invoke { mod_ref: None, func: "\r", args: [] }, [I32(55)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 126, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\r\n", args: [] }, [I32(56)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 15, 2, 64, 1, 69, 26, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "\n\r", args: [] }, [I32(57)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{1e}", args: [] }, [I32(58)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{b}", args: [] }, [I32(59)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 132, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 15, 67, 0, 0, 128, 63, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{c}", args: [] }, [I32(60)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{85}", args: [] }, [I32(61)])
run assertion Return(Invoke { mod_ref: None, func: "\u{2029}", args: [] }, [I32(62)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 129, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "…", args: [] }, [I32(63)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 15, 2, 64, 65, 1, 91, 26, 11, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "⏎", args: [] }, [I32(64)])
run assertion Return(Invoke { mod_ref: None, func: "\u{8b}", args: [] }, [I32(65)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 130, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{8c}", args: [] }, [I32(66)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 15, 65, 1, 67, 0, 0, 0, 0, 91, 26, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{8d}", args: [] }, [I32(67)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "↵", args: [] }, [I32(68)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 137, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "↩", args: [] }, [I32(69)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "⌤", args: [] }, [I32(70)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 2, 64, 15, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "⤶", args: [] }, [I32(71)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 138, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "↲", args: [] }, [I32(72)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_divs", args: [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015270569633109837), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025755503329232514), F64(58826939164214920000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "⮨", args: [] }, [I32(73)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "⮰", args: [] }, [I32(74)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 2, 127, 65, 1, 65, 0, 15, 67, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 134, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "�", args: [] }, [I32(75)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_divs", args: [F64(26667964874394640000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-2131569252493657800000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000012377004518680012)] }, [F64(-172217969324625340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fdd0}", args: [] }, [I32(76)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fdd1}", args: [] }, [I32(77)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 64, 3, 64, 15, 65, 1, 11, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 135, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{fdd2}", args: [] }, [I32(78)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_divs", args}, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007735034106987796)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fdd3}", args: [] }, [I32(79)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 3, 127, 65, 1, 15, 67, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 136, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fdd4}", args: [] }, [I32(80)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fdd5}", args: [] }, [I32(81)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fdd6}", args: [] }, [I32(82)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 15, 65, 1, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 125, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fdd7}", args: [] }, [I32(83)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(0.0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 1, 15, 67, 0, 0, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{fdd8}", args: [] }, [I32(84)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 133, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{fdd9}", args: [] }, [I32(85)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fdda}", args: [] }, [I32(86)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 0, 2, 64, 1, 69, 26, 11, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fddb}", args: [] }, [I32(87)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 146, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{fddc}", args: [] }, [I32(88)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 0, 3, 64, 1, 69, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 152, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fddd}", args: [] }, [I32(89)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 0, 3, 127, 1, 69, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{fdde}", args: [] }, [I32(90)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 149, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{fddf}", args: [] }, [I32(91)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fde0}", args: [] }, [I32(92)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_sqrt_square", args: [F32(-0.00000000000000000001846)] }, [F32(0.00000000000000000001846001)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 0, 67, 0, 0, 128, 63, 69, 26, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 151, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(-0.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_sqrt_square", args: [F32(-0.00000000000000000000017907473)] }, [F32(0.00000000000000000000017952678)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(0.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fde1}", args: [] }, [I32(93)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 0, 2, 64, 65, 1, 91, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fde2}", args: [] }, [I32(94)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_sqrt_square", args: [F32(-0.00000000000000000000079120785)] }, [F32(0.000000000000000000000791442)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(-0.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fde3}", args: [] }, [I32(95)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(0.5)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fde4}", args: [] }, [I32(96)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_sqrt_square", args: [F32(0.000000000000000000000000018012938)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fde5}", args: [] }, [I32(97)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(0.0)] }, [F64(6.283185307179586)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 0, 65, 1, 67, 0, 0, 0, 0, 91, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_sqrt_square", args: [F32(610501970000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fde6}", args: [] }, [I32(98)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 150, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fde7}", args: [] }, [I32(99)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_sqrt_square", args: [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006209297167747496)] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006209299542179727)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fde8}", args: [] }, [I32(100)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 2, 64, 0, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{fde9}", args: [] }, [I32(101)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 148, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fdea}", args: [] }, [I32(102)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fdeb}", args: [] }, [I32(103)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 127, 65, 1, 0, 67, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(1.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 147, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{fdec}", args: [] }, [I32(104)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(1.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fded}", args: [] }, [I32(105)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 64, 3, 64, 0, 65, 1, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fdee}", args: [] }, [I32(106)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 160, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fdef}", args: [] }, [I32(107)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fffe}", args: [] }, [I32(108)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 3, 127, 0, 67, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{ffff}", args: [] }, [I32(109)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(6.2831855)] }, [F32(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 166, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{1fffe}", args: [] }, [I32(110)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_sqrt_square", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024211175303738945)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024211175303738937)])
run assertion Return(Invoke { mod_ref: None, func: "\u{1ffff}", args: [] }, [I32(111)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 0, 65, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_sqrt_square", args: [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016460687611875645)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016460687611532367)])
run assertion Return(Invoke { mod_ref: None, func: "\u{2fffe}", args: [] }, [I32(112)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 163, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(6.2831855)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 0, 67, 0, 0, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 165, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{2ffff}", args: [] }, [I32(113)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_sqrt_square", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003797811613378828)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{3fffe}", args: [] }, [I32(114)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 0, 65, 0, 4, 64, 1, 69, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "\u{3ffff}", args: [] }, [I32(115)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_sqrt_square", args: [F64(815808428460559200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "\u{4fffe}", args: [] }, [I32(116)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(340282350000000000000000000000000000000.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{4ffff}", args: [] }, [I32(117)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 0, 65, 0, 4, 64, 1, 5, 1, 69, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{5fffe}", args: [] }, [I32(118)])
run assertion Return(Invoke { mod_ref: None, func: "\u{5ffff}", args: [] }, [I32(119)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{6fffe}", args: [] }, [I32(120)])
run assertion Return(Invoke { mod_ref: None, func: "\u{6ffff}", args: [] }, [I32(121)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 4, 64, 0, 5, 1, 69, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 164, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{7fffe}", args: [] }, [I32(122)])
run assertion Return(Invoke { mod_ref: None, func: "\u{7ffff}", args: [] }, [I32(123)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(-inf)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 64, 0, 11, 2, 64, 1, 69, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 162, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{8fffe}", args: [] }, [I32(124)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{8ffff}", args: [] }, [I32(125)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(-inf)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 64, 0, 11, 67, 0, 0, 128, 63, 69, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{9fffe}", args: [] }, [I32(126)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-6.283185307179586)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 161, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_mul_sqrts", args: [F32(0.000000000000000000000000000000000000043885047), F32(-0.00000000000000000000000011867334)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 64, 0, 11, 2, 64, 65, 1, 91, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 69, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_sqrts", args: [F32(0.00000000000000000000000000025365908), F32(0.00000000041320675)] }, [F32(0.00000000000000000032374932)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-6.283185307179586)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 103, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{9ffff}", args: [] }, [I32(127)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 2, 64, 0, 11, 65, 1, 67, 0, 0, 0, 0, 91, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(inf)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{afffe}", args: [] }, [I32(128)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_sqrts", args: [F32(0.0000000000000000000000000042144832), F32(97.249115)] }, [F32(0.00000000000064019905)])
run assertion Return(Invoke { mod_ref: None, func: "\u{affff}", args: [] }, [I32(129)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 104, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{bfffe}", args: [] }, [I32(130)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{bffff}", args: [] }, [I32(131)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 64, 2, 64, 0, 11, 65, 1, 11, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{cfffe}", args: [] }, [I32(132)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_sqrts", args: [F32(3724076300000000000000000000000.0), F32(0.002944908)] }, [F32(104723750000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(6.283185307179586)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 105, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{cffff}", args: [] }, [I32(133)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 127, 65, 1, 2, 64, 0, 11, 67, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{dfffe}", args: [] }, [I32(134)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_sqrts", args: [F32(0.00000000000000001866056), F32(0.002111261)] }, [F32(0.00000000019848755)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{dffff}", args: [] }, [I32(135)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 80, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_mul_sqrts", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012742064369772862), F64(-0.006829962938197246)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{efffe}", args: [] }, [I32(136)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 64, 3, 64, 2, 64, 0, 11, 65, 1, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{effff}", args: [] }, [I32(137)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "\u{ffffe}", args: [] }, [I32(138)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_sqrts", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037082569269527534), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047183002857015043)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041829020688865954)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 121, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{fffff}", args: [] }, [I32(139)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(-0.5)] }, [F64(-5.783185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "\u{10fffe}", args: [] }, [I32(140)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 3, 127, 2, 64, 0, 11, 67, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{10ffff}", args: [] }, [I32(141)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(0.5)] }, [F64(-6.783185307179586)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 122, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{308}‽\u{308}\u{309}", args: [] }, [I32(142)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "abc", args: [] }, [I32(143)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(-0.5)] }, [F64(6.783185307179586)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 2, 64, 0, 11, 65, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{202d}abc", args: [] }, [I32(144)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [F32(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 123, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{202e}cba", args: [] }, [I32(145)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(0.5)] }, [F64(5.783185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "\u{202d}abc\u{202e}", args: [] }, [I32(146)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_sqrts", args: [F64(0.000000000000000000000000002329359505918655), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020743399642806364)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021981545701574452)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 64, 0, 11, 67, 0, 0, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{202e}cba\u{202d}", args: [] }, [I32(147)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(-1.0)] }, [F64(-5.283185307179586)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 139, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "𝑨", args: [] }, [I32(148)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_sqrts", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010541899336289437), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000598123819872803)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002511047809129887)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "𝐴", args: [] }, [I32(149)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(1.0)] }, [F64(-7.283185307179586)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 3, 64, 12, 0, 11, 2, 64, 1, 69, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "𝘈", args: [] }, [I32(150)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 141, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_sqrts", args: [F64(25589482.717358638), F64(39138912071199020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(1000771959050695500000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "𝘼", args: [] }, [I32(151)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(-1.0)] }, [F64(7.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "𝐀", args: [] }, [I32(152)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 3, 64, 12, 0, 11, 67, 0, 0, 128, 63, 69, 26, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 142, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "𝓐", args: [] }, [I32(153)])
run assertion Exhaustion(Invoke { mod_ref: None, func: "test-guard-page-skip", args: [I32(100)] }, "call stack exhausted")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(1.0)] }, [F64(5.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "𝕬", args: [] }, [I32(154)])
run assertion Return(Invoke { mod_ref: None, func: "𝗔", args: [] }, [I32(155)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 3, 64, 12, 0, 11, 2, 64, 65, 1, 91, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "𝒜", args: [] }, [I32(156)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(-6.283185307179586)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 144, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "𝔄", args: [] }, [I32(157)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "𝔸", args: [] }, [I32(158)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(6.283185307179586)] }, [F64(-12.566370614359172)])
run assertion Return(Invoke { mod_ref: None, func: "𝖠", args: [] }, [I32(159)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 3, 64, 12, 0, 11, 65, 1, 67, 0, 0, 0, 0, 91, 26, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 140, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "𝙰", args: [] }, [I32(160)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f32.no_fold_div_sqrts", args: [F32(-58545012.0), F32(-0.000000000000000006443773)] })
run assertion Return(Invoke { mod_ref: None, func: "ᴀ", args: [] }, [I32(161)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ᴬ", args: [] }, [I32(162)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 64, 3, 64, 12, 0, 11, 65, 1, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "Ⓐ", args: [] }, [I32(163)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 145, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_sqrts", args: [F32(7407384000.0), F32(209778930.0)] }, [F32(5.9422584)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 151, 128, 128, 128, 0, 1, 145, 128, 128, 128, 0, 0, 2, 127, 65, 1, 3, 64, 12, 0, 11, 67, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_sqrts", args: [F32(0.0000000000000000000000000000000000013764126), F32(54692.9)] }, [F32(0.0000000000000000000050165927)])
run assertion Return(Invoke { mod_ref: None, func: "Ａ", args: [] }, [I32(164)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 143, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "🄐", args: [] }, [I32(165)])
run assertion Return(Invoke { mod_ref: None, func: "🄰", args: [] }, [I32(166)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_sqrts", args: [F32(979288960000000000.0), F32(0.0000000012643552)] }, [F32(27830490000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 2, 64, 3, 64, 3, 64, 12, 0, 11, 65, 1, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "\u{e0041}", args: [] }, [I32(167)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 153, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "U+0041", args: [] }, [I32(168)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_sqrts", args: [F32(0.00000000000000000000000000000000029141283), F32(0.00000000000000000000000000000017928174)] }, [F32(0.04031682)])
run assertion Return(Invoke { mod_ref: None, func: "A\u{200b}", args: [] }, [I32(169)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 3, 127, 3, 64, 12, 0, 11, 67, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 155, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "f64.no_fold_div_sqrts", args: [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012206137319883022), F64(-0.000000000000000000000000000000000000000000000000000000008209583449676083)] })
run assertion Return(Invoke { mod_ref: None, func: "А", args: [] }, [I32(170)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "Ꙗ", args: [] }, [I32(171)])
run assertion Return(Invoke { mod_ref: None, func: "\u{2dfc}", args: [] }, [I32(172)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_sqrts", args: [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033818852462305824), F64(7655783976315048000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021017671425665687)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 156, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 3, 64, 12, 0, 11, 65, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{2df6}", args: [] }, [I32(173)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.5)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "Ɐ", args: [] }, [I32(174)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_sqrts", args: [F64(45963335670647510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0000000000000000000000000000000023932467846883046)] }, [F64(138583660172663150000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "🅐", args: [] }, [I32(175)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [F32(-0.5)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 158, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 3, 64, 12, 0, 11, 67, 0, 0, 0, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "🅰", args: [] }, [I32(176)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "Ⱝ", args: [] }, [I32(177)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.5)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 154, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 4, 64, 1, 69, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "𐐂", args: [] }, [I32(178)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(-6.283185307179586)] }, [F64(12.566370614359172)])
run assertion Return(Invoke { mod_ref: None, func: "𐐈", args: [] }, [I32(179)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 159, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_sqrts", args: [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025327340978668086), F64(4475305129961258000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023789399141325018)])
run assertion Return(Invoke { mod_ref: None, func: "𐒰", args: [] }, [I32(180)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(1.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "À", args: [] }, [I32(181)])
run assertion Return(Invoke { mod_ref: None, func: "Á", args: [] }, [I32(182)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 4, 64, 67, 0, 0, 128, 63, 69, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 157, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(1.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_sqrts", args}, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010530826009924495)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 4, 64, 65, 1, 91, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 70, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(6.283185307179586)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 65, 0, 4, 64, 65, 1, 67, 0, 0, 0, 0, 91, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 78, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 4, 64, 65, 1, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 79, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 4, 127, 67, 0, 0, 0, 0, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 74, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_sqrt_div", args: [F32(-4728556800000000000000000.0), F32(8677282000000000000000000000.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 4, 64, 2, 64, 65, 1, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 75, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 65, 0, 4, 127, 2, 127, 67, 0, 0, 0, 0, 11, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 76, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_sqrt_div", args: [F32(-0.0000000000000000000000000000000000011776882), F32(0.000000000000000000000000000009805153)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "Â", args: [] }, [I32(183)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "Ã", args: [] }, [I32(184)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 4, 64, 3, 64, 65, 1, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "Ä", args: [] }, [I32(185)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_sqrt_div", args: [F32(816717060.0), F32(0.000000000000000000000000000000000000003323171)] }, [F32(14167568000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 77, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 65, 0, 4, 127, 3, 127, 67, 0, 0, 0, 0, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_sqrt_div", args: [F32(-11932267000000.0), F32(8637067000000000000000000000000000.0)] }, [F32(-0.00012839255)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 72, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_sqrt_div", args: [F32(-401.0235), F32(134.33022)] }, [F32(-34.600548)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 65, 1, 15, 68, 0, 0, 0, 0, 0, 0, 240, 63, 15, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-inf)] }, [F32(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 73, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_sqrt_div", args: [F64(1468134622910490500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(2466074582285183000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(inf)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 154, 128, 128, 128, 0, 1, 148, 128, 128, 128, 0, 0, 2, 127, 65, 1, 12, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_sqrt_div", args}, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 71, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_sqrt_div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016812810256029166), F64(7362783602442129000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006196112486187196)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 64, 0, 67, 0, 0, 0, 0, 13, 0, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 81, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_sqrt_div", args: [F64(-10605483729939836000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000622591783694072)] }, [F64(-42503900822233765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 2, 127, 2, 64, 0, 65, 0, 65, 0, 13, 1, 11, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 89, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_sqrt_div", args: [F64(26336349695373093000000000000000.0), F64(30791413285853300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004746142447510695)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 152, 128, 128, 128, 0, 1, 146, 128, 128, 128, 0, 0, 2, 127, 2, 125, 0, 65, 0, 65, 0, 13, 1, 11, 26, 65, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(inf)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 90, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 127, 0, 65, 0, 65, 0, 13, 0, 65, 0, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 85, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 64, 0, 67, 0, 0, 128, 63, 14, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "Ā", args: [] }, [I32(186)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "Ă", args: [] }, [I32(187)])
run assertion Return(Invoke { mod_ref: None, func: "Ą", args: [] }, [I32(188)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "Ǎ", args: [] }, [I32(189)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 127, 0, 67, 0, 0, 0, 0, 65, 1, 14, 0, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "Ǟ", args: [] }, [I32(190)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_flush_intermediate_subnormal", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.00000011920929), F32(8388608.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "Ǡ", args: [] }, [I32(191)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "Ǻ", args: [] }, [I32(192)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 151, 128, 128, 128, 0, 1, 145, 128, 128, 128, 0, 0, 2, 64, 2, 125, 0, 65, 1, 14, 2, 0, 1, 0, 11, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 86, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 87, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 161, 128, 128, 128, 0, 1, 155, 128, 128, 128, 0, 0, 2, 124, 2, 125, 0, 65, 1, 14, 2, 0, 1, 1, 11, 26, 68, 0, 0, 0, 0, 0, 0, 0, 0, 11, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 88, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_flush_intermediate_subnormal", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0000000000000002220446049250313), F64(4503599627370496.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 64, 65, 3, 2, 64, 0, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 83, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 2, 64, 2, 64, 0, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "Ȁ", args: [] }, [I32(193)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(-inf)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 84, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(inf)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 126, 66, 0, 2, 64, 0, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [F32(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 67, 0, 0, 0, 0, 82, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.0)] }, [F32(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 2, 64, 65, 3, 2, 64, 66, 1, 0, 11, 11, 65, 9, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 91, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(-0.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 64, 65, 3, 2, 64, 12, 1, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(0.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 96, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 2, 127, 2, 64, 65, 0, 12, 1, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 94, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.recoding_eq", args: [F32(-inf), F32(3.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 2, 127, 66, 0, 2, 64, 65, 0, 12, 1, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.recoding_le", args: [F32(-inf), F32(3.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 95, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f32.recoding_lt", args: [F32(-inf), F32(3.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.recoding_eq", args: [F32(0.0), F32(1.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 2, 64, 2, 64, 65, 3, 2, 64, 12, 2, 11, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "Ȃ", args: [] }, [I32(194)])
run assertion Return(Invoke { mod_ref: None, func: "f32.recoding_le", args: [F32(0.0), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "Ȧ", args: [] }, [I32(195)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.recoding_lt", args: [F32(0.0), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(-inf)] }, [F64(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 93, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 2, 127, 2, 64, 2, 64, 65, 0, 12, 2, 11, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.recoding_eq", args: [F64(-inf), F64(3.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "f64.recoding_le", args: [F64(-inf), F64(3.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "Ⱥ", args: [] }, [I32(196)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 151, 128, 128, 128, 0, 1, 145, 128, 128, 128, 0, 0, 2, 127, 2, 126, 66, 0, 2, 64, 65, 0, 12, 2, 11, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "Ӑ", args: [] }, [I32(197)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.recoding_lt", args: [F64(-inf), F64(3.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "Ӓ", args: [] }, [I32(198)])
run assertion Return(Invoke { mod_ref: None, func: "ߊ", args: [] }, [I32(199)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.recoding_eq", args: [F64(0.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 150, 128, 128, 128, 0, 1, 144, 128, 128, 128, 0, 0, 2, 64, 65, 3, 2, 64, 66, 1, 12, 1, 11, 11, 65, 9, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{821}", args: [] }, [I32(200)])
run assertion Return(Invoke { mod_ref: None, func: "\u{822}", args: [] }, [I32(201)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "f64.recoding_le", args: [F64(0.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{823}", args: [] }, [I32(202)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 64, 65, 3, 2, 64, 15, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ࠤ", args: [] }, [I32(203)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "\u{825}", args: [] }, [I32(204)])
run assertion Return(Invoke { mod_ref: None, func: "ऄ", args: [] }, [I32(205)])
run assertion Return(Invoke { mod_ref: None, func: "अ", args: [] }, [I32(206)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.5)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 2, 64, 2, 64, 65, 0, 15, 11, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 92, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.recoding_lt", args: [F64(0.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(6.283185307179586), F64(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 2, 126, 66, 0, 2, 64, 65, 0, 15, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.5)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 97, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [F32(-1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 151, 128, 128, 128, 0, 1, 145, 128, 128, 128, 0, 0, 2, 64, 65, 3, 2, 64, 66, 1, 65, 0, 15, 11, 11, 65, 9, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 102, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(1.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "recoding_demote", args: [F64(0.00000000000000000000000000000000000000023860049081905093), F32(1221.0)] }, [F32(0.0000000000000000000000000000000000002913312)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [F32(-1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 3, 64, 65, 3, 2, 64, 0, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 100, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(1.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 3, 64, 2, 64, 0, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 101, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(-0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 3, 126, 66, 0, 2, 64, 0, 11, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 99, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 3, 64, 1, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 98, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_extended_precision_div", args: [F32(3.0), F32(7.0), F32(0.42857143)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_extended_precision_div", args: [F64(3.0), F64(7.0), F64(0.42857142857142855)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 3, 64, 65, 0, 12, 0, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 167, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 1, 1, 127, 0, 34, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 168, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(1.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 2, 127, 2, 64, 0, 65, 0, 13, 1, 11, 65, 0, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 169, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 170, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 0, 13, 0, 173, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_distribute_exact", args: [F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_distribute_exact", args: [F64(-0.0)] }, [F64(0.0)])
test run_unreached_invalid ... run assertion Return(Invoke { mod_ref: None, func: "ॲ", args: [] }, [I32(207)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "অ", args: [] }, [I32(208)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 171, 11]), "type mismatch")
ok
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(inf)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ਅ", args: [] }, [I32(209)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "અ", args: [] }, [I32(210)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 188, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ଅ", args: [] }, [I32(211)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "அ", args: [] }, [I32(212)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(inf)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "అ", args: [] }, [I32(213)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 172, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ಅ", args: [] }, [I32(214)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "അ", args: [] }, [I32(215)])
run assertion Return(Invoke { mod_ref: None, func: "ะ", args: [] }, [I32(216)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-inf)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(-inf)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(7)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(0)] }, [])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(7)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(2)] }, [])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(7)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(2.0)] }, [F32(1.4142135)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(-0.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(0.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f32.xkcd_sqrt_2", args: [F32(3.0), F32(5.0), F32(3.1415927), F32(7.0)] }, [F32(1.4142201)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(3.0)] }, [F32(1.7320508)])
run assertion Return(Invoke { mod_ref: None, func: "ະ", args: [] }, [I32(217)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "༁", args: [] }, [I32(218)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ཨ", args: [] }, [I32(219)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.xkcd_sqrt_3", args: [F32(2.0), F32(2.7182817), F32(3.1415927)] }, [F32(1.7305119)])
run assertion Return(Invoke { mod_ref: None, func: "\u{fb8}", args: [] }, [I32(220)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "အ", args: [] }, [I32(221)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ဢ", args: [] }, [I32(222)])
run assertion Return(Invoke { mod_ref: None, func: "f32.sqrt", args: [F32(5.0)] }, [F32(2.236068)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.xkcd_sqrt_5", args: [F32(2.0), F32(2.7182817), F32(3.0)] }, [F32(2.2357588)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.xkcd_better_sqrt_5", args: [F32(13.0), F32(4.0), F32(3.1415927), F32(24.0)] }, [F32(2.236068)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(2.0)] }, [F64(1.4142135623730951)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "f64.xkcd_sqrt_2", args: [F64(3.0), F64(5.0), F64(3.141592653589793), F64(7.0)] }, [F64(1.4142200580539208)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(-inf), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(3.0)] }, [F64(1.7320508075688772)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.xkcd_sqrt_3", args: [F64(2.0), F64(2.718281828459045), F64(3.141592653589793)] }, [F64(1.7305119588645301)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.sqrt", args: [F64(5.0)] }, [F64(2.23606797749979)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(inf), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.xkcd_sqrt_5", args: [F64(2.0), F64(2.718281828459045), F64(3.0)] }, [F64(2.2357588823428847)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(1.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.xkcd_better_sqrt_5", args: [F64(13.0), F64(4.0), F64(3.141592653589793), F64(24.0)] }, [F64(2.2360678094452893)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(1.0)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(6.2831855)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ႜ", args: [] }, [I32(223)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ᅡ", args: [] }, [I32(224)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(6.2831855)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "አ", args: [] }, [I32(225)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ዐ", args: [] }, [I32(226)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "Ꭰ", args: [] }, [I32(227)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(340282350000000000000000000000000000000.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.compute_radix", args: [F32(1.0), F32(1.0)] }, [F32(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(340282350000000000000000000000000000000.0)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "f64.compute_radix", args: [F64(1.0), F64(1.0)] }, [F64(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(inf)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(inf)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-0.5), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_sub1_mul_add", args: [F32(0.00000000023283064), F32(1.0)] }, [F32(0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_sub1_mul_add", args: [F64(0.00000000000000000005421010862427522), F64(1.0)] }, [F64(0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(-0.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(0.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ᐊ", args: [] }, [I32(228)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ᖳ", args: [] }, [I32(229)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ᚨ", args: [] }, [I32(230)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ᚪ", args: [] }, [I32(231)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Exhaustion(Invoke { mod_ref: None, func: "test-guard-page-skip", args: [I32(200)] }, "call stack exhausted")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_le_monotonicity", args: [F32(0.0), F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_add_le_monotonicity", args: [F32(inf), F32(-inf), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_le_monotonicity", args: [F64(0.0), F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_add_le_monotonicity", args: [F64(inf), F64(-inf), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(-0.5)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(0.5)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args}, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(6.2831855)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ᛆ", args: [] }, [I32(232)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ᜀ", args: [] }, [I32(233)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32.not_lt", args: [F32(NaN), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(6.2831855)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.not_le", args: [F32(NaN), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.not_gt", args: [F32(NaN), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.not_ge", args: [F32(NaN), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(340282350000000000000000000000000000000.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.not_lt", args: [F64(NaN), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.not_le", args: [F64(NaN), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.not_gt", args: [F64(NaN), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(340282350000000000000000000000000000000.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.not_ge", args: [F64(NaN), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ᜠ", args: [] }, [I32(234)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ᝀ", args: [] }, [I32(235)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ᝠ", args: [] }, [I32(236)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(inf)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(-1.0)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "func-unwind-by-unreachable", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid1", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "func-unwind-by-br", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "size", args: [] }, [I32(8)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ᠠ", args: [] }, [I32(237)])
run assertion Return(Invoke { mod_ref: None, func: "func-unwind-by-br-value", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 173, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "func-unwind-by-br_if", args: [] }, [])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 63, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ᢇ", args: [] }, [I32(238)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(inf)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "func-unwind-by-br_if-value", args: [] }, [I32(9)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 174, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "\u{1920}", args: [] }, [I32(239)])
run assertion Return(Invoke { mod_ref: None, func: "f32.epsilon", args: [] }, [F32(-0.00000011920929)])
run assertion Return(Invoke { mod_ref: None, func: "func-unwind-by-br_table", args: [] }, [])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.epsilon", args: [] }, [F64(0.0000000000000002220446049250313)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 63, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 175, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ᥣ", args: [] }, [I32(240)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "func-unwind-by-br_table-value", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ᨕ", args: [] }, [I32(241)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "func-unwind-by-return", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 176, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "ᩋ", args: [] }, [I32(242)])
test run_memory_size ... ok
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.5)] }, [I32(1)])
run assertion TrapAction(Invoke { mod_ref: None, func: "block-unwind-by-unreachable", args: [] }, "unreachable")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ᩡ", args: [] }, [I32(243)])
run assertion Return(Invoke { mod_ref: None, func: "block-unwind-by-br", args: [] }, [I32(9)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 177, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ᮃ", args: [] }, [I32(244)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "block-unwind-by-br-value", args: [] }, [I32(9)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ᯀ", args: [] }, [I32(245)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "block-unwind-by-br_if", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid2", args: [] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ᯁ", args: [] }, [I32(246)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 189, 11]), "type mismatch")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 2, 1, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.epsilon", args: [] }, [F32(0.00000011920929)])
run assertion Return(Invoke { mod_ref: None, func: "ᰣ", args: [] }, [I32(247)])
run assertion Return(Invoke { mod_ref: None, func: "block-unwind-by-br_if-value", args: [] }, [I32(9)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(1.0), F32(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 2, 1, 143]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "Ḁ", args: [] }, [I32(248)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 178, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "block-unwind-by-br_table", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(-inf)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 2, 1, 144]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.epsilon", args: [] }, [F64(0.0000000000000002220446049250313)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(-0.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "Ạ", args: [] }, [I32(249)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "block-unwind-by-br_table-value", args: [] }, [I32(9)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 179, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(0.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "Ả", args: [] }, [I32(250)])
run assertion Return(Invoke { mod_ref: None, func: "block-unwind-by-return", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "Ấ", args: [] }, [I32(251)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-everywhere", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(-0.0)] }, [F32(-0.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 2, 1, 159]), "invalid UTF-8 encoding")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 180, 11]), "type mismatch")
run assertion TrapAction(Invoke { mod_ref: None, func: "block-nested-unwind-by-unreachable", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "Ầ", args: [] }, [I32(252)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-first", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(inf)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 2, 1, 160]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-last", args: [I32(1)] }, [I32(2)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 2, 1, 191]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "block-nested-unwind-by-br", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "Ẩ", args: [] }, [I32(253)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 181, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "Ẫ", args: [] }, [I32(254)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-everywhere", args: [I32(1)] }, [I32(2)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 194, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "block-nested-unwind-by-br-value", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-first", args: [I32(1)] }, [I32(2)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 2, 1, 194]), "invalid UTF-8 encoding")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 182, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "block-nested-unwind-by-br_if", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-last", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "Ậ", args: [] }, [I32(255)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "block-nested-unwind-by-br_if-value", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-everywhere", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "block-nested-unwind-by-br_table", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "block-nested-unwind-by-br_table-value", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "Ắ", args: [] }, [I32(256)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 190, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-first", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "Ằ", args: [] }, [I32(257)])
run assertion Return(Invoke { mod_ref: None, func: "block-nested-unwind-by-return", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-last", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "Ẳ", args: [] }, [I32(258)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-6.2831855)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 194, 46]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-everywhere", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "Ẵ", args: [] }, [I32(259)])
run assertion Return(Invoke { mod_ref: None, func: "as-load-first", args: [I32(100)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "unary-after-unreachable", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "Ặ", args: [] }, [I32(260)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 183, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "unary-after-br", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "あ", args: [] }, [I32(261)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_trichotomy_lt", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ア", args: [] }, [I32(262)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 192, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ㄚ", args: [] }, [I32(263)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 184, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "unary-after-br_if", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "as-load-last", args: [I32(100)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_trichotomy_le", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 192, 191]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "unary-after-br_table", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "as-load-everywhere", args: [I32(100)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ㅏ", args: [] }, [I32(264)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(-0.5)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_trichotomy_gt", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(-0.0)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 193, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "unary-after-return", args: [] }, [I32(9)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 185, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(0.5)] }, [F32(-6.2831855)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 193, 191]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-first", args: [I32(0), I32(1)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_trichotomy_ge", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 194, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-mid", args: [I32(0), I32(2)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(-0.5)] }, [F32(-0.5)])
run assertion TrapAction(Invoke { mod_ref: None, func: "binary-after-unreachable", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-last", args: [I32(0), I32(3)] }, [])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 194, 127]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "㈎", args: [] }, [I32(265)])
run assertion Return(Invoke { mod_ref: None, func: "㈏", args: [] }, [I32(266)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 186, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "binary-after-br", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-everywhere", args: [I32(0), I32(4)] }, [])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 194, 192]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(6.283185307179586)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 194, 253]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_trichotomy_lt", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "㈐", args: [] }, [I32(267)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(-1.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "㈑", args: [] }, [I32(268)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_trichotomy_le", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "㈒", args: [] }, [I32(269)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(1.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "binary-after-br_if", args: [] }, [I32(9)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 223, 0]), "invalid UTF-8 encoding")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 10, 137, 128, 128, 128, 0, 1, 131, 128, 128, 128, 0, 0, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "㈓", args: [] }, [I32(270)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(-0.0)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 223, 127]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "binary-after-br_table", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "㈔", args: [] }, [I32(271)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(1.0)] }, [F32(1.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 223, 192]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_trichotomy_gt", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args}, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 223, 253]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_trichotomy_ge", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "binary-after-return", args: [] }, [I32(9)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 137, 128, 128, 128, 0, 1, 131, 128, 128, 128, 0, 0, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion TrapAction(Invoke { mod_ref: None, func: "select-after-unreachable", args: [] }, "unreachable")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 225, 128, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "select-after-br", args: [] }, [I32(9)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 225, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 225, 128, 46]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "select-after-br_if", args: [] }, [I32(9)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 137, 128, 128, 128, 0, 1, 131, 128, 128, 128, 0, 0, 1, 11]), "type mismatch")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 2, 1, 225]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "select-after-br_table", args: [] }, [I32(9)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 225, 46]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 224, 0, 160]), "invalid UTF-8 encoding")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 137, 128, 128, 128, 0, 1, 131, 128, 128, 128, 0, 0, 1, 11]), "type mismatch")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 224, 127, 160]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "select-after-return", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 224, 128, 128]), "invalid UTF-8 encoding")
run assertion TrapAction(Invoke { mod_ref: None, func: "block-value-after-unreachable", args: [] }, "unreachable")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "block-value-after-br", args: [] }, [I32(9)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 224, 128, 160]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(340282350000000000000000000000000000000.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "block-value-after-br_if", args: [] }, [I32(9)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 224, 159, 160]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "block-value-after-br_table", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 224, 159, 191]), "invalid UTF-8 encoding")
test run_nop ... ok
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 187, 11]), "type mismatch")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 224, 192, 160]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 224, 253, 160]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 225, 0, 128]), "invalid UTF-8 encoding")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 65, 0, 191, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "block-value-after-return", args: [] }, [I32(9)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 225, 127, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 1, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion TrapAction(Invoke { mod_ref: None, func: "loop-value-after-unreachable", args: [] }, "unreachable")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 225, 192, 128]), "invalid UTF-8 encoding")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 64, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "loop-value-after-br", args: [] }, [I32(9)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 1, 143, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 225, 253, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "loop-value-after-br_if", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 1, 144, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
test run_typecheck ... ok
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 236, 0, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "loop-value-after-br_table", args: [] }, [I32(9)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 1, 159, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 236, 127, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "loop-value-after-return", args: [] }, [I32(9)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 1, 160, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(340282350000000000000000000000000000000.0)] }, [F32(6.2831855)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 236, 192, 128]), "invalid UTF-8 encoding")
run assertion Exhaustion(Invoke { mod_ref: None, func: "test-guard-page-skip", args: [I32(300)] }, "call stack exhausted")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 1, 191, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 236, 253, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(-inf)] }, [F32(-inf)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 4, 116, 101, 115, 116, 1, 128, 3, 127, 0]), "invalid UTF-8 encoding")
test run_unwind ... run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 237, 0, 128]), "invalid UTF-8 encoding")
ok
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 194, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(inf)] }, [F32(-6.2831855)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 237, 127, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 4, 116, 101, 115, 116, 1, 143, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "㈕", args: [] }, [I32(272)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 1, 194, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 237, 160, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(-inf)] }, [F32(-inf)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 4, 116, 101, 115, 116, 1, 144, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "㈖", args: [] }, [I32(273)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 194, 46, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 237, 160, 191]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 4, 116, 101, 115, 116, 1, 159, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(inf)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "㈗", args: [] }, [I32(274)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 237, 191, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 192, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 4, 116, 101, 115, 116, 1, 160, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "㈘", args: [] }, [I32(275)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 237, 191, 191]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 192, 191, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 4, 116, 101, 115, 116, 1, 191, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 237, 192, 128]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 193, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 194, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 237, 253, 128]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 193, 191, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 4, 116, 101, 115, 116, 1, 194, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 238, 0, 128]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-6.2831855), F32(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 194, 0, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 194, 46, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 238, 127, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 194, 127, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 238, 192, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 192, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Exhaustion(Invoke { mod_ref: None, func: "test-guard-page-skip", args: [I32(400)] }, "call stack exhausted")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 238, 253, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 194, 192, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 192, 191, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 239, 0, 128]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 194, 253, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 193, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 239, 127, 128]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(6.2831855), F32(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 223, 0, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 239, 192, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 193, 191, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 223, 127, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 239, 253, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 194, 0, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 224, 160, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 223, 192, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 194, 127, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 224, 160, 127]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(0.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 223, 253, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 194, 192, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 224, 160, 192]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 225, 128, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 194, 253, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 224, 160, 253]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 225, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 225, 128, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 223, 0, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 225, 128, 46, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(0.0)] }, [F32(0.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 225, 128, 127]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 223, 127, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Exhaustion(Invoke { mod_ref: None, func: "test-guard-page-skip", args: [I32(500)] }, "call stack exhausted")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 1, 225, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 225, 128, 192]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 223, 192, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 225, 46, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 225, 128, 253]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "㈙", args: [] }, [I32(276)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 223, 253, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "㈚", args: [] }, [I32(277)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "㈛", args: [] }, [I32(278)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 224, 0, 160, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 225, 128, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 236, 128, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 48, 48, 92, 48, 48, 92, 102, 101, 92, 102, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "㉮", args: [] }, [I32(279)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 236, 128, 127]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 225, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "㉯", args: [] }, [I32(280)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 236, 128, 192]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 56, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 225, 128, 46, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "㉰", args: [] }, [I32(281)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 4, 116, 101, 115, 116, 1, 225, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "㉱", args: [] }, [I32(282)])
run assertion Return(Invoke { mod_ref: None, func: "㉲", args: [] }, [I32(283)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 225, 46, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "㉳", args: [] }, [I32(284)])
run assertion Return(Invoke { mod_ref: None, func: "㉴", args: [] }, [I32(285)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 57, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 236, 128, 253]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Exhaustion(Invoke { mod_ref: None, func: "test-guard-page-skip", args: [I32(600)] }, "call stack exhausted")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 224, 0, 160, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "f32.arithmetic_nan_bitpattern", args: [I32(2139107856), I32(2139107856)] }, [I32(2143289344)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 57, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 224, 127, 160, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 97, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f32.canonical_nan_bitpattern", args: [I32(0), I32(0)] }, [I32(2143289344)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 98, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "㉵", args: [] }, [I32(286)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 237, 128, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 224, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 237, 128, 127]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "㉶", args: [] }, [I32(287)])
run assertion Return(Invoke { mod_ref: None, func: "f32.canonical_nan_bitpattern", args: [I32(2143289344), I32(2143289344)] }, [I32(2143289344)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 237, 128, 192]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "㉷", args: [] }, [I32(288)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(inf)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 224, 127, 160, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 237, 128, 253]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 99, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "㉸", args: [] }, [I32(289)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 238, 128, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 224, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 224, 128, 160, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(-0.5)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 224, 159, 160, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(0.5)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 224, 159, 191, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f32.canonical_nan_bitpattern", args: [I32(4290772992), I32(2143289344)] }, [I32(2143289344)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 238, 128, 127]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 99, 48, 92, 98, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 224, 128, 160, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(inf)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 238, 128, 192]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(-0.5)] }, [I32(1)])
run assertion Exhaustion(Invoke { mod_ref: None, func: "test-guard-page-skip", args: [I32(700)] }, "call stack exhausted")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 224, 192, 160, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 238, 128, 253]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 99, 49, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 224, 159, 160, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "㉹", args: [] }, [I32(290)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 224, 159, 191, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "㉺", args: [] }, [I32(291)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 224, 253, 160, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(-1.0)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 224, 192, 160, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "㉻", args: [] }, [I32(292)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "㋐", args: [] }, [I32(293)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 99, 49, 92, 98, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 225, 0, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 224, 253, 160, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ꀊ", args: [] }, [I32(294)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ꓮ", args: [] }, [I32(295)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 239, 128, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ꕉ", args: [] }, [I32(296)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(1.0)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 99, 50, 92, 48, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 225, 127, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 225, 0, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.5)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.canonical_nan_bitpattern", args: [I32(2143289344), I32(4290772992)] }, [I32(2143289344)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 225, 127, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Exhaustion(Invoke { mod_ref: None, func: "test-guard-page-skip", args: [I32(800)] }, "call stack exhausted")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 225, 192, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 239, 128, 127]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 99, 50, 92, 50, 101, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(1.0)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 225, 253, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 239, 128, 192]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 225, 192, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(0.5)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 99, 50, 92, 55, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 239, 128, 253]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f32.canonical_nan_bitpattern", args: [I32(4290772992), I32(4290772992)] }, [I32(2143289344)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 236, 0, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 99, 50, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ꚠ", args: [] }, [I32(297)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(-6.2831855)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 6, 5, 241, 128, 128, 128, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 225, 253, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 99, 50, 92, 99, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f32.nonarithmetic_nan_bitpattern", args: [I32(2143302160)] }, [I32(4290785808)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 236, 127, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ꠀ", args: [] }, [I32(298)])
run assertion Return(Invoke { mod_ref: None, func: "f32.nonarithmetic_nan_bitpattern", args: [I32(4290785808)] }, [I32(2143302160)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 236, 192, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 241, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f32.nonarithmetic_nan_bitpattern", args: [I32(2139107856)] }, [I32(4286591504)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(6.2831855)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 236, 0, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ꠣ", args: [] }, [I32(299)])
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 99, 50, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(-1.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f32.nonarithmetic_nan_bitpattern", args: [I32(4286591504)] }, [I32(2139107856)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ꡝ", args: [] }, [I32(300)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 236, 253, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 236, 127, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ꢂ", args: [] }, [I32(301)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 99, 50, 92, 102, 100, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 241, 128, 128, 35]), "invalid UTF-8 encoding")
run assertion Exhaustion(Invoke { mod_ref: None, func: "test-guard-page-skip", args: [I32(900)] }, "call stack exhausted")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 237, 0, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.arithmetic_nan_bitpattern", args: [I64(9218868437227418128), I64(9218868437227418128)] }, [I64(9221120237041090560)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(1.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{a8ea}", args: [] }, [I32(302)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 100, 102, 92, 48, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(6.2831855)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 236, 192, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 241, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 237, 127, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.canonical_nan_bitpattern", args: [I64(0), I64(0)] }, [I64(9221120237041090560)])
run assertion Return(Invoke { mod_ref: None, func: "ꤢ", args: [] }, [I32(303)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 100, 102, 92, 55, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(-1.0)] }, [F32(-1.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 237, 160, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 236, 253, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ꥆ", args: [] }, [I32(304)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 241, 128, 35]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(1.0)] }, [F32(1.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 237, 160, 191, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 100, 102, 92, 99, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ꦄ", args: [] }, [I32(305)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 100, 102, 92, 102, 100, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 2, 1, 241]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.canonical_nan_bitpattern", args: [I64(9221120237041090560), I64(9221120237041090560)] }, [I64(9221120237041090560)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 237, 0, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 241, 35]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 48, 92, 48, 48, 92, 97, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 237, 127, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ꨀ", args: [] }, [I32(306)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 48, 92, 55, 102, 92, 97, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 237, 191, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 0, 144, 144]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ne", args: [F64(NaN), F64(NaN)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ｱ", args: [] }, [I32(307)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 237, 160, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(6.2831855)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ￂ", args: [] }, [I32(308)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(-0.0)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 237, 191, 191, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 237, 160, 191, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𐀀", args: [] }, [I32(309)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 237, 192, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 127, 144, 144]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(0.0)] }, [I32(0)])
test run_skip_stack_guard_page ... ok
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "𐊀", args: [] }, [I32(310)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.canonical_nan_bitpattern", args: [I64(18444492273895866368), I64(9221120237041090560)] }, [I64(9221120237041090560)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 48, 92, 56, 48, 92, 97, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(-inf)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 237, 253, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 128, 128, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 237, 191, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𐊠", args: [] }, [I32(311)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(0.0)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 48, 92, 57, 102, 92, 97, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.canonical_nan_bitpattern", args: [I64(9221120237041090560), I64(18444492273895866368)] }, [I64(9221120237041090560)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 128, 144, 144]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 238, 0, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𐌀", args: [] }, [I32(312)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 237, 191, 191, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 143, 144, 144]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𐎠", args: [] }, [I32(313)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 48, 92, 57, 102, 92, 98, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 237, 192, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.canonical_nan_bitpattern", args: [I64(18444492273895866368), I64(18444492273895866368)] }, [I64(9221120237041090560)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 238, 127, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "𐒖", args: [] }, [I32(314)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 237, 253, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 143, 191, 191]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 48, 92, 97, 48, 92, 48, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𐔀", args: [] }, [I32(315)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 238, 0, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.nonarithmetic_nan_bitpattern", args: [I64(9221120237041103376)] }, [I64(18444492273895879184)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 48, 92, 97, 48, 92, 55, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 238, 192, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 192, 144, 144]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.nonarithmetic_nan_bitpattern", args: [I64(18444492273895879184)] }, [I64(9221120237041103376)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 48, 92, 97, 48, 92, 99, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 238, 127, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𐝀", args: [] }, [I32(316)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 253, 144, 144]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 238, 253, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 48, 92, 97, 48, 92, 102, 100, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.nonarithmetic_nan_bitpattern", args: [I64(9218868437227418128)] }, [I64(18442240474082193936)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 238, 192, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "𐠀", args: [] }, [I32(317)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 241, 0, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.nonarithmetic_nan_bitpattern", args: [I64(18442240474082193936)] }, [I64(9218868437227418128)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 48, 92, 99, 48, 92, 97, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 239, 0, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_sub_zero", args: [I32(2141192192)] }, [I32(2143289344)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "𐤠", args: [] }, [I32(318)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 238, 253, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 241, 127, 128, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 239, 127, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_neg0_sub", args: [I32(2141192192)] }, [I32(2143289344)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 239, 0, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 48, 92, 102, 100, 92, 97, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𐦀", args: [] }, [I32(319)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 241, 192, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 49, 92, 48, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 239, 127, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 49, 92, 50, 101, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_mul_one", args: [I32(2141192192)] }, [I32(2143289344)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 239, 192, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 241, 253, 128, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 239, 192, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𐦠", args: [] }, [I32(320)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_neg1_mul", args: [I32(2141192192)] }, [I32(2143289344)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 49, 92, 55, 102, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 239, 253, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 243, 0, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𐨀", args: [] }, [I32(321)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 239, 253, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_one", args: [I32(2141192192)] }, [I32(2143289344)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 49, 92, 56, 48, 92, 48, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(-inf)] }, [F32(-inf)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 224, 160, 0, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𐬀", args: [] }, [I32(322)])
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_div_neg1", args: [I32(2141192192)] }, [I32(2143289344)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 243, 127, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 49, 92, 56, 48, 92, 50, 101, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 224, 160, 0, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "𐰀", args: [] }, [I32(323)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 224, 160, 127, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 243, 192, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(inf)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_sub_zero", args: [I64(9219994337134247936)] }, [I64(9221120237041090560)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 49, 92, 56, 48, 92, 55, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 224, 160, 192, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 224, 160, 127, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "𐰁", args: [] }, [I32(324)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 243, 253, 128, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 49, 92, 56, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "𐲀", args: [] }, [I32(325)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 224, 160, 192, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_neg0_sub", args: [I64(9219994337134247936)] }, [I64(9221120237041090560)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 224, 160, 253, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 244, 0, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "𑀅", args: [] }, [I32(326)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 49, 92, 56, 48, 92, 99, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(inf)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "𑂃", args: [] }, [I32(327)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 244, 127, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_mul_one", args: [I64(9219994337134247936)] }, [I64(9221120237041090560)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 225, 128, 0, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(0.0)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 224, 160, 253, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "\u{11127}", args: [] }, [I32(328)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 244, 144, 128, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 49, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 225, 128, 127, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 49, 92, 56, 48, 92, 102, 100, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_neg1_mul", args: [I64(9219994337134247936)] }, [I64(9221120237041090560)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 225, 128, 0, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 244, 191, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𑅐", args: [] }, [I32(329)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 225, 128, 192, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_one", args: [I64(9219994337134247936)] }, [I64(9221120237041090560)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 244, 192, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "𑆃", args: [] }, [I32(330)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 49, 92, 99, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 225, 128, 127, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 225, 128, 253, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 244, 253, 128, 128]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_div_neg1", args: [I64(9219994337134247936)] }, [I64(9221120237041090560)])
run assertion Return(Invoke { mod_ref: None, func: "𑈀", args: [] }, [I32(331)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 49, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 236, 128, 0, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 49, 92, 102, 100, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 245, 128, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𑊀", args: [] }, [I32(332)])
run assertion Return(Invoke { mod_ref: None, func: "no_fold_promote_demote", args: [I32(2141192192)] }, [I32(2143289344)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 225, 128, 192, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𑊰", args: [] }, [I32(333)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 99, 92, 48, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 236, 128, 127, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𑌅", args: [] }, [I32(334)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 247, 128, 128, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 225, 128, 253, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 99, 92, 55, 102, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 236, 128, 192, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "\u{11370}", args: [] }, [I32(335)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 247, 191, 191, 191]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𑐀", args: [] }, [I32(336)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 99, 92, 56, 48, 92, 48, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 236, 128, 253, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 236, 128, 0, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "𑒁", args: [] }, [I32(337)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 144, 0, 144]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 99, 92, 56, 48, 92, 55, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(-0.5)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 237, 128, 0, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 144, 127, 144]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𑖀", args: [] }, [I32(338)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(0.5)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 99, 92, 56, 48, 92, 99, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 144, 192, 144]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 236, 128, 127, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𑘀", args: [] }, [I32(339)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 237, 128, 127, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 144, 253, 144]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 99, 92, 56, 48, 92, 102, 100, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "𑚀", args: [] }, [I32(340)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 237, 128, 192, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 236, 128, 192, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 241, 128, 0, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(-0.5)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 99, 92, 99, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "dot_product_example", args: [F64(32000000.0), F64(1.0), F64(-1.0), F64(80000000.0), F64(40000000.0), F64(1.0), F64(-1.0), F64(-16000000.0)] }, [F64(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "𑜒", args: [] }, [I32(341)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 237, 128, 253, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𑜠", args: [] }, [I32(342)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 241, 128, 127, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 236, 128, 253, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𑢡", args: [] }, [I32(343)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(0.5)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 99, 92, 102, 100, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "with_binary_sum_collapse", args: [F64(32000000.0), F64(1.0), F64(-1.0), F64(80000000.0), F64(40000000.0), F64(1.0), F64(-1.0), F64(-16000000.0)] }, [F64(2.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 237, 128, 0, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 241, 128, 192, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(-0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(-0.5)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 238, 128, 0, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(-1.0)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 100, 92, 48, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𑫕", args: [] }, [I32(344)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "𑰀", args: [] }, [I32(345)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(0.0)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(0.5)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 100, 92, 55, 102, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 241, 128, 253, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 238, 128, 127, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 237, 128, 127, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𑲏", args: [] }, [I32(346)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(-0.0)] }, [F32(-0.0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 100, 92, 56, 48, 92, 48, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 238, 128, 192, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 237, 128, 192, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "\u{11caf}", args: [] }, [I32(347)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(-1.0)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 243, 128, 0, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 100, 92, 56, 48, 92, 55, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "𒀀", args: [] }, [I32(348)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 238, 128, 253, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 237, 128, 253, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𖧕", args: [] }, [I32(349)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 100, 92, 56, 48, 92, 99, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 243, 128, 127, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f32.contract2fma", args: [F32(1.0), F32(1.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(-1.0)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 239, 128, 0, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𖩆", args: [] }, [I32(350)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 100, 92, 56, 48, 92, 102, 100, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 238, 128, 0, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 243, 128, 192, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.contract2fma", args: [F32(1.1), F32(1.1)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "𖫧", args: [] }, [I32(351)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 239, 128, 127, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "𖽔", args: [] }, [I32(352)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 100, 92, 97, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 238, 128, 127, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𛱁", args: [] }, [I32(353)])
run assertion Return(Invoke { mod_ref: None, func: "f32.contract2fma", args: [F32(1.1999999), F32(1.1999999)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 243, 128, 253, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 239, 128, 192, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(0.000000000000000000000000000000000000000000001)] }, [F32(-inf)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 100, 92, 97, 48, 92, 98, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 244, 128, 0, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𛱤", args: [] }, [I32(354)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 238, 128, 192, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.contract2fma", args: [F64(1.0), F64(1.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 239, 128, 253, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 238, 128, 253, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𞠣", args: [] }, [I32(355)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 244, 128, 127, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(-1.0)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 100, 92, 98, 102, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "f64.contract2fma", args: [F64(1.1), F64(1.1)] }, [F64(0.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 15, 1, 4, 116, 101, 115, 116, 5, 241, 128, 128, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "🇦", args: [] }, [I32(356)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(1.0)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 239, 128, 0, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 244, 128, 192, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 100, 92, 98, 102, 92, 98, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "Ɑ", args: [] }, [I32(357)])
run assertion Return(Invoke { mod_ref: None, func: "f64.contract2fma", args: [F64(1.2), F64(1.2)] }, [F64(0.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 241, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 100, 92, 99, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 244, 128, 253, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 239, 128, 127, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "Λ", args: [] }, [I32(358)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 100, 92, 102, 100, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 241, 128, 128, 35, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 144, 144, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "Ɒ", args: [] }, [I32(359)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 239, 128, 192, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 101, 92, 48, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ª", args: [] }, [I32(360)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(0.000000000000000000000000000000000000011754944)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "∀", args: [] }, [I32(361)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 239, 128, 253, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 101, 92, 55, 102, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 241, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 144, 144, 127]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "₳", args: [] }, [I32(362)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 101, 92, 56, 48, 92, 48, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 15, 1, 5, 241, 128, 128, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𐤀", args: [] }, [I32(363)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 241, 128, 35, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 144, 144, 192]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 101, 92, 56, 48, 92, 55, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "Ⲁ", args: [] }, [I32(364)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 241, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 4, 116, 101, 115, 116, 1, 241, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 240, 144, 144, 253]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 101, 92, 56, 48, 92, 99, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.division_by_small_number", args: [F32(112000000.0), F32(100000.0), F32(0.0009)] }, [F32(888888.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "𐌰", args: [] }, [I32(365)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 241, 128, 128, 35, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 241, 35, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "Ά", args: [] }, [I32(366)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 241, 128, 128, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(-0.5)] }, [F32(-inf)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 101, 92, 56, 48, 92, 102, 100, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "Α", args: [] }, [I32(367)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 0, 144, 144, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 241, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(0.5)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.division_by_small_number", args: [F64(112000000.0), F64(100000.0), F64(0.0009)] }, [F64(888888.8888888806)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 241, 128, 128, 127]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 101, 92, 99, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "Ἀ", args: [] }, [I32(368)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 127, 144, 144, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "Ἁ", args: [] }, [I32(369)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 241, 128, 128, 192]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 101, 92, 102, 100, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 241, 128, 35, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 128, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 241, 128, 128, 253]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 128, 144, 144, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "Ἂ", args: [] }, [I32(370)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 1, 241, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 102, 92, 48, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(-1.0)] }, [F32(-inf)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 243, 128, 128, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 143, 144, 144, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "Ἃ", args: [] }, [I32(371)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 102, 92, 55, 102, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 241, 35, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "Ἄ", args: [] }, [I32(372)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 243, 128, 128, 127]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 143, 191, 191, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(1.0)] }, [F32(-inf)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 0, 144, 144, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "Ἅ", args: [] }, [I32(373)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 102, 92, 56, 48, 92, 48, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 192, 144, 144, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f32.golden_ratio", args: [F32(0.5), F32(1.0), F32(5.0)] }, [F32(1.618034)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 243, 128, 128, 192]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "Ἆ", args: [] }, [I32(374)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 102, 92, 56, 48, 92, 55, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 127, 144, 144, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "Ἇ", args: [] }, [I32(375)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 243, 128, 128, 253]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.golden_ratio", args: [F64(0.5), F64(1.0), F64(5.0)] }, [F64(1.618033988749895)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(1.0)] }, [F32(1.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 253, 144, 144, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 244, 128, 128, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ᾈ", args: [] }, [I32(376)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 128, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 102, 92, 56, 48, 92, 99, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ᾉ", args: [] }, [I32(377)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(-6.2831855)] }, [F32(-inf)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 244, 128, 128, 127]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 128, 144, 144, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(-inf)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 102, 92, 56, 48, 92, 102, 100, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ᾊ", args: [] }, [I32(378)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 241, 0, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 244, 128, 128, 192]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ᾋ", args: [] }, [I32(379)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 143, 144, 144, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 102, 92, 99, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ᾌ", args: [] }, [I32(380)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 244, 128, 128, 253]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(6.2831855)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(inf)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 241, 127, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 7, 6, 248, 128, 128, 128, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ᾍ", args: [] }, [I32(381)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 143, 191, 191, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 101, 102, 92, 102, 100, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ᾎ", args: [] }, [I32(382)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 241, 192, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 48, 48, 92, 57, 48, 92, 57, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 192, 144, 144, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 248, 128, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ᾏ", args: [] }, [I32(383)])
run assertion Return(Invoke { mod_ref: None, func: "f32.silver_means", args: [F32(0.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 55, 102, 92, 57, 48, 92, 57, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 6, 5, 248, 128, 128, 128, 35]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "Ᾰ", args: [] }, [I32(384)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 56, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 253, 144, 144, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(-340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 241, 253, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 248, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "Ᾱ", args: [] }, [I32(385)])
run assertion Return(Invoke { mod_ref: None, func: "f32.silver_means", args: [F32(1.0)] }, [F32(1.618034)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 56, 48, 92, 57, 48, 92, 57, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "Ὰ", args: [] }, [I32(386)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(340282350000000000000000000000000000000.0)] }, [F32(-inf)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 241, 0, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 243, 0, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 248, 128, 128, 35]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 56, 102, 92, 57, 48, 92, 57, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "Ά", args: [] }, [I32(387)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 241, 127, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.silver_means", args: [F32(2.0)] }, [F32(2.4142137)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 248, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 56, 102, 92, 98, 102, 92, 98, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 241, 192, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ᾼ", args: [] }, [I32(388)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(inf)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 243, 127, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f32.silver_means", args: [F32(3.0)] }, [F32(3.3027756)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 248, 128, 35]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 57, 48, 92, 48, 48, 92, 57, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𝚨", args: [] }, [I32(389)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 241, 253, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "f32.silver_means", args: [F32(4.0)] }, [F32(4.236068)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 2, 1, 248]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "𝛢", args: [] }, [I32(390)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 248, 35]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𝜜", args: [] }, [I32(391)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 243, 0, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(-inf)] }, [F32(-inf)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 57, 48, 92, 55, 102, 92, 57, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 243, 192, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f32.silver_means", args: [F32(5.0)] }, [F32(5.192582)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 243, 127, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 6, 5, 248, 128, 128, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "f64.silver_means", args: [F64(0.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "𝝖", args: [] }, [I32(392)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 243, 253, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "𝞐", args: [] }, [I32(393)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 243, 192, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 6, 5, 251, 191, 191, 191, 191]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "⍶", args: [] }, [I32(394)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 57, 48, 92, 57, 48, 92, 48, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "⍺", args: [] }, [I32(395)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(NaN)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 57, 48, 92, 57, 48, 92, 55, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "f64.silver_means", args: [F64(1.0)] }, [F64(1.618033988749895)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 243, 253, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 8, 7, 252, 128, 128, 128, 128, 128, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 244, 0, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "⩜", args: [] }, [I32(396)])
run assertion Return(Invoke { mod_ref: None, func: "f64.silver_means", args: [F64(2.0)] }, [F64(2.414213562373095)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 244, 127, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 6, 5, 252, 128, 128, 128, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 244, 0, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 244, 144, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.silver_means", args: [F64(3.0)] }, [F64(3.302775637731995)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 7, 6, 252, 128, 128, 128, 128, 35]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 244, 127, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "sub", args}, [F64(0.0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 252, 128, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(-0.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(-inf), F32(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 244, 191, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ᗅ", args: [] }, [I32(397)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 57, 48, 92, 57, 48, 92, 99, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 244, 144, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.silver_means", args: [F64(4.0)] }, [F64(4.23606797749979)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 6, 5, 252, 128, 128, 128, 35]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 244, 191, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "Ꭺ", args: [] }, [I32(398)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 244, 192, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.silver_means", args: [F64(5.0)] }, [F64(5.192582403567252)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 57, 48, 92, 57, 48, 92, 102, 100, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 252, 128, 128]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(0.0)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 244, 253, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 244, 192, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 57, 48, 92, 99, 48, 92, 57, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 245, 128, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: ")˺˼𔗏\u{1d174}\u{1d176}\u{1d178}\u{1d17a}⁾₎❩❫⟯﴿︶﹚）｠\u{e0029}❳❵⟧⟩⟫⟭⦈⦊⦖⸣⸥︘︸︺︼︾﹀﹂﹄﹈﹜﹞］｝｣\u{e005d}\u{e007d}»’”›❯", args: [] }, [I32(399)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 252, 128, 128, 35]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 244, 253, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 57, 48, 92, 102, 100, 92, 57, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 247, 128, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 252, 128]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 245, 128, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 99, 48, 92, 57, 48, 92, 57, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [F64(inf)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 247, 191, 191, 191, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "(˹˻𔗎\u{1d173}\u{1d175}\u{1d177}\u{1d179}⁽₍❨❪⟮﴾︵﹙（｟\u{e0028}❲❴⟦⟨⟪⟬⦇⦉⦕⸢⸤︗︷︹︻︽︿﹁﹃﹇﹛﹝［｛｢\u{e005b}\u{e007b}«‘“‹❮", args: [] }, [I32(400)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 4, 3, 252, 128, 35]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 48, 92, 102, 100, 92, 57, 48, 92, 57, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "point_four", args: [F64(4.0), F64(10.0)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 2, 1, 252]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 144, 0, 144, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𝪋\u{1daa4}", args: [] }, [I32(401)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 48, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 247, 128, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 252, 35]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "𝪋", args: [] }, [I32(402)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 144, 127, 144, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 50, 51, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 7, 6, 252, 128, 128, 128, 128, 128]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "½", args: [] }, [I32(403)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 144, 192, 144, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 55, 102, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 247, 191, 191, 191, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 7, 6, 253, 191, 191, 191, 191, 191]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 56, 48, 92, 48, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "1⁄2", args: [] }, [I32(404)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(inf), F32(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 144, 0, 144, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 144, 253, 144, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 56, 48, 92, 50, 51, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 2, 1, 254]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 144, 127, 144, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 56, 48, 92, 55, 102, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 241, 128, 0, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "1/2", args: [] }, [I32(405)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 2, 1, 255]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 56, 48, 92, 56, 48, 92, 48, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 241, 128, 127, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "୳", args: [] }, [I32(406)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 56, 48, 92, 56, 48, 92, 50, 51, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.0)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 254, 255]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "tau", args: [I32(10)] }, [F64(6.283185307179583)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 144, 192, 144, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "൴", args: [] }, [I32(407)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.0)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 56, 48, 92, 56, 48, 92, 55, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 241, 128, 192, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 0, 0, 254, 255]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "⳽", args: [] }, [I32(408)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 144, 253, 144, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "꠱", args: [] }, [I32(409)])
run assertion Return(Invoke { mod_ref: None, func: "tau", args: [I32(11)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.5)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 56, 48, 92, 56, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.0)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 241, 128, 253, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𐅁", args: [] }, [I32(410)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 241, 128, 0, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 3, 2, 255, 254]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 56, 48, 92, 56, 48, 92, 99, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(0.5)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 0, 5, 4, 255, 254, 0, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𐅵", args: [] }, [I32(411)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 243, 128, 0, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 241, 128, 127, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
test run_utf8_custom_section_id ... run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "𐅶", args: [] }, [I32(412)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 243, 128, 127, 128, 3, 127, 0]), "invalid UTF-8 encoding")
ok
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 241, 128, 192, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "𐦽", args: [] }, [I32(413)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(0.5)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 243, 128, 192, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 56, 48, 92, 56, 48, 92, 102, 100, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𐹻", args: [] }, [I32(414)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 241, 128, 253, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.0)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 56, 48, 92, 99, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(-1.0)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 243, 128, 253, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "＂", args: [] }, [I32(415)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 243, 128, 0, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "\u{7f}", args: [] }, [I32(416)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 244, 128, 0, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 56, 48, 92, 102, 100, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f32.no_fold_conditional_inc", args: [F32(-0.0), F32(-1.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(1.0)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 99, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 243, 128, 127, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{8}", args: [] }, [I32(417)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 244, 128, 127, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "⌫", args: [] }, [I32(418)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 243, 128, 192, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "⌦", args: [] }, [I32(419)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 244, 128, 192, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "f64.no_fold_conditional_inc", args: [F64(-0.0), F64(-1.0)] }, [F64(-0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args}, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 244, 128, 253, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 49, 92, 102, 100, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "␈", args: [] }, [I32(420)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(1.0)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 51, 92, 48, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 144, 144, 0, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 51, 92, 55, 102, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "␡", args: [] }, [I32(421)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 51, 92, 56, 48, 92, 48, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 243, 128, 253, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "\u{1dfb}", args: [] }, [I32(422)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 144, 144, 127, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 51, 92, 56, 48, 92, 55, 102, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(6.2831855)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 244, 128, 0, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "\u{f}", args: [] }, [I32(423)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 51, 92, 56, 48, 92, 56, 48, 92, 48, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 144, 144, 192, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "←", args: [] }, [I32(424)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 51, 92, 56, 48, 92, 56, 48, 92, 55, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 244, 128, 127, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 240, 144, 144, 253, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "⌧", args: [] }, [I32(425)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "⍒", args: [] }, [I32(426)])
test run_float_exprs ... ok
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 244, 128, 192, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 241, 128, 128, 0, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 51, 92, 56, 48, 92, 56, 48, 92, 99, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "⍔", args: [] }, [I32(427)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 241, 128, 128, 127, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 244, 128, 253, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(6.2831855)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 51, 92, 56, 48, 92, 56, 48, 92, 102, 100, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "⍢", args: [] }, [I32(428)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 241, 128, 128, 192, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 51, 92, 56, 48, 92, 99, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 144, 144, 0, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "⍫", args: [] }, [I32(429)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 241, 128, 128, 253, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "\u{1a}", args: [] }, [I32(430)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 51, 92, 56, 48, 92, 102, 100, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 243, 128, 128, 0, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 144, 144, 127, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "␦", args: [] }, [I32(431)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 243, 128, 128, 127, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 51, 92, 99, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 144, 144, 192, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "␚", args: [] }, [I32(432)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 51, 92, 102, 100, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args}, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 243, 128, 128, 192, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "￼", args: [] }, [I32(433)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 240, 144, 144, 253, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 52, 92, 48, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "?", args: [] }, [I32(434)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 243, 128, 128, 253, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 241, 128, 128, 0, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 52, 92, 55, 102, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "¿", args: [] }, [I32(435)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 244, 128, 128, 0, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 52, 92, 56, 48, 92, 48, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 241, 128, 128, 127, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "᥅", args: [] }, [I32(436)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 244, 128, 128, 127, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 52, 92, 56, 48, 92, 55, 102, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 241, 128, 128, 192, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: ";", args: [] }, [I32(437)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(-inf)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 52, 92, 56, 48, 92, 56, 48, 92, 48, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 244, 128, 128, 192, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 241, 128, 128, 253, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "՞", args: [] }, [I32(438)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 52, 92, 56, 48, 92, 56, 48, 92, 55, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "؟", args: [] }, [I32(439)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(inf)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 244, 128, 128, 253, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 243, 128, 128, 0, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 52, 92, 56, 48, 92, 56, 48, 92, 99, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args}, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 16, 1, 4, 116, 101, 115, 116, 6, 248, 128, 128, 128, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 52, 92, 56, 48, 92, 56, 48, 92, 102, 100, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "፧", args: [] }, [I32(440)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 248, 128, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "⁇", args: [] }, [I32(441)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 52, 92, 56, 48, 92, 99, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 15, 1, 4, 116, 101, 115, 116, 5, 248, 128, 128, 128, 35, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 243, 128, 128, 127, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "⍰", args: [] }, [I32(442)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 52, 92, 56, 48, 92, 102, 100, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(inf)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 248, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "❓", args: [] }, [I32(443)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 243, 128, 128, 192, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 52, 92, 57, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "❔", args: [] }, [I32(444)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 248, 128, 128, 35, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 52, 92, 98, 102, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 243, 128, 128, 253, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 248, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 52, 92, 99, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "⳺", args: [] }, [I32(445)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.5)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 244, 128, 128, 0, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 248, 128, 35, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "⳻", args: [] }, [I32(446)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args}, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 4, 116, 101, 115, 116, 1, 248, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.5)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 244, 128, 128, 127, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 52, 92, 102, 100, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 248, 35, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "⸮", args: [] }, [I32(447)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.5)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 244, 128, 128, 192, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 53, 92, 56, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 15, 1, 4, 116, 101, 115, 116, 5, 248, 128, 128, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "㉄", args: [] }, [I32(448)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 55, 92, 56, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 244, 128, 128, 253, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-0.5)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 15, 1, 4, 116, 101, 115, 116, 5, 251, 191, 191, 191, 191, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "꘏", args: [] }, [I32(449)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 16, 1, 6, 248, 128, 128, 128, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 55, 92, 98, 102, 92, 98, 102, 92, 98, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "꛷", args: [] }, [I32(450)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 17, 1, 4, 116, 101, 115, 116, 7, 252, 128, 128, 128, 128, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 56, 92, 50, 51, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 248, 128, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "︖", args: [] }, [I32(451)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(0.5)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 15, 1, 4, 116, 101, 115, 116, 5, 252, 128, 128, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 56, 92, 56, 48, 92, 50, 51, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "﹖", args: [] }, [I32(452)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 16, 1, 4, 116, 101, 115, 116, 6, 252, 128, 128, 128, 128, 35, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-1.0)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 56, 92, 56, 48, 92, 56, 48, 92, 50, 51, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 15, 1, 5, 248, 128, 128, 128, 35, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 252, 128, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "？", args: [] }, [I32(453)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 56, 92, 56, 48, 92, 56, 48, 92, 56, 48, 92, 50, 51, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args}, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 15, 1, 4, 116, 101, 115, 116, 5, 252, 128, 128, 128, 35, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "𑅃", args: [] }, [I32(454)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-1.0)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 248, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 56, 92, 56, 48, 92, 56, 48, 92, 56, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 252, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𞥟", args: [] }, [I32(455)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(1.0)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 56, 92, 56, 48, 92, 56, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 252, 128, 128, 35, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 248, 128, 128, 35, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "\u{e003f}", args: [] }, [I32(456)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(1.0)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 252, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 56, 92, 56, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 248, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 4, 116, 101, 115, 116, 3, 252, 128, 35, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "𖡄", args: [] }, [I32(457)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 56, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-1.0)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 248, 128, 35, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "⯑", args: [] }, [I32(458)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 4, 116, 101, 115, 116, 1, 252, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 56, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "¶", args: [] }, [I32(459)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 1, 248, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "⁋", args: [] }, [I32(460)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 252, 35, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 56, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 248, 35, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "܀", args: [] }, [I32(461)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(1.0)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 16, 1, 4, 116, 101, 115, 116, 6, 252, 128, 128, 128, 128, 128, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 98, 92, 98, 102, 92, 98, 102, 92, 98, 102, 92, 98, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 15, 1, 5, 248, 128, 128, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "჻", args: [] }, [I32(462)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(-0.0)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 16, 1, 4, 116, 101, 115, 116, 6, 253, 191, 191, 191, 191, 191, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 99, 92, 50, 51, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "፨", args: [] }, [I32(463)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 4, 116, 101, 115, 116, 1, 254, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(0.0)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 15, 1, 5, 251, 191, 191, 191, 191, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "〷", args: [] }, [I32(464)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 99, 92, 56, 48, 92, 50, 51, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "❡", args: [] }, [I32(465)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 4, 116, 101, 115, 116, 1, 255, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 99, 92, 56, 48, 92, 56, 48, 92, 50, 51, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 99, 92, 56, 48, 92, 56, 48, 92, 56, 48, 92, 50, 51, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "⸏", args: [] }, [I32(466)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 17, 1, 7, 252, 128, 128, 128, 128, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(6.2831855)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 254, 255, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 99, 92, 56, 48, 92, 56, 48, 92, 56, 48, 92, 56, 48, 92, 50, 51, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "⸐", args: [] }, [I32(467)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 0, 0, 254, 255, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 99, 92, 56, 48, 92, 56, 48, 92, 56, 48, 92, 56, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 15, 1, 5, 252, 128, 128, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(6.2831855)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 4, 116, 101, 115, 116, 2, 255, 254, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 99, 92, 56, 48, 92, 56, 48, 92, 56, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args}, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 116, 101, 115, 116, 4, 255, 254, 0, 0, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "⸑", args: [] }, [I32(468)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 16, 1, 6, 252, 128, 128, 128, 128, 35, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 99, 92, 56, 48, 92, 56, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-6.2831855)] })
test run_utf8_import_module ... ok
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "⸎", args: [] }, [I32(469)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 99, 92, 56, 48, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 252, 128, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "\u{14}", args: [] }, [I32(470)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 99, 92, 56, 48, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "☙", args: [] }, [I32(471)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 15, 1, 5, 252, 128, 128, 128, 35, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(6.2831855)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 99, 92, 56, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "⸿", args: [] }, [I32(472)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 252, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 99, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "〇", args: [] }, [I32(473)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 100, 92, 98, 102, 92, 98, 102, 92, 98, 102, 92, 98, 102, 92, 98, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 252, 128, 128, 35, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 101, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "๛", args: [] }, [I32(474)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 101, 92, 102, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 252, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ꙮ", args: [] }, [I32(475)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 102, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 13, 1, 3, 252, 128, 35, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ϓ", args: [] }, [I32(476)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 102, 92, 102, 101, 92, 48, 48, 92, 48, 48, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(-0.5)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 1, 252, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "ϔ", args: [] }, [I32(477)])
run assertion Malformed(Quoted(None, [40, 102, 117, 110, 99, 32, 40, 101, 120, 112, 111, 114, 116, 32, 34, 92, 102, 102, 92, 102, 101, 34, 41, 41]), "invalid UTF-8 encoding")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ẛ", args: [] }, [I32(478)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 252, 35, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
test run_utf8_invalid_encoding ... ok
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(-0.5)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 16, 1, 6, 252, 128, 128, 128, 128, 128, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 16, 1, 6, 253, 191, 191, 191, 191, 191, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(-1.0)] }, [I32(0)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 1, 254, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(-0.0)] }, [F64(-inf)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 11, 1, 1, 255, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(1.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(0.0)] }, [F64(-inf)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 254, 255, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(-1.0)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 0, 0, 254, 255, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(-0.0)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(1.0)] }, [I32(1)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 12, 1, 2, 255, 254, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(0.0)] }, [F64(inf)])
run assertion Malformed(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 2, 14, 1, 4, 255, 254, 0, 0, 4, 116, 101, 115, 116, 3, 127, 0]), "invalid UTF-8 encoding")
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
test run_utf8_import_field ... ok
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "print32", args: [I32(42), I32(123)] }, [])
I32(42)
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-inf)] })
I32(123)
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(-6.2831855)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(6.2831855)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
test run_names ... ok
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(-inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(-inf)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(-0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(-0.5)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(0.5)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(-0.5)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(0.5)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(-1.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(1.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(-1.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(1.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(-6.283185307179586)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(6.283185307179586)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(-0.5)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(-6.283185307179586)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(6.283185307179586)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(-0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(-1.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(-1.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(-6.2831855)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(-6.2831855)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(-inf)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(-inf)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.0), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(0.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args}, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(-inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-inf)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(-inf)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(6.2831855)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(-inf)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.5)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args}, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-1.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(-0.5)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(0.5)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(-1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(1.0)] }, [F32(1.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-inf)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(-inf)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000000000001), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(-0.0)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(0.0)] }, [F32(0.5)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(0.5)] }, [F32(0.5)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(-0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(-1.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(-1.0)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(-6.2831855)] }, [F32(-0.5)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(6.2831855)] }, [F32(6.2831855)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(-6.2831855)] }, [F32(0.5)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(-340282350000000000000000000000000000000.0)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(-inf)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(-340282350000000000000000000000000000000.0)] }, [F32(0.5)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(-inf)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(-inf)] }, [F32(-0.5)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(inf)] }, [F32(inf)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(-inf)] }, [F32(0.5)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(inf)] }, [F32(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-0.5), F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.000000000000000000000000000000000000011754944), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sub", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(-0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(0.5), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(-0.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(0.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "fib-f64", args: [F64(0.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "fib-f64", args: [F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "fib-f64", args: [F64(2.0)] }, [F64(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "fib-f64", args: [F64(5.0)] }, [F64(8.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "fib-f64", args: [F64(20.0)] }, [F64(10946.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(-0.5)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(0.5)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(-1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(-6.2831855)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(-6.2831855)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(-0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(0.5)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(-0.5)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(-inf)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(-1.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(1.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(-inf)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(0.5), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(-1.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(1.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(-6.283185307179586)] }, [F64(0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(6.283185307179586)] }, [F64(-0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(-6.283185307179586)] }, [F64(-0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(6.283185307179586)] }, [F64(0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(1.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(-0.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(0.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(-0.5)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(0.5)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(-1.0)] }, [F32(6.2831855)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-1.0), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(1.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(1.0), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(6.2831855)] }, [F32(6.2831855)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(-6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(-0.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(6.2831855)] }, [F32(6.2831855)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(-inf)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(-inf)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(-1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(-1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(-6.283185307179586)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(6.283185307179586)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(-6.283185307179586)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(6.283185307179586)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(6.2831855), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args}, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(-0.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(0.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args}, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args}, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(6.2831855), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args}, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(-0.5)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(0.5)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(-1.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(1.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args}, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(6.2831855)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args}, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(-inf)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(-inf)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [F64(0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(-inf)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(-0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(0.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(-0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(0.000000000000000000000000000000000000000000001)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(340282350000000000000000000000000000000.0), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.000000000000000000000000000000000000011754944)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(-0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(0.000000000000000000000000000000000000011754944)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(-0.5)] }, [F32(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(0.5)] }, [F32(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(0.000000000000000000000000000000000000000000001)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(-0.5)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(0.5)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(-1.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(0.000000000000000000000000000000000000011754944)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(1.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(-6.2831855)] }, [F32(-6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(6.2831855)] }, [F32(6.2831855)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(-6.2831855)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(6.2831855)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(-6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(-6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(-340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(6.2831855)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(340282350000000000000000000000000000000.0)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(-inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(-340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(340282350000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(-inf)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(-inf)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(-inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(inf)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(-inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(inf), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(-inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(inf)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(-inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(inf)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(inf), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0000000000000008881784197001251)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0000000000000008881784197001251)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.000000000000000000000000000000000000000000001)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0000000000000008881784197001251)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.000000000000000000000000000000000000011754944)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args}, [F64(0.0000000000000008881784197001251)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-6.2831855)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(1.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(6.2831855)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(-6.283185307179586)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(6.283185307179586)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(-6.283185307179586)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(340282350000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(-inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F32(NaN), F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F32(NaN), F32(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F32(-0.000000000000000000000000000000000000000000001)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 91, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.00000000000000000000003743392)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F32(-0.000000000000000000000000000000000000011754944)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 96, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.00000000000000000010842022)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(inf)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F32(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [F64(-0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 94, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F32(0.5)] }, [F32(0.70710677)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F32(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F32(1.0)] }, [F32(1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 95, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [F64(-0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F32(-6.2831855)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F32(6.2831855)] }, [F32(2.5066283)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 93, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F32(-340282350000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 92, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F32(340282350000000000000000000000000000000.0)] }, [F32(18446743000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F32(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F32(inf)] }, [F32(inf)])
test run_f32_cmp ... ok
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sqrt", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sqrt", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(-0.5)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(-6.2831855)] }, [F32(-7.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(6.2831855)] }, [F32(6.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F32(inf)] }, [F32(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "floor", args: [F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "floor", args: [F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "floor", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args}, [F64(0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "floor", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(0.000000000000000000000000000000000000000000001)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(0.000000000000000000000000000000000000011754944)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(-0.5)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(0.5)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(-6.2831855)] }, [F32(-6.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(6.2831855)] }, [F32(7.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F32(inf)] }, [F32(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "ceil", args: [F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "ceil", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "ceil", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "ceil", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args}, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(-0.5)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(-6.2831855)] }, [F32(-6.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(6.2831855)] }, [F32(6.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F32(inf)] }, [F32(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "trunc", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "trunc", args: [F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "trunc", args: [F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "trunc", args: [F32(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(-0.0)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(0.0)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(-0.000000000000000000000000000000000000000000001)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(0.000000000000000000000000000000000000000000001)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(-0.000000000000000000000000000000000000011754944)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(0.000000000000000000000000000000000000011754944)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(-0.5)] }, [F32(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(0.5)] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(-1.0)] }, [F32(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(1.0)] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(-6.2831855)] }, [F32(-6.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(6.2831855)] }, [F32(6.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(-340282350000000000000000000000000000000.0)] }, [F32(-340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(340282350000000000000000000000000000000.0)] }, [F32(340282350000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(-inf)] }, [F32(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F32(inf)] }, [F32(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "nearest", args: [F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "nearest", args: [F32(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "nearest", args: [F32(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "nearest", args: [F32(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 146, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 149, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 151, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 150, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 148, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 66, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 147, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 141, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 142, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 144, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 145, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 125, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 143, 11]), "type mismatch")
test run_f32 ... ok
run assertion Return(Invoke { mod_ref: None, func: "lt", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(3.9999999999999996)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-3.9999999999999996)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-3.9999999999999996)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args}, [F64(3.9999999999999996)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(-0.5)] }, [F64(0.25)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(0.5)] }, [F64(-0.25)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(-0.5)] }, [F64(-0.25)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(0.5)] }, [F64(0.25)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(-1.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(1.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(-1.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(1.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(-6.283185307179586)] }, [F64(3.141592653589793)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(6.283185307179586)] }, [F64(-3.141592653589793)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(-6.283185307179586)] }, [F64(-3.141592653589793)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(6.283185307179586)] }, [F64(3.141592653589793)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "type-mixed", args: [I64(1), F32(2.2), F64(3.3), I32(4), I32(5)] }, [])
run assertion Return(Invoke { mod_ref: None, func: "write", args: [I64(1), F32(2.0), F64(3.3), I32(4), I32(5)] }, [I64(56)])
run assertion Return(Invoke { mod_ref: None, func: "result", args: [I64(18446744073709551615), F32(-2.0), F64(-3.3), I32(4294967292), I32(4294967291)] }, [F64(34.8)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 1, 1, 127, 65, 0, 34, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 1, 1, 125, 67, 0, 0, 0, 0, 34, 0, 69, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 2, 1, 124, 1, 126, 66, 0, 34, 1, 154, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 1, 1, 127, 1, 34, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 1, 1, 127, 67, 0, 0, 0, 0, 34, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 1, 1, 125, 68, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 151, 128, 128, 128, 0, 1, 145, 128, 128, 128, 0, 2, 1, 124, 1, 126, 68, 0, 0, 0, 0, 0, 0, 0, 0, 34, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(inf)] }, [F64(-inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 1, 127, 1, 126, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(inf)] }, [F64(inf)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 125, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 32, 0, 69, 11]), "type mismatch")
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 124, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 32, 1, 154, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 1, 34, 0, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-0.5), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 34, 0, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 125, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 11]), "type mismatch")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(-0.0)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 124, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 34, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 34, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(0.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 2, 64, 34, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(0.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 3, 64, 34, 0, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 34, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 149, 128, 128, 128, 0, 1, 143, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 127, 65, 0, 5, 34, 0, 11, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 2, 64, 34, 0, 12, 0, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 148, 128, 128, 128, 0, 1, 142, 128, 128, 128, 0, 0, 65, 0, 2, 64, 34, 0, 65, 1, 13, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 147, 128, 128, 128, 0, 1, 141, 128, 128, 128, 0, 0, 65, 0, 2, 64, 34, 0, 14, 0, 0, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 140, 128, 128, 128, 0, 1, 134, 128, 128, 128, 0, 0, 34, 0, 15, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 34, 0, 65, 1, 65, 2, 27, 26, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 138, 128, 128, 128, 0, 2, 96, 1, 127, 0, 96, 1, 127, 1, 127, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 150, 128, 128, 128, 0, 2, 135, 128, 128, 128, 0, 0, 34, 0, 16, 1, 26, 11, 132, 128, 128, 128, 0, 0, 32, 0, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 138, 128, 128, 128, 0, 2, 96, 1, 127, 1, 127, 96, 1, 127, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 156, 128, 128, 128, 0, 2, 132, 128, 128, 128, 0, 0, 32, 0, 11, 141, 128, 128, 128, 0, 0, 2, 127, 34, 0, 65, 0, 17, 0, 0, 26, 11, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 34, 0, 33, 0, 32, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 34, 0, 34, 0, 26, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 6, 134, 128, 128, 128, 0, 1, 127, 1, 65, 0, 11, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 34, 0, 36, 0, 35, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 34, 0, 64, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 34, 0, 40, 2, 0, 26, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 34, 0, 65, 1, 54, 2, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 3, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 247, 164, 234, 6, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(-0.5)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 127, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 32, 2, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(-0.5)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 247, 242, 206, 212, 2, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(-1.0)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 3, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(-1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 2, 1, 127, 1, 126, 32, 247, 168, 153, 102, 11]), "unknown local")
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(1.0)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 125, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 1, 1, 127, 67, 0, 0, 0, 0, 34, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(6.283185307179586)] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 134, 128, 128, 128, 0, 1, 96, 2, 126, 127, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 1, 1, 125, 67, 0, 0, 0, 0, 34, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(-6.283185307179586)] }, [I32(0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 1, 126, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 2, 1, 124, 1, 126, 66, 0, 34, 1, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
test run_local_tee ... ok
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(-0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(-1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(-6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-1.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(-0.5)] }, [F64(3.141592653589793)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(0.5)] }, [F64(-3.141592653589793)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(-0.5)] }, [F64(-3.141592653589793)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(0.5)] }, [F64(3.141592653589793)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(-1.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(1.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(-1.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(1.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(-6.283185307179586)] }, [F64(39.47841760435743)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(6.283185307179586)] }, [F64(-39.47841760435743)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(-6.283185307179586)] }, [F64(-39.47841760435743)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(6.283185307179586)] }, [F64(39.47841760435743)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "lt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0000000000000008881784197001251)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0000000000000008881784197001251)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0000000000000008881784197001251)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args}, [F64(0.0000000000000008881784197001251)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(3.9999999999999996)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-3.9999999999999996)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-3.9999999999999996)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args}, [F64(3.9999999999999996)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [F64(89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [F64(-89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [F64(-89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [F64(89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args}, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(-0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(-0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(-0.5)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(0.5)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(-0.5)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(0.5)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(-1.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(1.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(-1.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(1.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(-6.283185307179586)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(6.283185307179586)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(-6.283185307179586)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(6.283185307179586)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(-inf), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(inf), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "even", args: [I32(0)] }, [I32(44)])
run assertion Return(Invoke { mod_ref: None, func: "even", args: [I32(1)] }, [I32(99)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "even", args: [I32(100)] }, [I32(44)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "even", args: [I32(77)] }, [I32(99)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "odd", args: [I32(0)] }, [I32(99)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "odd", args: [I32(1)] }, [I32(44)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "odd", args: [I32(200)] }, [I32(99)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.5)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.5)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-0.5)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.5)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-1.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-1.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(1.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(1.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-1.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-1.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(1.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(6.283185307179586)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(6.283185307179586)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "odd", args: [I32(77)] }, [I32(44)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Exhaustion(Invoke { mod_ref: None, func: "runaway", args: [] }, "call stack exhausted")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Exhaustion(Invoke { mod_ref: None, func: "mutual-runaway", args: [] }, "call stack exhausted")
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [] }, [I32(306)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-mid", args: [] }, [I32(2)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "as-select-last", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-condition", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-first", args: [] }, [I64(356)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-last", args: [] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-first", args: [] }, [F32(3890.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-last", args: [] }, [I32(2)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "as-store-first", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-last", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-value", args: [] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(-inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "mul", args: [F64(NaN), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(-0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(-0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(-0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(0.5)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(-0.5)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(-1.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(1.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(-1.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(1.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(-6.283185307179586)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(6.283185307179586)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(-6.283185307179586)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(6.283185307179586)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(-inf)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(-inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(inf)] }, [F64(0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args}, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args}, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args}, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args}, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args}, [F64(0.0000000000000002220446049250313)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args}, [F64(-0.0000000000000002220446049250313)])
run assertion Return(Invoke { mod_ref: None, func: "div", args}, [F64(-0.0000000000000002220446049250313)])
run assertion Return(Invoke { mod_ref: None, func: "div", args}, [F64(0.0000000000000002220446049250313)])
run assertion Return(Invoke { mod_ref: None, func: "le", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args}, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(-0.5)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(-0.5)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(1.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(6.283185307179586)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(4503599627370496.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-4503599627370496.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-4503599627370496.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args}, [F64(4503599627370496.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args}, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [F64(-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003541315033259774)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003541315033259774)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003541315033259774)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003541315033259774)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args}, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(-inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(inf)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(-0.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(-0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(-0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(-0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(22471164185778950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-22471164185778950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-22471164185778950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(22471164185778950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(-0.5)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(0.5)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(-0.5)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(0.5)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(-1.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(1.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(-1.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(1.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(-6.283185307179586)] }, [F64(0.07957747154594767)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(6.283185307179586)] }, [F64(-0.07957747154594767)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(-6.283185307179586)] }, [F64(-0.07957747154594767)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(6.283185307179586)] }, [F64(0.07957747154594767)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002781342323134)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002781342323134)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002781342323134)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002781342323134)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(-inf)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(-inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(inf)] }, [F64(0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-0.5), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(-0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(-0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(44942328371557900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-44942328371557900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-44942328371557900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(44942328371557900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(-0.5)] }, [F64(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(0.5)] }, [F64(-2.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(-0.5)] }, [F64(-2.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(0.5)] }, [F64(2.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(-1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(-6.283185307179586)] }, [F64(0.15915494309189535)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(6.283185307179586)] }, [F64(-0.15915494309189535)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(-6.283185307179586)] }, [F64(-0.15915494309189535)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(6.283185307179586)] }, [F64(0.15915494309189535)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005562684646268003)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005562684646268003)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005562684646268003)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005562684646268003)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(-inf)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(-inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(inf)] }, [F64(0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-1.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(-0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(-0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(-0.5)] }, [F64(12.566370614359172)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(0.5)] }, [F64(-12.566370614359172)])
run assertion Return(Invoke { mod_ref: None, func: "le", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(-0.5)] }, [F64(-12.566370614359172)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(0.5)] }, [F64(12.566370614359172)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(-1.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(1.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(-1.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(1.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(-6.283185307179586)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(6.283185307179586)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(-6.283185307179586)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(6.283185307179586)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000349513784379046)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000349513784379046)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000349513784379046)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000349513784379046)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(-inf)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(-inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(inf)] }, [F64(0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args}, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args}, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [F64(28611174857570280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [F64(-28611174857570280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [F64(-28611174857570280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [F64(28611174857570280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args}, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(-0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(-0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(-0.5)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(0.5)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(-0.5)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(0.5)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(-1.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(1.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(-1.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(1.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(-6.283185307179586)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(6.283185307179586)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(-6.283185307179586)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(6.283185307179586)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(-inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(-inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(-inf), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "le", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(-0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.5)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.5)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.5)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-0.5)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.5)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(0.5)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-1.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(1.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(1.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-1.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(1.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(6.283185307179586)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(-0.5)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(6.283185307179586)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(-inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(inf)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args}, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "div", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(0.5)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(1.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(1.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(6.283185307179586)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(6.283185307179586)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(inf)] }, [F64(0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args}, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args}, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args}, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args}, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args}, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(0.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(-0.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(0.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(1.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(1.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(6.283185307179586)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(6.283185307179586)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(inf)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(inf)] }, [F64(0.5)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-0.5), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(-0.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(0.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(-0.5)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(0.5)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(6.283185307179586)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(6.283185307179586)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(inf)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(inf)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "gt", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(-0.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(-0.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(0.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(-0.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(0.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(-0.5)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(0.5)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(-1.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(1.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(inf)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(inf)] }, [F64(6.283185307179586)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args}, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(0.5), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(1.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(6.283185307179586), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args}, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args}, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args}, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(-0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(0.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(-0.5)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(0.5)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(-0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(0.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(-1.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(1.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(-6.283185307179586)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(6.283185307179586)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(-0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(0.5)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(-1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(1.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(-6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(6.283185307179586)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(-inf), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(inf), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(-inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(-inf)] }, [I32(1)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(inf)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(-inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(inf), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.5)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.5)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.5)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.5)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-0.5)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(0.5)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-1.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(1.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(1.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-1.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(1.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(1.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(6.283185307179586)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(0.5)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(1.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-6.283185307179586)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(6.283185307179586)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(-inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "min", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(-0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(-inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(inf)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "ge", args: [F64(NaN), F64(NaN)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 97, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 102, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 100, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 101, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(-0.5)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(-0.5)] }, [F64(0.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 99, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(-1.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(1.0)] }, [F64(1.0)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 98, 11]), "type mismatch")
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(-1.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(-6.283185307179586)] }, [F64(-0.0)])
test run_f64_cmp ... ok
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(-6.283185307179586)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(-inf)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(-inf)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(0.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args}, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args}, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-0.5)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-6.283185307179586)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(-inf)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args}, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-0.5)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-1.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-6.283185307179586)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args}, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(-inf)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(-0.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(0.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(-0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(-1.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(-1.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(-6.283185307179586)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(-6.283185307179586)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(-inf)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(-inf)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-0.5), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(0.5), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(-0.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(0.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(-0.5)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(0.5)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(-1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(-6.283185307179586)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(-6.283185307179586)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(-inf)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(-inf)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-1.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(1.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(-0.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(0.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(-0.5)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(0.5)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(-1.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(1.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(-6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(-inf)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(-inf)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-6.283185307179586), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(6.283185307179586), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args}, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args}, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-0.5)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(0.5)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-1.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(1.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-6.283185307179586)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(6.283185307179586)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args}, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(-inf)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(-0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(0.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(-0.5)] }, [F64(-0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(0.5)] }, [F64(0.5)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(-0.5)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(0.5)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(-1.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(1.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(-6.283185307179586)] }, [F64(-6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(6.283185307179586)] }, [F64(6.283185307179586)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(-6.283185307179586)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(6.283185307179586)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(-inf)] }, [F64(inf)])
run assertion Return(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(-inf), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(inf), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.5)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.5)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.5)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.5)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.5)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-0.5)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.5)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(0.5)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-1.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-1.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(1.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(1.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-1.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-1.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(1.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(1.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(6.283185307179586)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(6.283185307179586)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-6.283185307179586)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(6.283185307179586)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(6.283185307179586)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(-inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(inf)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(inf)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "max", args: [F64(NaN), F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F64(0.0)] }, [F64(0.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] })
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022227587494850775)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] })
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014916681462400413)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F64(-0.5)] })
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F64(0.5)] }, [F64(0.7071067811865476)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F64(-1.0)] })
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F64(1.0)] }, [F64(1.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F64(-6.283185307179586)] })
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F64(6.283185307179586)] }, [F64(2.5066282746310002)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] })
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(13407807929942596000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F64(-inf)] })
run assertion Return(Invoke { mod_ref: None, func: "sqrt", args: [F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sqrt", args: [F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "sqrt", args: [F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "sqrt", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(-0.5)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(-6.283185307179586)] }, [F64(-7.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(6.283185307179586)] }, [F64(6.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "floor", args: [F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "floor", args: [F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "floor", args: [F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "floor", args: [F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "floor", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(-0.5)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(0.5)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(-6.283185307179586)] }, [F64(-6.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(6.283185307179586)] }, [F64(7.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "ceil", args: [F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "ceil", args: [F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "ceil", args: [F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "ceil", args: [F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "ceil", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(-0.5)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(-6.283185307179586)] }, [F64(-6.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(6.283185307179586)] }, [F64(6.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "trunc", args: [F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "trunc", args: [F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "trunc", args: [F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "trunc", args: [F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "trunc", args: [F64(NaN)] })
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(-0.0)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(0.0)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(-0.5)] }, [F64(-0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(0.5)] }, [F64(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(-1.0)] }, [F64(-1.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(1.0)] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(-6.283185307179586)] }, [F64(-6.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(6.283185307179586)] }, [F64(6.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)] }, [F64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(-inf)] }, [F64(-inf)])
run assertion Return(Invoke { mod_ref: None, func: "nearest", args: [F64(inf)] }, [F64(inf)])
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "nearest", args: [F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "nearest", args: [F64(NaN)] })
run assertion ReturnCanonicalNan(Invoke { mod_ref: None, func: "nearest", args: [F64(NaN)] })
run assertion ReturnArithmeticNan(Invoke { mod_ref: None, func: "nearest", args: [F64(NaN)] })
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 160, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 163, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 165, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 164, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 162, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 66, 0, 67, 0, 0, 0, 0, 161, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 155, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 156, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 158, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 159, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 124, 3, 130, 128, 128, 128, 0, 1, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 66, 0, 157, 11]), "type mismatch")
test run_f64 ... ok
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [] }, [I32(306)])
run assertion Return(Invoke { mod_ref: None, func: "as-drop-operand", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [] }, [I32(306)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [] }, [I32(306)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [] }, [I32(306)])
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [] }, [I32(306)])
run assertion Return(Invoke { mod_ref: None, func: "as-load-operand", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-left", args: [] }, [I32(11)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-right", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "as-test-operand", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-left", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-right", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-convert-operand", args: [] }, [I64(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 0, 10, 146, 128, 128, 128, 0, 2, 133, 128, 128, 128, 0, 0, 16, 1, 69, 11, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 136, 128, 128, 128, 0, 2, 96, 0, 0, 96, 0, 1, 126, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 148, 128, 128, 128, 0, 2, 133, 128, 128, 128, 0, 0, 16, 1, 69, 11, 132, 128, 128, 128, 0, 0, 66, 1, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 136, 128, 128, 128, 0, 2, 96, 0, 0, 96, 1, 127, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 145, 128, 128, 128, 0, 2, 132, 128, 128, 128, 0, 0, 16, 1, 11, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 0, 0, 96, 2, 124, 127, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 145, 128, 128, 128, 0, 2, 132, 128, 128, 128, 0, 0, 16, 1, 11, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 0, 10, 147, 128, 128, 128, 0, 2, 134, 128, 128, 128, 0, 0, 65, 1, 16, 1, 11, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 0, 10, 156, 128, 128, 128, 0, 2, 143, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 64, 65, 1, 16, 1, 11, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 0, 0, 96, 2, 127, 127, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 148, 128, 128, 128, 0, 2, 135, 128, 128, 128, 0, 0, 1, 65, 1, 16, 1, 11, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 0, 0, 96, 2, 127, 127, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 148, 128, 128, 128, 0, 2, 135, 128, 128, 128, 0, 0, 65, 1, 1, 16, 1, 11, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 0, 0, 96, 2, 127, 124, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 156, 128, 128, 128, 0, 2, 143, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 65, 1, 16, 1, 11, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 0, 0, 96, 2, 124, 127, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 156, 128, 128, 128, 0, 2, 143, 128, 128, 128, 0, 0, 65, 1, 68, 0, 0, 0, 0, 0, 0, 240, 63, 16, 1, 11, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 136, 128, 128, 128, 0, 2, 96, 0, 0, 96, 1, 127, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 148, 128, 128, 128, 0, 2, 135, 128, 128, 128, 0, 0, 2, 64, 16, 1, 11, 11, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 0, 0, 96, 2, 127, 127, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 150, 128, 128, 128, 0, 2, 137, 128, 128, 128, 0, 0, 2, 64, 65, 0, 16, 1, 11, 11, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 136, 128, 128, 128, 0, 2, 96, 0, 0, 96, 1, 127, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 148, 128, 128, 128, 0, 2, 135, 128, 128, 128, 0, 0, 3, 64, 16, 1, 11, 11, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 0, 0, 96, 2, 127, 127, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 150, 128, 128, 128, 0, 2, 137, 128, 128, 128, 0, 0, 3, 64, 65, 0, 16, 1, 11, 11, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 136, 128, 128, 128, 0, 2, 96, 0, 0, 96, 1, 127, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 150, 128, 128, 128, 0, 2, 137, 128, 128, 128, 0, 0, 65, 0, 4, 64, 16, 1, 11, 11, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 0, 0, 96, 2, 127, 127, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 10, 152, 128, 128, 128, 0, 2, 139, 128, 128, 128, 0, 0, 65, 0, 4, 64, 65, 0, 16, 1, 11, 11, 130, 128, 128, 128, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 16, 1, 11]), "unknown function")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 16, 148, 152, 219, 226, 3, 11]), "unknown function")
test run_call ... ok
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-drop-operand", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [] }, [F32(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [] }, [F64(1.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-load-operand", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [] }, [F32(0.0)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-left", args: [] }, [I32(11)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-right", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "as-test-operand", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-left", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-right", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-convert-operand", args: [] }, [I64(1)])
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41]), "unexpected token")
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41]), "unexpected token")
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41]), "unexpected token")
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41]), "unexpected token")
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41]), "unexpected token")
run assertion Malformed(Quoted(None, [40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41]), "unexpected token")
run assertion Malformed(Quoted(None, [40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 40, 102, 117, 110, 99, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 112, 97, 114, 97, 109, 32, 36, 120, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41]), "unexpected token")
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41]), "inline function type")
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41]), "inline function type")
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 40, 102, 117, 110, 99, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41]), "inline function type")
run assertion Malformed(Quoted(None, [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 102, 117, 110, 99, 114, 101, 102, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41]), "inline function type")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 17, 0, 0, 11]), "unknown table")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 17, 0, 0, 69, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 136, 128, 128, 128, 0, 2, 96, 0, 1, 126, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 1, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 0, 17, 0, 0, 69, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 136, 128, 128, 128, 0, 2, 96, 1, 127, 0, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 1, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 17, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 2, 124, 127, 0, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 1, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 17, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 1, 65, 0, 17, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 152, 128, 128, 128, 0, 1, 146, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 64, 65, 1, 65, 0, 17, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 136, 128, 128, 128, 0, 2, 96, 1, 127, 0, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 1, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 142, 128, 128, 128, 0, 1, 136, 128, 128, 128, 0, 0, 65, 1, 1, 17, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 136, 128, 128, 128, 0, 2, 96, 1, 127, 0, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 1, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 65, 0, 66, 1, 17, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 2, 127, 127, 0, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 1, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 1, 65, 1, 65, 0, 17, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 2, 127, 127, 0, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 1, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 1, 1, 65, 0, 17, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 2, 127, 124, 0, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 1, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 152, 128, 128, 128, 0, 1, 146, 128, 128, 128, 0, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 65, 1, 65, 0, 17, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 2, 124, 127, 0, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 1, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 152, 128, 128, 128, 0, 1, 146, 128, 128, 128, 0, 0, 65, 1, 68, 0, 0, 0, 0, 0, 0, 240, 63, 65, 0, 17, 0, 0, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 136, 128, 128, 128, 0, 2, 96, 1, 127, 0, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 151, 128, 128, 128, 0, 2, 130, 128, 128, 128, 0, 0, 11, 138, 128, 128, 128, 0, 0, 2, 64, 65, 0, 17, 0, 0, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 2, 127, 127, 0, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 153, 128, 128, 128, 0, 2, 130, 128, 128, 128, 0, 0, 11, 140, 128, 128, 128, 0, 0, 2, 64, 65, 0, 65, 0, 17, 0, 0, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 136, 128, 128, 128, 0, 2, 96, 1, 127, 0, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 151, 128, 128, 128, 0, 2, 130, 128, 128, 128, 0, 0, 11, 138, 128, 128, 128, 0, 0, 3, 64, 65, 0, 17, 0, 0, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 2, 127, 127, 0, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 153, 128, 128, 128, 0, 2, 130, 128, 128, 128, 0, 0, 11, 140, 128, 128, 128, 0, 0, 3, 64, 65, 0, 65, 0, 17, 0, 0, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 136, 128, 128, 128, 0, 2, 96, 1, 127, 0, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 155, 128, 128, 128, 0, 2, 130, 128, 128, 128, 0, 0, 11, 142, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 65, 0, 17, 0, 0, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 137, 128, 128, 128, 0, 2, 96, 2, 127, 127, 0, 96, 0, 0, 3, 131, 128, 128, 128, 0, 2, 0, 1, 4, 133, 128, 128, 128, 0, 1, 112, 1, 1, 1, 9, 135, 128, 128, 128, 0, 1, 0, 65, 0, 11, 1, 0, 10, 157, 128, 128, 128, 0, 2, 130, 128, 128, 128, 0, 0, 11, 144, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 65, 0, 65, 0, 17, 0, 0, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 141, 128, 128, 128, 0, 1, 135, 128, 128, 128, 0, 0, 65, 0, 17, 1, 0, 11]), "unknown type")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 10, 145, 128, 128, 128, 0, 1, 139, 128, 128, 128, 0, 0, 65, 0, 17, 148, 152, 219, 226, 3, 0, 11]), "unknown type")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 4, 133, 128, 128, 128, 0, 1, 112, 1, 2, 2, 9, 136, 128, 128, 128, 0, 1, 0, 65, 0, 11, 2, 0, 0]), "unknown function")
test run_call_indirect ... ok
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(65536)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(65536)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(64736)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(803)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(2)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(0)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(6)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(2)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(6)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(0)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(65536)] }, [I32(4294967295)])
test run_resizing ... ok
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(0)] }, [I32(10)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(65536)] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "check-memory-zero", args: [I32(0), I32(65535)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "check-memory-zero", args: [I32(65536), I32(131071)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(2)])
run assertion Return(Invoke { mod_ref: None, func: "check-memory-zero", args: [I32(131072), I32(196607)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(3)])
run assertion Return(Invoke { mod_ref: None, func: "check-memory-zero", args: [I32(196608), I32(262143)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(4)])
run assertion Return(Invoke { mod_ref: None, func: "check-memory-zero", args: [I32(262144), I32(327679)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "grow", args: [I32(1)] }, [I32(5)])
run assertion Return(Invoke { mod_ref: None, func: "check-memory-zero", args: [I32(327680), I32(393215)] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-br-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-cond", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_if-value-cond", args: [] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-index", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-br_table-value-index", args: [] }, [I32(6)])
run assertion Return(Invoke { mod_ref: None, func: "as-return-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-cond", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-then", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-if-else", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-first", args: [I32(0), I32(1)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-second", args: [I32(0), I32(0)] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-select-cond", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-first", args: [] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-mid", args: [] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "as-call-last", args: [] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-first", args: [] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-mid", args: [] }, [I32(4294967295)])
run assertion Return(Invoke { mod_ref: None, func: "as-call_indirect-last", args: [] }, [I32(4294967295)])
run assertion TrapAction(Invoke { mod_ref: None, func: "as-call_indirect-index", args: [] }, "undefined element")
run assertion Return(Invoke { mod_ref: None, func: "as-local.set-value", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-local.tee-value", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-global.set-value", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-load-address", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-loadN-address", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-store-address", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-store-value", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-storeN-address", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-storeN-value", args: [] }, [])
run assertion Return(Invoke { mod_ref: None, func: "as-unary-operand", args: [] }, [I32(31)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-left", args: [] }, [I32(11)])
run assertion Return(Invoke { mod_ref: None, func: "as-binary-right", args: [] }, [I32(9)])
run assertion Return(Invoke { mod_ref: None, func: "as-test-operand", args: [] }, [I32(0)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-left", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-compare-right", args: [] }, [I32(1)])
run assertion Return(Invoke { mod_ref: None, func: "as-memory.grow-size", args: [] }, [I32(1)])
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 139, 128, 128, 128, 0, 1, 133, 128, 128, 128, 0, 0, 64, 0, 26, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 2, 64, 64, 0, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 144, 128, 128, 128, 0, 1, 138, 128, 128, 128, 0, 0, 65, 0, 3, 64, 64, 0, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 132, 128, 128, 128, 0, 1, 96, 0, 0, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 0, 10, 146, 128, 128, 128, 0, 1, 140, 128, 128, 128, 0, 0, 65, 0, 65, 0, 4, 64, 64, 0, 26, 11, 11]), "type mismatch")
run assertion Invalid(Binary(None, [0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 10, 143, 128, 128, 128, 0, 1, 137, 128, 128, 128, 0, 0, 67, 0, 0, 0, 0, 64, 0, 11]), "type mismatch")
test run_memory_grow ... ok

test result: ok. 80 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out


running 1 test
test src/lib.rs - alloc_func (line 191) ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out

